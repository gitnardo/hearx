{"version":3,"file":"datorama-akita.js.map","sources":["ng://@datorama/akita/src/isArray.ts","ng://@datorama/akita/src/isEmpty.ts","ng://@datorama/akita/src/toEntitiesObject.ts","ng://@datorama/akita/src/hasEntity.ts","ng://@datorama/akita/src/activeState.ts","ng://@datorama/akita/src/setEntities.ts","ng://@datorama/akita/src/actions.ts","ng://@datorama/akita/src/config.ts","ng://@datorama/akita/src/deepFreeze.ts","ng://@datorama/akita/src/dispatchers.ts","ng://@datorama/akita/src/env.ts","ng://@datorama/akita/src/errors.ts","ng://@datorama/akita/src/isNil.ts","ng://@datorama/akita/src/isDefined.ts","ng://@datorama/akita/src/isFunction.ts","ng://@datorama/akita/src/toBoolean.ts","ng://@datorama/akita/src/isPlainObject.ts","ng://@datorama/akita/src/root.ts","ng://@datorama/akita/src/storeConfig.ts","ng://@datorama/akita/src/stores.ts","ng://@datorama/akita/src/transaction.ts","ng://@datorama/akita/src/store.ts","ng://@datorama/akita/src/isObject.ts","ng://@datorama/akita/src/getActiveEntities.ts","ng://@datorama/akita/src/addEntities.ts","ng://@datorama/akita/src/coerceArray.ts","ng://@datorama/akita/src/removeEntities.ts","ng://@datorama/akita/src/getInitialEntitiesState.ts","ng://@datorama/akita/src/updateEntities.ts","ng://@datorama/akita/src/isUndefined.ts","ng://@datorama/akita/src/entityActions.ts","ng://@datorama/akita/src/defaultIDKey.ts","ng://@datorama/akita/src/entityStore.ts","ng://@datorama/akita/src/arrayFind.ts","ng://@datorama/akita/src/sort.ts","ng://@datorama/akita/src/entitiesToArray.ts","ng://@datorama/akita/src/entitiesToMap.ts","ng://@datorama/akita/src/isString.ts","ng://@datorama/akita/src/getEntity.ts","ng://@datorama/akita/src/mapSkipUndefined.ts","ng://@datorama/akita/src/queryConfig.ts","ng://@datorama/akita/src/compareKeys.ts","ng://@datorama/akita/src/query.ts","ng://@datorama/akita/src/sortByOptions.ts","ng://@datorama/akita/src/queryEntity.ts","ng://@datorama/akita/src/filterNil.ts","ng://@datorama/akita/src/getValueByString.ts","ng://@datorama/akita/src/setValueByString.ts","ng://@datorama/akita/src/persistState.ts","ng://@datorama/akita/src/snapshotManager.ts","ng://@datorama/akita/src/plugins/plugin.ts","ng://@datorama/akita/src/plugins/paginator/paginatorPlugin.ts","ng://@datorama/akita/src/plugins/persistForm/persistNgFormPlugin.ts","ng://@datorama/akita/src/captialize.ts","ng://@datorama/akita/src/devtools.ts","ng://@datorama/akita/src/plugins/entityCollectionPlugin.ts","ng://@datorama/akita/src/plugins/stateHistory/stateHistoryPlugin.ts","ng://@datorama/akita/src/plugins/stateHistory/entityStateHistoryPlugin.ts","ng://@datorama/akita/src/plugins/dirtyCheck/dirtyCheckPlugin.ts","ng://@datorama/akita/src/plugins/dirtyCheck/entityDirtyCheckPlugin.ts","ng://@datorama/akita/src/guid.ts","ng://@datorama/akita/src/toEntitiesIds.ts","ng://@datorama/akita/src/resetStores.ts","ng://@datorama/akita/src/isNumber.ts","ng://@datorama/akita/src/runStoreAction.ts","ng://@datorama/akita/src/arrayUpdate.ts","ng://@datorama/akita/src/arrayAdd.ts","ng://@datorama/akita/src/arrayUpsert.ts","ng://@datorama/akita/src/not.ts","ng://@datorama/akita/src/arrayRemove.ts","ng://@datorama/akita/src/fp.ts","ng://@datorama/akita/src/cacheable.ts","ng://@datorama/akita/src/combineQueries.ts","ng://@datorama/akita/src/entityService.ts","ng://@datorama/akita/src/setLoading.ts"],"sourcesContent":["// @internal\nexport function isArray<T>(value: any): value is T[] {\n  return Array.isArray(value);\n}\n","import { isArray } from './isArray';\n\n// @internal\nexport function isEmpty<T>(arr: T) {\n  if (isArray(arr)) {\n    return arr.length === 0;\n  }\n  return false;\n}\n","import { PreAddEntity } from './types';\n\n// @internal\nexport function toEntitiesObject<E>(entities: E[], idKey: string, preAddEntity: PreAddEntity<E>) {\n  const acc = {\n    entities: {},\n    ids: []\n  };\n\n  for (const entity of entities) {\n    // evaluate the middleware first to support dynamic ids\n    const current = preAddEntity(entity);\n    acc.entities[current[idKey]] = current;\n    acc.ids.push(current[idKey]);\n  }\n\n  return acc;\n}\n","import { EntityState, ID } from './index';\n\n// @internal\nexport function hasEntity<E>(entities: EntityState<E>, id: ID) {\n  return entities.hasOwnProperty(id);\n}\n","import { ActiveState, EntityState, ID, IDS, MultiActiveState } from './types';\nimport { hasEntity } from './hasEntity';\nimport { isArray } from './isArray';\n\n// @internal\nexport function hasActiveState<E>(state: EntityState<E>): state is EntityState<E> & (ActiveState | MultiActiveState) {\n  return state.hasOwnProperty('active');\n}\n\n// @internal\nexport function isMultiActiveState(active: IDS): active is ID[] {\n  return isArray(active);\n}\n\n// @internal\nexport function resolveActiveEntity<E>({ active, ids, entities }: EntityState<E> & (ActiveState | MultiActiveState)) {\n  if (isMultiActiveState(active)) {\n    return getExitingActives(active, ids);\n  }\n\n  if (hasEntity(entities, active) === false) {\n    return null;\n  }\n\n  return active;\n}\n\n// @internal\nexport function getExitingActives(currentActivesIds: ID[], newIds: ID[]) {\n  const filtered = currentActivesIds.filter(id => newIds.indexOf(id) > -1);\n  /** Return the same reference if nothing has changed */\n  if (filtered.length === currentActivesIds.length) {\n    return currentActivesIds;\n  }\n\n  return filtered;\n}\n","import { Entities, EntityState, HashMap, ID, PreAddEntity } from './types';\nimport { toEntitiesObject } from './toEntitiesObject';\nimport { isArray } from './isArray';\nimport { hasActiveState, resolveActiveEntity } from './activeState';\n\nexport type SetEntities<Entity> = Entity[] | Entities<Entity> | HashMap<Entity>;\n\nexport type SetEntitiesParams<State, Entity> = {\n  state: State;\n  entities: SetEntities<Entity>;\n  idKey: string;\n  preAddEntity: PreAddEntity<Entity>;\n  isNativePreAdd?: boolean;\n};\n\n// @internal\nexport function isEntityState<Entity>(state): state is Entities<Entity> {\n  return state.entities && state.ids;\n}\n\n// @internal\nfunction applyMiddleware<E>(entities: HashMap<E>, preAddEntity: PreAddEntity<E>) {\n  let mapped = {};\n  for (const id of Object.keys(entities)) {\n    mapped[id] = preAddEntity(entities[id]);\n  }\n\n  return mapped;\n}\n\n// @internal\nexport function setEntities<S extends EntityState<E>, E>({ state, entities, idKey, preAddEntity, isNativePreAdd }: SetEntitiesParams<S, E>): S {\n  let newEntities: HashMap<E>;\n  let newIds: ID[];\n\n  if (isArray(entities)) {\n    const resolve = toEntitiesObject(entities, idKey, preAddEntity);\n    newEntities = resolve.entities;\n    newIds = resolve.ids;\n  } else if (isEntityState(entities)) {\n    newEntities = isNativePreAdd ? entities.entities : applyMiddleware(entities.entities, preAddEntity);\n    newIds = entities.ids;\n  } else {\n    // it's an object\n    newEntities = isNativePreAdd ? entities : applyMiddleware(entities, preAddEntity);\n    newIds = Object.keys(newEntities).map(id => (isNaN(id as any) ? id : Number(id)));\n  }\n\n  const newState = {\n    ...state,\n    entities: newEntities,\n    ids: newIds,\n    loading: false\n  };\n\n  if (hasActiveState(state)) {\n    newState.active = resolveActiveEntity(newState as any);\n  }\n\n  return newState;\n}\n","export const currentAction = {\n  type: null,\n  entityIds: null,\n  skip: false\n};\n\nlet customActionActive = false;\n\nexport function resetCustomAction() {\n  customActionActive = false;\n}\n\n// public API for custom actions. Custom action always wins\nexport function logAction(type: string, entityIds?) {\n  setAction(type, entityIds);\n  customActionActive = true;\n}\n\nexport function setAction(type: string, entityIds?) {\n  if (customActionActive === false) {\n    currentAction.type = type;\n    currentAction.entityIds = entityIds;\n  }\n}\n\nexport function setSkipAction(skip = true) {\n  currentAction.skip = skip;\n}\n\nexport function action(action: string, entityIds?) {\n  return function(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function(...args) {\n      logAction(action, entityIds);\n      return originalMethod.apply(this, args);\n    };\n\n    return descriptor;\n  };\n}\n","export interface AkitaConfig {\n  /**\n   * Whether to allowed the reset() stores functionality\n   */\n  resettable?: boolean;\n  ttl?: number;\n  producerFn?: (state: any, fn: any) => any;\n}\n\nlet CONFIG: AkitaConfig = {\n  resettable: false,\n  ttl: null,\n  producerFn: undefined\n};\n\nexport function akitaConfig(config: AkitaConfig) {\n  CONFIG = { ...CONFIG, ...config };\n}\n\n// @internal\nexport function getAkitaConfig() {\n  return CONFIG;\n}\n\nexport function getGlobalProducerFn() {\n  return CONFIG.producerFn;\n}\n","// @internal\nexport function deepFreeze(o) {\n  Object.freeze(o);\n\n  const oIsFunction = typeof o === 'function';\n  const hasOwnProp = Object.prototype.hasOwnProperty;\n\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\n    if (\n      hasOwnProp.call(o, prop) &&\n      (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&\n      o[prop] !== null &&\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n      !Object.isFrozen(o[prop])\n    ) {\n      deepFreeze(o[prop]);\n    }\n  });\n\n  return o;\n}\n","import { ReplaySubject, Subject } from 'rxjs';\n\n// @internal\nexport const $$deleteStore = new Subject<string>();\n// @internal\nexport const $$addStore = new ReplaySubject<string>(50, 5000);\n// @internal\nexport const $$updateStore = new Subject<string>();\n\n// @internal\nexport function dispatchDeleted(storeName: string) {\n  $$deleteStore.next(storeName);\n}\n\n// @internal\nexport function dispatchAdded(storeName: string) {\n  $$addStore.next(storeName);\n}\n\n// @internal\nexport function dispatchUpdate(storeName: string) {\n  $$updateStore.next(storeName);\n}\n","export let __DEV__ = true;\n\nexport function enableAkitaProdMode() {\n  __DEV__ = false;\n}\n\n// @internal\nexport function isDev() {\n  return __DEV__;\n}\n","// @internal\nexport class AkitaError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n// @internal\nexport function assertStoreHasName(name: string, className: string) {\n  if (!name) {\n    console.error(`@StoreConfig({ name }) is missing in ${className}`);\n  }\n}\n","// @internal\nexport function isNil(v) {\n  return v === null || v === undefined;\n}\n","import { isNil } from './isNil';\n\n// @internal\nexport function isDefined(val: any) {\n  return isNil(val) === false;\n}\n","// @internal\nexport function isFunction(value: any): value is Function {\n  return typeof value === 'function';\n}\n","// @internal\nexport function toBoolean(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n","import { toBoolean } from './toBoolean';\n\n// @internal\nexport function isPlainObject(value) {\n  return toBoolean(value) && value.constructor.name === 'Object';\n}\n","export const isBrowser = typeof window !== 'undefined';\nexport const isNotBrowser = !isBrowser;\nexport const isNativeScript = typeof global !== 'undefined' && (<any>global).__runtimeVersion !== 'undefined';\nexport const hasLocalStorage = () => {\n  try {\n    return typeof localStorage !== 'undefined';\n  } catch {\n    return false;\n  }\n}\nexport const hasSessionStorage = () => {\n  try {\n    return typeof sessionStorage !== 'undefined';\n  } catch {\n    return false;\n  }\n}\n","import { AkitaConfig } from './config';\n\nexport type StoreConfigOptions = {\n  name: string;\n  resettable?: AkitaConfig['resettable'];\n  cache?: { ttl: number };\n  deepFreezeFn?: (o: any) => any;\n  idKey?: string;\n  producerFn?: AkitaConfig['producerFn'];\n};\n\nexport type UpdatableStoreConfigOptions = {\n  cache?: { ttl: number };\n};\n\nexport const configKey = 'akitaConfig';\n\nexport function StoreConfig(metadata: StoreConfigOptions) {\n  return function(constructor: Function) {\n    constructor[configKey] = { idKey: 'id' };\n\n    for (let i = 0, keys = Object.keys(metadata); i < keys.length; i++) {\n      const key = keys[i];\n      /* name is preserved read only key */\n      if (key === 'name') {\n        constructor[configKey]['storeName'] = metadata[key];\n      } else {\n        constructor[configKey][key] = metadata[key];\n      }\n    }\n  };\n}\n","import { Store } from './store';\nimport { isDev } from './env';\nimport { isBrowser } from './root';\nimport { Query } from './query';\n\n// @internal\nexport const __stores__: { [storeName: string]: Store<any> } = {};\n\n// @internal\nexport const __queries__: { [storeName: string]: Query<any> } = {};\n\nif (isBrowser && isDev()) {\n  (window as any).$$stores = __stores__;\n  (window as any).$$queries = __queries__;\n}\n","import { BehaviorSubject, Observable, of, Subject } from 'rxjs';\nimport { logAction } from './actions';\nimport { tap } from 'rxjs/operators';\n\n// @internal\nconst transactionFinished = new Subject();\n\n// @internal\nconst transactionInProcess = new BehaviorSubject(false);\n\nexport type TransactionManager = {\n  activeTransactions: number;\n  batchTransaction: Subject<boolean> | null;\n};\n\n// @internal\nexport const transactionManager: TransactionManager = {\n  activeTransactions: 0,\n  batchTransaction: null\n};\n\n// @internal\nexport function startBatch() {\n  if (!isTransactionInProcess()) {\n    transactionManager.batchTransaction = new Subject();\n  }\n  transactionManager.activeTransactions++;\n  transactionInProcess.next(true);\n}\n\n// @internal\nexport function endBatch() {\n  if (--transactionManager.activeTransactions === 0) {\n    transactionManager.batchTransaction.next(true);\n    transactionManager.batchTransaction.complete();\n    transactionInProcess.next(false);\n    transactionFinished.next(true);\n  }\n}\n\n// @internal\nexport function isTransactionInProcess() {\n  return transactionManager.activeTransactions > 0;\n}\n\n// @internal\nexport function commit(): Observable<boolean> {\n  return transactionManager.batchTransaction ? transactionManager.batchTransaction.asObservable() : of(true);\n}\n\n/**\n *  A logical transaction.\n *  Use this transaction to optimize the dispatch of all the stores.\n *  The following code will update the store, BUT  emits only once\n *\n *  @example\n *  applyTransaction(() => {\n *    this.todosStore.add(new Todo(1, title));\n *    this.todosStore.add(new Todo(2, title));\n *  });\n *\n */\nexport function applyTransaction<T>(action: () => T, thisArg = undefined): T {\n  startBatch();\n  try {\n    return action.apply(thisArg);\n  } finally {\n    logAction('@Transaction');\n    endBatch();\n  }\n}\n\n/**\n *  A logical transaction.\n *  Use this transaction to optimize the dispatch of all the stores.\n *\n *  The following code will update the store, BUT  emits only once.\n *\n *  @example\n *  @transaction\n *  addTodos() {\n *    this.todosStore.add(new Todo(1, title));\n *    this.todosStore.add(new Todo(2, title));\n *  }\n *\n *\n */\nexport function transaction() {\n  return function(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = function(...args) {\n      return applyTransaction(() => {\n        return originalMethod.apply(this, args);\n      }, this);\n    };\n\n    return descriptor;\n  };\n}\n\n/**\n *\n * RxJS custom operator that wraps the callback inside transaction\n *\n * @example\n *\n * return http.get().pipe(\n *    withTransaction(response > {\n *      store.setActive(1);\n *      store.update();\n *      store.updateEntity(1, {});\n *    })\n * )\n *\n */\nexport function withTransaction<T>(next: (value: T) => void) {\n  return function(source: Observable<T>): Observable<T> {\n    return source.pipe(tap(value => applyTransaction(() => next(value))));\n  };\n}\n","import { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { resetCustomAction, setAction } from './actions';\nimport { getAkitaConfig, getGlobalProducerFn } from './config';\nimport { deepFreeze } from './deepFreeze';\nimport { dispatchAdded, dispatchDeleted, dispatchUpdate } from './dispatchers';\nimport { __DEV__, isDev } from './env';\nimport { assertStoreHasName } from './errors';\nimport { isDefined } from './isDefined';\nimport { isFunction } from './isFunction';\nimport { isPlainObject } from './isPlainObject';\nimport { isBrowser } from './root';\nimport { configKey, StoreConfigOptions, UpdatableStoreConfigOptions } from './storeConfig';\nimport { __stores__ } from './stores';\nimport { commit, isTransactionInProcess } from './transaction';\nimport { StoreCache, UpdateStateCallback } from './types';\n\n/**\n *\n * Store for managing any type of data\n *\n * @example\n *\n * export interface SessionState {\n *   token: string;\n *   userDetails: UserDetails\n * }\n *\n * export function createInitialState(): SessionState {\n *  return {\n *    token: '',\n *    userDetails: null\n *  };\n * }\n *\n * @StoreConfig({ name: 'session' })\n * export class SessionStore extends Store<SessionState> {\n *   constructor() {\n *    super(createInitialState());\n *   }\n * }\n */\nexport class Store<S = any> {\n  private store: BehaviorSubject<Readonly<S>>;\n  private storeValue: S;\n  private inTransaction = false;\n  private _initialState: S;\n  protected cache: StoreCache = {\n    active: new BehaviorSubject<boolean>(false),\n    ttl: null\n  };\n\n  constructor(initialState: Partial<S>, protected options: Partial<StoreConfigOptions> = {}) {\n    this.onInit(initialState as S);\n  }\n\n  /**\n   *  Set the loading state\n   *\n   *  @example\n   *\n   *  store.setLoading(true)\n   *\n   */\n  setLoading(loading = false) {\n    if (loading !== (this._value() as S & { loading: boolean }).loading) {\n      isDev() && setAction('Set Loading');\n      this._setState(state => ({ ...state, loading } as S & { loading: boolean }));\n    }\n  }\n\n  /**\n   *\n   * Set whether the data is cached\n   *\n   * @example\n   *\n   * store.setHasCache(true)\n   * store.setHasCache(false)\n   * store.setHasCache(true, { restartTTL: true })\n   *\n   */\n  setHasCache(hasCache: boolean, options: { restartTTL: boolean } = { restartTTL: false }) {\n    if (hasCache !== this.cache.active.value) {\n      this.cache.active.next(hasCache);\n    }\n\n    if (options.restartTTL) {\n      const ttlConfig = this.getCacheTTL();\n      if (ttlConfig) {\n        if (this.cache.ttl !== null) {\n          clearTimeout(this.cache.ttl);\n        }\n        this.cache.ttl = <any>setTimeout(() => this.setHasCache(false), ttlConfig);\n      }\n    }\n  }\n\n  /**\n   *\n   * Sometimes we need to access the store value from a store\n   *\n   * @example middleware\n   *\n   */\n  getValue() {\n    return this.storeValue;\n  }\n\n  /**\n   *  Set the error state\n   *\n   *  @example\n   *\n   *  store.setError({text: 'unable to load data' })\n   *\n   */\n  setError<T>(error: T) {\n    if (error !== (this._value() as S & { error: any }).error) {\n      isDev() && setAction('Set Error');\n      this._setState(state => ({ ...state, error } as S & { error: any }));\n    }\n  }\n\n  // @internal\n  _select<R>(project: (store: S) => R): Observable<R> {\n    return this.store.asObservable().pipe(\n      map(project),\n      distinctUntilChanged()\n    );\n  }\n\n  // @internal\n  _value(): S {\n    return this.storeValue;\n  }\n\n  // @internal\n  _cache(): BehaviorSubject<boolean> {\n    return this.cache.active;\n  }\n\n  // @internal\n  get config(): StoreConfigOptions {\n    return this.constructor[configKey] || {};\n  }\n\n  // @internal\n  get storeName() {\n    return (this.config as StoreConfigOptions & { storeName: string }).storeName || (this.options as StoreConfigOptions & { storeName: string }).storeName || this.options.name;\n  }\n\n  // @internal\n  get deepFreeze() {\n    return this.config.deepFreezeFn || this.options.deepFreezeFn || deepFreeze;\n  }\n\n  // @internal\n  get cacheConfig() {\n    return this.config.cache || this.options.cache;\n  }\n\n  get _producerFn() {\n    return this.config.producerFn || this.options.producerFn || getGlobalProducerFn();\n  }\n\n  // @internal\n  get resettable() {\n    return isDefined(this.config.resettable) ? this.config.resettable : this.options.resettable;\n  }\n\n  // @internal\n  _setState(newState: ((state: Readonly<S>) => S) | S, _dispatchAction = true) {\n    if (isFunction(newState)) {\n      const _newState = newState(this._value());\n      this.storeValue = __DEV__ ? this.deepFreeze(_newState) : _newState;\n    } else {\n      this.storeValue = newState;\n    }\n\n    if (!this.store) {\n      this.store = new BehaviorSubject(this.storeValue);\n      return;\n    }\n\n    if (isTransactionInProcess()) {\n      this.handleTransaction();\n      return;\n    }\n\n    this.dispatch(this.storeValue, _dispatchAction);\n  }\n\n  /**\n   *\n   * Reset the current store back to the initial value\n   *\n   * @example\n   *\n   * store.reset()\n   *\n   */\n  reset() {\n    if (this.isResettable()) {\n      isDev() && setAction('Reset');\n      this._setState(() => Object.assign({}, this._initialState));\n      this.setHasCache(false);\n    } else {\n      isDev() && console.warn(`You need to enable the reset functionality`);\n    }\n  }\n\n  /**\n   *\n   * Update the store's value\n   *\n   * @example\n   *\n   * this.store.update(state => {\n   *   return {...}\n   * })\n   */\n  update(stateCallback: UpdateStateCallback<S>);\n  /**\n   *\n   * @example\n   *\n   *  this.store.update({ token: token })\n   */\n  update(state: Partial<S>);\n  update(stateOrCallback: Partial<S> | UpdateStateCallback<S>) {\n    isDev() && setAction('Update');\n\n    let newState;\n    const currentState = this._value();\n    if (isFunction(stateOrCallback)) {\n      newState = isFunction(this._producerFn) ? this._producerFn(currentState, stateOrCallback) : stateOrCallback(currentState);\n    } else {\n      newState = stateOrCallback;\n    }\n\n    const withHook = this.akitaPreUpdate(currentState, { ...currentState, ...newState } as S);\n    const resolved = isPlainObject(currentState) ? withHook : new (currentState as any).constructor(withHook);\n    this._setState(resolved);\n  }\n\n  updateStoreConfig(newOptions: UpdatableStoreConfigOptions) {\n    this.options = { ...this.options, ...newOptions };\n  }\n\n  // @internal\n  akitaPreUpdate(_: Readonly<S>, nextState: Readonly<S>): S {\n    return nextState;\n  }\n\n  ngOnDestroy() {\n    this.destroy();\n  }\n\n  /**\n   *\n   * Destroy the store\n   *\n   * @example\n   *\n   * store.destroy()\n   *\n   */\n  destroy() {\n    const hmrEnabled = isBrowser ? (window as any).hmrEnabled : false;\n    if (!hmrEnabled && this === __stores__[this.storeName]) {\n      delete __stores__[this.storeName];\n      dispatchDeleted(this.storeName);\n      this.setHasCache(false);\n      this.cache.active.complete();\n    }\n  }\n\n  private onInit(initialState: S) {\n    __stores__[this.storeName] = this;\n    this._setState(() => initialState);\n    dispatchAdded(this.storeName);\n    if (this.isResettable()) {\n      this._initialState = initialState;\n    }\n    isDev() && assertStoreHasName(this.storeName, this.constructor.name);\n  }\n\n  private dispatch(state: S, _dispatchAction = true) {\n    this.store.next(state);\n    if (_dispatchAction) {\n      dispatchUpdate(this.storeName);\n      resetCustomAction();\n    }\n  }\n\n  private watchTransaction() {\n    commit().subscribe(() => {\n      this.inTransaction = false;\n      this.dispatch(this._value());\n    });\n  }\n\n  private isResettable() {\n    if (this.resettable === false) {\n      return false;\n    }\n    return this.resettable || getAkitaConfig().resettable;\n  }\n\n  private handleTransaction() {\n    if (!this.inTransaction) {\n      this.watchTransaction();\n      this.inTransaction = true;\n    }\n  }\n\n  private getCacheTTL() {\n    return (this.cacheConfig && this.cacheConfig.ttl) || getAkitaConfig().ttl;\n  }\n}\n","// @internal\nexport function isObject(value: any) {\n  const type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n","import { ID, IDS } from './types';\nimport { isNil } from './isNil';\nimport { isObject } from './isObject';\nimport { isArray } from './isArray';\n\nexport type SetActiveOptions = { prev?: boolean; next?: boolean; wrap?: boolean };\n\n// @internal\nexport function getActiveEntities(idOrOptions: IDS | SetActiveOptions | null, ids: ID[], currentActive: IDS | null) {\n  let result;\n\n  if (isArray(idOrOptions)) {\n    result = idOrOptions;\n  } else {\n    if (isObject(idOrOptions)) {\n      if (isNil(currentActive)) return;\n      (idOrOptions as SetActiveOptions) = Object.assign({ wrap: true }, idOrOptions);\n      const currentIdIndex = ids.indexOf(currentActive as ID);\n      if ((idOrOptions as SetActiveOptions).prev) {\n        const isFirst = currentIdIndex === 0;\n        if (isFirst && !(idOrOptions as SetActiveOptions).wrap) return;\n        result = isFirst ? ids[ids.length - 1] : (ids[currentIdIndex - 1] as any);\n      } else if ((idOrOptions as SetActiveOptions).next) {\n        const isLast = ids.length === currentIdIndex + 1;\n        if (isLast && !(idOrOptions as SetActiveOptions).wrap) return;\n        result = isLast ? ids[0] : (ids[currentIdIndex + 1] as any);\n      }\n    } else {\n      if (idOrOptions === currentActive) return;\n      result = idOrOptions as ID;\n    }\n  }\n\n  return result;\n}\n","import { EntityState, PreAddEntity } from './types';\nimport { hasEntity } from './hasEntity';\n\nexport type AddEntitiesParams<State, Entity> = {\n  state: State;\n  entities: Entity[];\n  idKey: string;\n  options: AddEntitiesOptions;\n  preAddEntity: PreAddEntity<Entity>;\n};\n\nexport type AddEntitiesOptions = { prepend?: boolean; loading?: boolean };\n\n// @internal\nexport function addEntities<S extends EntityState<E>, E>({ state, entities, idKey, options = {}, preAddEntity }: AddEntitiesParams<S, E>) {\n  let newEntities = {};\n  let newIds = [];\n  let hasNewEntities = false;\n\n  for (const entity of entities) {\n    if (hasEntity(state.entities, entity[idKey]) === false) {\n      // evaluate the middleware first to support dynamic ids\n      const current = preAddEntity(entity);\n      const entityId = current[idKey];\n      newEntities[entityId] = current;\n      if (options.prepend) newIds.unshift(entityId);\n      else newIds.push(entityId);\n\n      hasNewEntities = true;\n    }\n  }\n\n  return hasNewEntities\n    ? {\n        newState: {\n          ...state,\n          entities: {\n            ...state.entities,\n            ...newEntities\n          },\n          ids: options.prepend ? [...newIds, ...state.ids] : [...state.ids, ...newIds]\n        },\n        newIds\n      }\n    : null;\n}\n","import { isNil } from './isNil';\n\n// @internal\nexport function coerceArray<T>(value: T | T[]): T[] {\n  if (isNil(value)) {\n    return [];\n  }\n  return Array.isArray(value) ? value : [value];\n}\n","import { EntityState, ID, StateWithActive } from './types';\nimport { isNil } from './isNil';\nimport { hasActiveState, isMultiActiveState, resolveActiveEntity } from './activeState';\n\nexport type RemoveEntitiesParams<State, Entity> = {\n  state: StateWithActive<State>;\n  ids: any[];\n};\n\n// @internal\nexport function removeEntities<S extends EntityState<E>, E>({ state, ids }: RemoveEntitiesParams<S, E>): S {\n  if (isNil(ids)) return removeAllEntities(state);\n  const entities = state.entities;\n  let newEntities = {};\n\n  for (const id of state.ids) {\n    if (ids.includes(id) === false) {\n      newEntities[id] = entities[id];\n    }\n  }\n\n  const newState = {\n    ...state,\n    entities: newEntities,\n    ids: state.ids.filter(current => ids.includes(current) === false)\n  };\n\n  if (hasActiveState(state)) {\n    newState.active = resolveActiveEntity(newState);\n  }\n\n  return newState;\n}\n\n// @internal\nexport function removeAllEntities<S>(state: StateWithActive<S>): S {\n  return {\n    ...state,\n    entities: {},\n    ids: [],\n    active: isMultiActiveState(state.active) ? [] : null\n  };\n}\n","import { EntityState } from './index';\n\n// @internal\nexport const getInitialEntitiesState = () =>\n  ({\n    entities: {},\n    ids: [],\n    loading: true,\n    error: null\n  } as EntityState);\n","import { EntityState, ID, PreUpdateEntity, UpdateStateCallback } from './types';\nimport { isFunction } from './isFunction';\nimport { hasEntity } from './hasEntity';\nimport { isPlainObject } from './isPlainObject';\n\nexport type UpdateEntitiesParams<State, Entity> = {\n  state: State;\n  ids: any[];\n  idKey: string;\n  newStateOrFn: UpdateStateCallback<Entity> | Partial<Entity> | Partial<State>;\n  preUpdateEntity: PreUpdateEntity<Entity>;\n  producerFn;\n};\n\n// @internal\nexport function updateEntities<S extends EntityState<E>, E>({ state, ids, idKey, newStateOrFn, preUpdateEntity, producerFn }: UpdateEntitiesParams<S, E>) {\n  const updatedEntities = {};\n\n  let isUpdatingIdKey = false;\n  let idToUpdate: ID;\n\n  for (const id of ids) {\n    // if the entity doesn't exist don't do anything\n    if (hasEntity(state.entities, id) === false) {\n      continue;\n    }\n\n    const oldEntity = state.entities[id];\n    let newState;\n    if (isFunction(newStateOrFn)) {\n      newState = isFunction(producerFn) ? producerFn(oldEntity, newStateOrFn) : newStateOrFn(oldEntity);\n    } else {\n      newState = newStateOrFn;\n    }\n\n    const isIdChanged = newState.hasOwnProperty(idKey) && newState[idKey] !== oldEntity[idKey];\n    let newEntity: E;\n    idToUpdate = id;\n\n    if (isIdChanged) {\n      isUpdatingIdKey = true;\n      idToUpdate = newState[idKey];\n    }\n\n    const merged = {\n      ...oldEntity,\n      ...newState\n    };\n\n    if (isPlainObject(oldEntity)) {\n      newEntity = merged;\n    } else {\n      /**\n       * In case that new state is class of it's own, there's\n       * a possibility that it will be different than the old\n       * class.\n       * For example, Old state is an instance of animal class\n       * and new state is instance of person class.\n       * To avoid run over new person class with the old animal\n       * class we check if the new state is a class of it's own.\n       * If so, use it. Otherwise, use the old state class\n       */\n      if (isPlainObject(newState)) {\n        newEntity = new (oldEntity as any).constructor(merged);\n      } else {\n        newEntity = new (newState as any).constructor(merged);\n      }\n    }\n\n    updatedEntities[idToUpdate] = preUpdateEntity(oldEntity, newEntity);\n  }\n\n  let updatedIds = state.ids;\n  let stateEntities = state.entities;\n\n  if (isUpdatingIdKey) {\n    const [id] = ids;\n    const { [id]: deletedEntity, ...rest } = state.entities;\n    stateEntities = rest;\n    updatedIds = state.ids.map(current => (current === id ? idToUpdate : current));\n  }\n\n  return {\n    ...state,\n    entities: {\n      ...stateEntities,\n      ...updatedEntities\n    },\n    ids: updatedIds\n  };\n}\n","// @internal\nexport function isUndefined(value: any): value is undefined {\n  return value === undefined;\n}\n","export enum EntityActions {\n  Set,\n  Add,\n  Update,\n  Remove\n}\n\nexport interface EntityAction<IDType> {\n  type: EntityActions;\n  ids: IDType[];\n}\n","export const DEFAULT_ID_KEY = 'id';\n","import { isEmpty } from './isEmpty';\nimport { SetEntities, setEntities } from './setEntities';\nimport { Store } from './store';\nimport { Constructor, EntityState, EntityUICreateFn, IDS, OrArray, StateWithActive, UpdateEntityPredicate, UpdateStateCallback, getEntityType, getIDType } from './types';\nimport { getActiveEntities, SetActiveOptions } from './getActiveEntities';\nimport { addEntities, AddEntitiesOptions } from './addEntities';\nimport { coerceArray } from './coerceArray';\nimport { removeEntities } from './removeEntities';\nimport { getInitialEntitiesState } from './getInitialEntitiesState';\nimport { isDefined } from './isDefined';\nimport { updateEntities } from './updateEntities';\nimport { transaction } from './transaction';\nimport { isNil } from './isNil';\nimport { isFunction } from './isFunction';\nimport { isUndefined } from './isUndefined';\nimport { StoreConfigOptions } from './storeConfig';\nimport { logAction, setAction } from './actions';\nimport { isDev } from './env';\nimport { hasEntity } from './hasEntity';\nimport { Observable, Subject } from 'rxjs';\nimport { EntityAction, EntityActions } from './entityActions';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\n\n/**\n *\n * Store for managing a collection of entities\n *\n * @example\n *\n * export interface WidgetsState extends EntityState<Widget> { }\n *\n * @StoreConfig({ name: 'widgets' })\n *  export class WidgetsStore extends EntityStore<WidgetsState> {\n *   constructor() {\n *     super();\n *   }\n * }\n *\n *\n */\nexport class EntityStore<S extends EntityState = any, EntityType = getEntityType<S>, IDType = getIDType<S>> extends Store<S> {\n  ui: EntityUIStore<any, EntityType>;\n  private entityActions = new Subject<EntityAction<IDType>>();\n\n  constructor(initialState: Partial<S> = {}, protected options: Partial<StoreConfigOptions> = {}) {\n    super({ ...getInitialEntitiesState(), ...initialState }, options);\n  }\n\n  // @internal\n  get selectEntityAction$(): Observable<EntityAction<IDType>> {\n    return this.entityActions.asObservable();\n  }\n\n  // @internal\n  get idKey() {\n    return (this.config as StoreConfigOptions).idKey || this.options.idKey || DEFAULT_ID_KEY;\n  }\n\n  /**\n   *\n   * Replace current collection with provided collection\n   *\n   * @example\n   *\n   * this.store.set([Entity, Entity])\n   * this.store.set({ids: [], entities: {}})\n   * this.store.set({ 1: {}, 2: {}})\n   *\n   */\n  set(entities: SetEntities<EntityType>, options: { activeId?: IDType | null } = {}) {\n    if (isNil(entities)) return;\n\n    isDev() && setAction('Set Entity');\n\n    const isNativePreAdd = this.akitaPreAddEntity === EntityStore.prototype.akitaPreAddEntity;\n\n    this._setState(state => {\n      const newState = setEntities({\n        state,\n        entities,\n        idKey: this.idKey,\n        preAddEntity: this.akitaPreAddEntity,\n        isNativePreAdd\n      });\n\n      if (isUndefined(options.activeId) === false) {\n        (newState as any).active = options.activeId;\n      }\n\n      return newState;\n    });\n\n    this.setHasCache(true, { restartTTL: true });\n\n    if (this.hasInitialUIState()) {\n      this.handleUICreation();\n    }\n\n    this.entityActions.next({ type: EntityActions.Set, ids: this.ids });\n  }\n\n  /**\n   * Add entities\n   *\n   * @example\n   *\n   * this.store.add([Entity, Entity])\n   * this.store.add(Entity)\n   * this.store.add(Entity, { prepend: true })\n   *\n   * this.store.add(Entity, { loading: false })\n   */\n  add(entities: OrArray<EntityType>, options: AddEntitiesOptions = { loading: false }) {\n    const collection = coerceArray(entities);\n\n    if (isEmpty(collection)) return;\n\n    const data = addEntities({\n      state: this._value(),\n      preAddEntity: this.akitaPreAddEntity,\n      entities: collection,\n      idKey: this.idKey,\n      options\n    });\n\n    if (data) {\n      isDev() && setAction('Add Entity');\n      data.newState.loading = options.loading;\n\n      this._setState(() => data.newState);\n\n      if (this.hasInitialUIState()) {\n        this.handleUICreation(true);\n      }\n\n      this.entityActions.next({ type: EntityActions.Add, ids: data.newIds });\n    }\n  }\n\n  /**\n   *\n   * Update entities\n   *\n   * @example\n   *\n   * store.update(1, entity => ...)\n   * store.update([1, 2, 3], entity => ...)\n   * store.update(null, entity => ...)\n   */\n  update(id: OrArray<IDType> | null, newStateFn: UpdateStateCallback<EntityType>);\n  /**\n   * store.update(1, { name: newName })\n   */\n  update(id: OrArray<IDType> | null, newState: Partial<EntityType>);\n  /**\n   * store.update(entity => entity.price > 3, entity => ({ name: newName }))\n   */\n  update(predicate: UpdateEntityPredicate<EntityType>, newStateFn: UpdateStateCallback<EntityType>);\n  /**\n   * store.update(entity => entity.price > 3, { name: newName })\n   */\n  update(predicate: UpdateEntityPredicate<EntityType>, newState: Partial<EntityType>);\n  /** Support non-entity updates */\n  update(newState: UpdateStateCallback<S>);\n  update(newState: Partial<S>);\n  update(\n    idsOrFnOrState: OrArray<IDType> | null | Partial<S> | UpdateStateCallback<S> | UpdateEntityPredicate<EntityType>,\n    newStateOrFn?: UpdateStateCallback<EntityType> | Partial<EntityType> | Partial<S>\n  ) {\n    if (isUndefined(newStateOrFn)) {\n      super.update(idsOrFnOrState as Partial<S>);\n      return;\n    }\n    let ids: IDType[] = [];\n\n    if (isFunction(idsOrFnOrState)) {\n      // We need to filter according the predicate function\n      ids = this.ids.filter(id => (idsOrFnOrState as UpdateEntityPredicate<EntityType>)(this.entities[id]));\n    } else {\n      // If it's nil we want all of them\n      ids = isNil(idsOrFnOrState) ? this.ids : coerceArray(idsOrFnOrState as OrArray<IDType>);\n    }\n\n    if (isEmpty(ids)) return;\n\n    isDev() && setAction('Update Entity', ids);\n    this._setState(state =>\n      updateEntities({\n        idKey: this.idKey,\n        ids,\n        preUpdateEntity: this.akitaPreUpdateEntity,\n        state,\n        newStateOrFn,\n        producerFn: this._producerFn\n      })\n    );\n\n    this.entityActions.next({ type: EntityActions.Update, ids });\n  }\n\n  /**\n   *\n   * Create or update\n   *\n   * @example\n   *\n   * store.upsert(1, { active: true })\n   * store.upsert([2, 3], { active: true })\n   * store.upsert([2, 3], entity => ({ isOpen: !entity.isOpen}))\n   *\n   */\n  @transaction()\n  upsert(ids: OrArray<IDType>, newState: Partial<EntityType> | EntityType | UpdateStateCallback<EntityType> | EntityType[], options: { baseClass?: Constructor } = {}) {\n    const toArray = coerceArray(ids);\n    const predicate = isUpdate => id => hasEntity(this.entities, id) === isUpdate;\n    const isClassBased = isFunction(options.baseClass);\n    const updateIds = toArray.filter(predicate(true));\n    const newEntities = toArray.filter(predicate(false)).map(id => {\n      let entity = isFunction(newState) ? newState({} as EntityType) : newState;\n      const withId = { ...(entity as EntityType), [this.idKey]: id };\n      if (isClassBased) {\n        return new options.baseClass(withId);\n      }\n      return withId;\n    });\n\n    // it can be any of the three types\n    this.update(updateIds as any, newState as any);\n    this.add(newEntities);\n    isDev() && logAction('Upsert Entity');\n  }\n\n  /**\n   *\n   * Upsert entity collection (idKey must be present)\n   *\n   * @example\n   *\n   * store.upsertMany([ { id: 1 }, { id: 2 }]);\n   *\n   * store.upsertMany([ { id: 1 }, { id: 2 }], { loading: true  });\n   * store.upsertMany([ { id: 1 }, { id: 2 }], { baseClass: Todo  });\n   *\n   */\n  upsertMany(entities: EntityType[], options: { baseClass?: Constructor; loading?: boolean } = {}) {\n    const addedIds = [];\n    const updatedIds = [];\n    const updatedEntities = {};\n\n    // Update the state directly to optimize performance\n    for (const entity of entities) {\n      const withPreCheckHook = this.akitaPreCheckEntity(entity);\n      const id = withPreCheckHook[this.idKey];\n      if (hasEntity(this.entities, id)) {\n        const prev = this._value().entities[id];\n        const merged = { ...this._value().entities[id], ...withPreCheckHook };\n        const next = options.baseClass ? new options.baseClass(merged) : merged;\n        const withHook = this.akitaPreUpdateEntity(prev, next);\n        const nextId = withHook[this.idKey];\n        updatedEntities[nextId] = withHook;\n        updatedIds.push(nextId);\n      } else {\n        const newEntity = options.baseClass ? new options.baseClass(withPreCheckHook) : withPreCheckHook;\n        const withHook = this.akitaPreAddEntity(newEntity);\n        const nextId = withHook[this.idKey];\n        addedIds.push(nextId);\n        updatedEntities[nextId] = withHook;\n      }\n    }\n\n    isDev() && logAction('Upsert Many');\n\n    this._setState(state => ({\n      ...state,\n      ids: addedIds.length ? [...state.ids, ...addedIds] : state.ids,\n      entities: {\n        ...state.entities,\n        ...updatedEntities\n      },\n      loading: !!options.loading\n    }));\n\n    updatedIds.length && this.entityActions.next({ type: EntityActions.Update, ids: updatedIds });\n    addedIds.length && this.entityActions.next({ type: EntityActions.Add, ids: addedIds });\n    if (addedIds.length && this.hasUIStore()) {\n      this.handleUICreation(true);\n    }\n  }\n\n  /**\n   *\n   * Replace one or more entities (except the id property)\n   *\n   *\n   * @example\n   *\n   * this.store.replace(5, newEntity)\n   * this.store.replace([1,2,3], newEntity)\n   */\n  replace(ids: IDS, newState: Partial<EntityType>) {\n    const toArray = coerceArray(ids);\n    if (isEmpty(toArray)) return;\n    let replaced = {};\n    for (const id of toArray) {\n      newState[this.idKey] = id;\n      replaced[id] = newState;\n    }\n    isDev() && setAction('Replace Entity', ids);\n    this._setState(state => ({\n      ...state,\n      entities: {\n        ...state.entities,\n        ...replaced\n      }\n    }));\n  }\n\n  /**\n   *\n   * Move entity inside the collection\n   *\n   *\n   * @example\n   *\n   * this.store.move(fromIndex, toIndex)\n   */\n  move(from: number, to: number) {\n    const ids = this.ids.slice();\n    ids.splice(to < 0 ? ids.length + to : to, 0, ids.splice(from, 1)[0]);\n\n    isDev() && setAction('Move Entity');\n    this._setState(state => ({\n      ...state,\n      // Change the entities reference so that selectAll emit\n      entities: {\n        ...state.entities\n      },\n      ids\n    }));\n  }\n\n  /**\n   *\n   * Remove one or more entities\n   *\n   * @example\n   *\n   * this.store.remove(5)\n   * this.store.remove([1,2,3])\n   * this.store.remove()\n   */\n  remove(id?: OrArray<IDType>);\n  /**\n   * this.store.remove(entity => entity.id === 1)\n   */\n  remove(predicate: (entity: Readonly<EntityType>) => boolean);\n  remove(idsOrFn?: OrArray<IDType> | ((entity: Readonly<EntityType>) => boolean)) {\n    if (isEmpty(this.ids)) return;\n\n    const idPassed = isDefined(idsOrFn);\n\n    // null means remove all\n    let ids: IDType[] | null = [];\n\n    if (isFunction(idsOrFn)) {\n      ids = this.ids.filter(entityId => idsOrFn(this.entities[entityId]));\n    } else {\n      ids = idPassed ? coerceArray(idsOrFn) : null;\n    }\n\n    if (isEmpty(ids)) return;\n\n    isDev() && setAction('Remove Entity', ids);\n    this._setState((state: StateWithActive<S>) => removeEntities({ state, ids }));\n    if (ids === null) {\n      this.setHasCache(false);\n    }\n\n    this.handleUIRemove(ids);\n    this.entityActions.next({ type: EntityActions.Remove, ids });\n  }\n\n  /**\n   *\n   * Update the active entity\n   *\n   * @example\n   *\n   * this.store.updateActive({ completed: true })\n   * this.store.updateActive(active => {\n   *   return {\n   *     config: {\n   *      ..active.config,\n   *      date\n   *     }\n   *   }\n   * })\n   */\n  updateActive(newStateOrCallback: UpdateStateCallback<EntityType> | Partial<EntityType>) {\n    const ids = coerceArray(this.active);\n    isDev() && setAction('Update Active', ids);\n    this.update(ids, newStateOrCallback as Partial<EntityType>);\n  }\n\n  /**\n   * Set the given entity as active\n   *\n   * @example\n   *\n   * store.setActive(1)\n   * store.setActive([1, 2, 3])\n   */\n  setActive(idOrOptions: S['active'] extends any[] ? S['active'] : (SetActiveOptions | S['active']));\n  setActive(idOrOptions: IDType | SetActiveOptions | null) {\n    const active = getActiveEntities(idOrOptions, this.ids, this.active);\n\n    if (active === undefined) {\n      return;\n    }\n\n    isDev() && setAction('Set Active', active);\n    this._setActive(active);\n  }\n\n  /**\n   * Add active entities\n   *\n   * @example\n   *\n   * store.addActive(2);\n   * store.addActive([3, 4, 5]);\n   */\n  addActive<T = OrArray<IDType>>(ids: T) {\n    const toArray = coerceArray(ids);\n    if (isEmpty(toArray)) return;\n    const everyExist = toArray.every(id => this.active.indexOf(id) > -1);\n    if (everyExist) return;\n\n    isDev() && setAction('Add Active', ids);\n    this._setState(state => {\n      /** Protect against case that one of the items in the array exist */\n      const uniques = Array.from(new Set([...(state.active as IDType[]), ...toArray]));\n      return {\n        ...state,\n        active: uniques\n      };\n    });\n  }\n\n  /**\n   * Remove active entities\n   *\n   * @example\n   *\n   * store.removeActive(2)\n   * store.removeActive([3, 4, 5])\n   */\n  removeActive<T = OrArray<IDType>>(ids: T) {\n    const toArray = coerceArray(ids);\n    if (isEmpty(toArray)) return;\n    const someExist = toArray.some(id => this.active.indexOf(id) > -1);\n    if (!someExist) return;\n\n    isDev() && setAction('Remove Active', ids);\n    this._setState(state => {\n      return {\n        ...state,\n        active: Array.isArray(state.active) ? state.active.filter(currentId => toArray.indexOf(currentId) === -1) : null\n      };\n    });\n  }\n\n  /**\n   * Toggle active entities\n   *\n   * @example\n   *\n   * store.toggle(2)\n   * store.toggle([3, 4, 5])\n   */\n  @transaction()\n  toggleActive<T = OrArray<IDType>>(ids: T) {\n    const toArray = coerceArray(ids);\n    const filterExists = remove => id => this.active.includes(id) === remove;\n    const remove = toArray.filter(filterExists(true));\n    const add = toArray.filter(filterExists(false));\n    this.removeActive(remove);\n    this.addActive(add);\n    isDev() && logAction('Toggle Active');\n  }\n\n  /**\n   *\n   * Create sub UI store for managing Entity's UI state\n   *\n   * @example\n   *\n   * export type ProductUI = {\n   *   isLoading: boolean;\n   *   isOpen: boolean\n   * }\n   *\n   * interface ProductsUIState extends EntityState<ProductUI> {}\n   *\n   * export class ProductsStore EntityStore<ProductsState, Product> {\n   *   ui: EntityUIStore<ProductsUIState, ProductUI>;\n   *\n   *   constructor() {\n   *     super();\n   *     this.createUIStore();\n   *   }\n   *\n   * }\n   */\n  createUIStore(initialState = {}, storeConfig: Partial<StoreConfigOptions> = {}) {\n    const defaults: Partial<StoreConfigOptions> = { name: `UI/${this.storeName}`, idKey: this.idKey };\n    this.ui = new EntityUIStore(initialState, { ...defaults, ...storeConfig });\n    return this.ui;\n  }\n\n  // @internal\n  destroy() {\n    super.destroy();\n    if (this.ui instanceof EntityStore) {\n      this.ui.destroy();\n    }\n    this.entityActions.complete();\n  }\n\n  // @internal\n  akitaPreUpdateEntity(_: Readonly<EntityType>, nextEntity: any): EntityType {\n    return nextEntity as EntityType;\n  }\n\n  // @internal\n  akitaPreAddEntity(newEntity: any): EntityType {\n    return newEntity as EntityType;\n  }\n\n  // @internal\n  akitaPreCheckEntity(newEntity: Readonly<EntityType>): EntityType {\n    return newEntity;\n  }\n\n  private get ids() {\n    return this._value().ids;\n  }\n\n  private get entities() {\n    return this._value().entities;\n  }\n\n  private get active() {\n    return this._value().active;\n  }\n\n  private _setActive(ids: OrArray<IDType>) {\n    this._setState(state => {\n      return {\n        ...state,\n        active: ids\n      };\n    });\n  }\n\n  private handleUICreation(add = false) {\n    const ids = this.ids;\n    const isFunc = isFunction(this.ui._akitaCreateEntityFn);\n    let uiEntities;\n    const createFn = id => {\n      const current = this.entities[id];\n      const ui = isFunc ? this.ui._akitaCreateEntityFn(current) : this.ui._akitaCreateEntityFn;\n      return {\n        [this.idKey]: current[this.idKey],\n        ...ui\n      };\n    };\n\n    if (add) {\n      uiEntities = this.ids.filter(id => isUndefined(this.ui.entities[id])).map(createFn);\n    } else {\n      uiEntities = ids.map(createFn);\n    }\n\n    add ? this.ui.add(uiEntities) : this.ui.set(uiEntities);\n  }\n\n  private hasInitialUIState() {\n    return this.hasUIStore() && isUndefined(this.ui._akitaCreateEntityFn) === false;\n  }\n\n  private handleUIRemove(ids: IDType[]) {\n    if (this.hasUIStore()) {\n      this.ui.remove(ids);\n    }\n  }\n\n  private hasUIStore() {\n    return this.ui instanceof EntityUIStore;\n  }\n}\n\n// @internal\nexport class EntityUIStore<UIState, DEPRECATED = any> extends EntityStore<UIState> {\n  _akitaCreateEntityFn: EntityUICreateFn;\n\n  constructor(initialState = {}, storeConfig: Partial<StoreConfigOptions> = {}) {\n    super(initialState, storeConfig);\n  }\n\n  /**\n   *\n   * Set the initial UI entity state. This function will determine the entity's\n   * initial state when we call `set()` or `add()`.\n   *\n   * @example\n   *\n   * constructor() {\n   *   super();\n   *   this.createUIStore().setInitialEntityState(entity => ({ isLoading: false, isOpen: true }));\n   *   this.createUIStore().setInitialEntityState({ isLoading: false, isOpen: true });\n   * }\n   *\n   */\n  setInitialEntityState<EntityUI = any, Entity = any>(createFn: EntityUICreateFn<EntityUI, Entity>) {\n    this._akitaCreateEntityFn = createFn;\n  }\n}\n","import { ID, IDS, ItemPredicate } from './types';\nimport { coerceArray } from './coerceArray';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { MonoTypeOperatorFunction, Observable } from 'rxjs';\nimport { isArray } from './isArray';\nimport { isFunction } from './isFunction';\nimport { isEmpty } from './isEmpty';\n\n// @internal\nexport function find<T>(collection: T[], idsOrPredicate: IDS | ItemPredicate, idKey: string) {\n  const result = [];\n  if (isFunction(idsOrPredicate)) {\n    for (const entity of collection) {\n      if (idsOrPredicate(entity) === true) {\n        result.push(entity);\n      }\n    }\n  } else {\n    const toSet = coerceArray(idsOrPredicate).reduce((acc, current) => acc.add(current), new Set());\n\n    for (const entity of collection) {\n      if (toSet.has(entity[idKey])) {\n        result.push(entity);\n      }\n    }\n  }\n\n  return result;\n}\n\n// @internal\nexport function distinctUntilArrayItemChanged<T>(): MonoTypeOperatorFunction<T[]> {\n  return distinctUntilChanged((prevCollection: T[], currentCollection: T[]) => {\n    if (prevCollection === currentCollection) {\n      return true;\n    }\n\n    if (isArray(prevCollection) === false || isArray(currentCollection) === false) {\n      return false;\n    }\n\n    if (isEmpty(prevCollection) && isEmpty(currentCollection)) {\n      return true;\n    }\n\n    // if item is new in the current collection but not exist in the prev collection\n    const hasNewItem = hasChange(currentCollection, prevCollection);\n\n    if (hasNewItem) {\n      return false;\n    }\n\n    const isOneOfItemReferenceChanged = hasChange(prevCollection, currentCollection);\n\n    // return false means there is a change and we want to call next()\n    return isOneOfItemReferenceChanged === false;\n  });\n}\n\n// @internal\nfunction hasChange<T>(first: T[], second: T[]) {\n  const hasChange = second.some(currentItem => {\n    const oldItem = first.find(prevItem => prevItem === currentItem);\n    return oldItem === undefined;\n  });\n\n  return hasChange;\n}\n\n/**\n * Find items in a collection\n *\n * @example\n *\n *  selectEntity(1, 'comments').pipe(\n *   arrayFind(comment => comment.text = 'text')\n * )\n */\nexport function arrayFind<T>(ids: ItemPredicate<T>, idKey?: never): (source: Observable<T[]>) => Observable<T[]>;\n/**\n * @example\n *\n * selectEntity(1, 'comments').pipe(\n *   arrayFind(3)\n * )\n */\nexport function arrayFind<T>(ids: ID, idKey?: string): (source: Observable<T[]>) => Observable<T>;\n/**\n * @example\n *\n * selectEntity(1, 'comments').pipe(\n *   arrayFind([1, 2, 3])\n * )\n */\nexport function arrayFind<T>(ids: ID[], idKey?: string): (source: Observable<T[]>) => Observable<T[]>;\nexport function arrayFind<T>(idsOrPredicate: ID[] | ID | ItemPredicate<T>, idKey?: string): (source: Observable<T[]>) => Observable<T[] | T> {\n  return function(source: Observable<T[]>) {\n    return source.pipe(\n      map((collection: T[] | undefined | null) => {\n        // which means the user deleted the root entity or set the collection to nil\n        if (isArray(collection) === false) {\n          return collection;\n        }\n        return find(collection, idsOrPredicate, idKey || DEFAULT_ID_KEY);\n      }),\n      distinctUntilArrayItemChanged(),\n      map(value => {\n        if (isArray(value) === false) {\n          return value;\n        }\n\n        if (isArray(idsOrPredicate) || isFunction(idsOrPredicate)) {\n          return value;\n        }\n\n        return value[0];\n      })\n    );\n  };\n}\n","export enum Order {\n  ASC = 'asc',\n  DESC = 'desc'\n}\n\n// @internal\nexport function compareValues(key, order: Order = Order.ASC) {\n  return function(a, b) {\n    if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n      return 0;\n    }\n\n    const varA = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key];\n    const varB = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key];\n\n    let comparison = 0;\n    if (varA > varB) {\n      comparison = 1;\n    } else if (varA < varB) {\n      comparison = -1;\n    }\n    return order == Order.DESC ? comparison * -1 : comparison;\n  };\n}\n","import { EntityState, SelectOptions } from './types';\nimport { isFunction } from './isFunction';\nimport { compareValues } from './sort';\nimport { coerceArray } from './coerceArray';\n\n// @internal\nexport function entitiesToArray<E, S extends EntityState>(state: S, options: SelectOptions<E>): E[] {\n  let arr = [];\n  const { ids, entities } = state;\n  const { filterBy, limitTo, sortBy, sortByOrder } = options;\n\n  for (let i = 0; i < ids.length; i++) {\n    const entity = entities[ids[i]];\n    if (!filterBy) {\n      arr.push(entity);\n      continue;\n    }\n\n    const toArray = coerceArray(filterBy);\n    const allPass = toArray.every(fn => fn(entity, i));\n    if (allPass) {\n      arr.push(entity);\n    }\n  }\n\n  if (sortBy) {\n    let _sortBy: any = isFunction(sortBy) ? sortBy : compareValues(sortBy, sortByOrder);\n    arr = arr.sort((a, b) => _sortBy(a, b, state));\n  }\n\n  const length = Math.min(limitTo || arr.length, arr.length);\n\n  return length === arr.length ? arr : arr.slice(0, length);\n}\n","import { EntityState } from './types';\nimport { isNil } from './isNil';\nimport { coerceArray } from './coerceArray';\n\n// @internal\nexport function entitiesToMap<S extends EntityState<E>, E>(state: S, options) {\n  const map = {};\n  const { filterBy, limitTo } = options;\n  const { ids, entities } = state;\n\n  if (!filterBy && !limitTo) {\n    return entities;\n  }\n  const hasLimit = isNil(limitTo) === false;\n\n  if (filterBy && hasLimit) {\n    let count = 0;\n    for (let i = 0, length = ids.length; i < length; i++) {\n      if (count === limitTo) break;\n      const id = ids[i];\n      const entity = entities[id];\n      const allPass = coerceArray(filterBy).every(fn => fn(entity, i));\n      if (allPass) {\n        map[id] = entity;\n        count++;\n      }\n    }\n  } else {\n    const finalLength = Math.min(limitTo || ids.length, ids.length);\n\n    for (let i = 0; i < finalLength; i++) {\n      const id = ids[i];\n      const entity = entities[id];\n\n      if (!filterBy) {\n        map[id] = entity;\n        continue;\n      }\n\n      const allPass = coerceArray(filterBy).every(fn => fn(entity, i));\n      if (allPass) {\n        map[id] = entity;\n      }\n    }\n  }\n\n  return map;\n}\n","// @internal\nexport function isString(value: any): value is string {\n  return typeof value === 'string';\n}\n","import { isUndefined } from './isUndefined';\nimport { isString } from './isString';\nimport { ItemPredicate } from './types';\n\n// @internal\nexport function findEntityByPredicate<E>(predicate: ItemPredicate<E>, entities) {\n    for(const entityId of Object.keys(entities)) {\n      if(predicate(entities[entityId]) === true) {\n        return entityId;\n      }\n    }\n\n    return undefined;\n}\n\n// @internal\nexport function getEntity( id, project ) {\n  return function(entities) {\n    const entity = entities[id];\n\n    if(isUndefined(entity)) {\n      return undefined;\n    }\n\n    if(!project) {\n      return entity;\n    }\n\n    if(isString(project)) {\n      return entity[project];\n    }\n\n    return (project as Function)(entity);\n  };\n\n}\n","// @internal\nexport function mapSkipUndefined<T, V>(arr: T[], callbackFn: (value: T, index: number, array: T[]) => V) {\n  return arr.reduce((result, value, index, array) => {\n    const val = callbackFn(value, index, array);\n    if (val !== undefined) {\n      result.push(val);\n    }\n    return result;\n  }, []);\n}\n","import { Order } from './sort';\n\nexport type SortBy<E, S = any> = ((a: E, b: E, state?: S) => number) | keyof E;\n\nexport interface SortByOptions<E> {\n  sortBy?: SortBy<E>;\n  sortByOrder?: Order;\n}\n\nexport interface QueryConfigOptions<E = any> extends SortByOptions<E> {}\n\nexport const queryConfigKey = 'akitaQueryConfig';\n\nexport function QueryConfig<E>(metadata: QueryConfigOptions<E>) {\n  return function(constructor: Function) {\n    constructor[queryConfigKey] = {};\n    for (let i = 0, keys = Object.keys(metadata); i < keys.length; i++) {\n      const key = keys[i];\n      constructor[queryConfigKey][key] = metadata[key];\n    }\n  };\n}\n","import { isFunction } from './isFunction';\n\nexport function compareKeys<T>(keysOrFuncs: any[]) {\n  return function <T>(prevState, currState) {\n    const isFns = isFunction(keysOrFuncs[0]);\n    // Return when they are NOT changed\n    return keysOrFuncs.some(keyOrFunc => {\n      if(isFns) {\n        return keyOrFunc(prevState) !== keyOrFunc(currState);\n      }\n      return prevState[keyOrFunc] !== currState[keyOrFunc];\n    }) === false;\n  };\n}\n","import { Store } from './store';\nimport { Observable } from 'rxjs';\nimport { queryConfigKey, QueryConfigOptions } from './queryConfig';\nimport { isString } from './isString';\nimport { isFunction } from './isFunction';\nimport { isDev } from './env';\nimport { __queries__ } from './stores';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { compareKeys } from './compareKeys';\nimport { ReturnTypes } from './types';\n\nexport class Query<S> {\n  // @internal\n  __store__: Store<S>;\n\n  constructor(protected store: Store<S>) {\n    this.__store__ = store;\n    if (isDev()) {\n      // @internal\n      __queries__[store.storeName] = this;\n    }\n  }\n\n  /**\n   * Select a slice from the store\n   *\n   * @example\n   *\n   * this.query.select()\n   * this.query.select(state => state.entities)\n   * this.query.select('token');\n   * this.query.select(['name', 'email'])\n   * this.query.select([state => state.name, state => state.age])\n   *\n   */\n  select<K extends keyof S>(key: K): Observable<S[K]>;\n  select<R>(project: (store: S) => R): Observable<R>;\n  select<K extends keyof S>(stateKeys: K[]): Observable<Pick<S, K>>;\n  select<R extends [(state: S) => any] | Array<(state: S) => any>>(selectorFns: R): Observable<ReturnTypes<R>>;\n  select(): Observable<S>;\n  select<R>(project?: ((store: S) => R) | keyof S | (keyof S)[] | ((state: S) => any)[]): Observable<R | S | any[]> {\n    let mapFn;\n    if (isFunction(project)) {\n      mapFn = project;\n    } else if (isString(project)) {\n      mapFn = state => state[project];\n    } else if (Array.isArray(project)) {\n      return this.store\n        ._select(state => state)\n        .pipe(\n          distinctUntilChanged(compareKeys(project)),\n          map(state => {\n            if (isFunction(project[0])) {\n              return (project as ((state: S) => any)[]).map(func => func(state));\n            }\n\n            return (project as (keyof S)[]).reduce((acc, k) => {\n              acc[k as any] = state[k];\n              return acc;\n            }, {});\n          })\n        ) as any;\n    } else {\n      mapFn = state => state;\n    }\n\n    return this.store._select(mapFn);\n  }\n\n  /**\n   * Select the loading state\n   *\n   * @example\n   *\n   * this.query.selectLoading().subscribe(isLoading => {})\n   */\n  selectLoading() {\n    return this.select(state => (state as S & { loading: boolean }).loading);\n  }\n\n  /**\n   * Select the error state\n   *\n   * @example\n   *\n   * this.query.selectError().subscribe(error => {})\n   */\n  selectError<ErrorType = any>(): Observable<ErrorType> {\n    return this.select(state => (state as S & { error: ErrorType }).error);\n  }\n\n  /**\n   * Get the store's value\n   *\n   * @example\n   *\n   * this.query.getValue()\n   *\n   */\n  getValue(): S {\n    return this.store._value();\n  }\n\n  /**\n   * Select the cache state\n   *\n   * @example\n   *\n   * this.query.selectHasCache().pipe(\n   *   switchMap(hasCache => {\n   *     return hasCache ? of() : http().pipe(res => store.set(res))\n   *   })\n   * )\n   */\n  selectHasCache(): Observable<boolean> {\n    return this.store._cache().asObservable();\n  }\n\n  /**\n   * Whether we've cached data\n   *\n   * @example\n   *\n   * this.query.getHasCache()\n   *\n   */\n  getHasCache(): boolean {\n    return this.store._cache().value;\n  }\n\n  // @internal\n  get config(): QueryConfigOptions {\n    return this.constructor[queryConfigKey];\n  }\n}\n","// @internal\nexport function sortByOptions(options, config) {\n  options.sortBy = options.sortBy || (config && config.sortBy);\n  options.sortByOrder = options.sortByOrder || (config && config.sortByOrder);\n}\n","import { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { distinctUntilArrayItemChanged } from './arrayFind';\nimport { entitiesToArray } from './entitiesToArray';\nimport { entitiesToMap } from './entitiesToMap';\nimport { EntityAction, EntityActions } from './entityActions';\nimport { EntityStore } from './entityStore';\nimport { findEntityByPredicate, getEntity } from './getEntity';\nimport { isArray } from './isArray';\nimport { isDefined } from './isDefined';\nimport { isFunction } from './isFunction';\nimport { isNil } from './isNil';\nimport { isUndefined } from './isUndefined';\nimport { mapSkipUndefined } from './mapSkipUndefined';\nimport { Query } from './query';\nimport { QueryConfigOptions } from './queryConfig';\nimport { SelectAllOptionsA, SelectAllOptionsB, SelectAllOptionsC, SelectAllOptionsD, SelectAllOptionsE } from './selectAllOverloads';\nimport { sortByOptions } from './sortByOptions';\nimport { toBoolean } from './toBoolean';\nimport { EntityState, getEntityType, getIDType, HashMap, ItemPredicate, OrArray, SelectOptions } from './types';\n\n/**\n *\n *  The Entity Query is similar to the general Query, with additional functionality tailored for EntityStores.\n *\n *  class WidgetsQuery extends QueryEntity<WidgetsState> {\n *     constructor(protected store: WidgetsStore) {\n *       super(store);\n *     }\n *  }\n *\n *\n *\n */\nexport class QueryEntity<S extends EntityState, EntityType = getEntityType<S>, IDType = getIDType<S>> extends Query<S> {\n  ui: EntityUIQuery<any, EntityType>;\n  protected store: EntityStore<S>;\n\n  // @internal\n  __store__;\n\n  constructor(store: EntityStore<S>, private options: QueryConfigOptions = {}) {\n    super(store);\n    this.__store__ = store;\n  }\n\n  /**\n   * Select the entire store's entity collection\n   *\n   * @example\n   *\n   * this.query.selectAll()\n   *\n   * this.query.selectAll({\n   *   limitTo: 5\n   *   filterBy: entity => entity.completed === true\n   * })\n   *\n   * this.query.selectAll({\n   *   asObject: true,\n   *   limitTo: 3\n   * })\n   *\n   *  this.query.selectAll({\n   *   sortBy: 'price',\n   *   sortByOrder: Order.DESC\n   * })\n   *\n   */\n  selectAll(options: SelectAllOptionsA<EntityType>): Observable<HashMap<EntityType>>;\n  selectAll(options: SelectAllOptionsB<EntityType>): Observable<EntityType[]>;\n  selectAll(options: SelectAllOptionsC<EntityType>): Observable<HashMap<EntityType>>;\n  selectAll(options: SelectAllOptionsD<EntityType>): Observable<EntityType[]>;\n  selectAll(options: SelectAllOptionsE<EntityType>): Observable<EntityType[]>;\n  selectAll(): Observable<EntityType[]>;\n  selectAll(\n    options: SelectOptions<EntityType> = {\n      asObject: false\n    }\n  ): Observable<EntityType[] | HashMap<EntityType>> {\n    return this.select(state => state.entities).pipe(map(() => this.getAll(options)));\n  }\n\n  /**\n   * Get the entire store's entity collection\n   *\n   * @example\n   *\n   * this.query.getAll()\n   *\n   * this.query.getAll({\n   *   limitTo: 5\n   *   filterBy: entity => entity.completed === true\n   * })\n   *\n   * this.query.getAll({\n   *   asObject: true,\n   *   limitTo: 3\n   * })\n   *\n   *  this.query.getAll({\n   *   sortBy: 'price',\n   *   sortByOrder: Order.DESC\n   * })\n   */\n  getAll(options: SelectAllOptionsA<EntityType>): HashMap<EntityType>;\n  getAll(options: SelectAllOptionsB<EntityType>): EntityType[];\n  getAll(options: SelectAllOptionsC<EntityType>): HashMap<EntityType>;\n  getAll(options: SelectAllOptionsD<EntityType>): EntityType[];\n  getAll(options: SelectAllOptionsE<EntityType>): EntityType[];\n  getAll(): EntityType[];\n  getAll(options: SelectOptions<EntityType> = { asObject: false, filterBy: undefined, limitTo: undefined }): EntityType[] | HashMap<EntityType> {\n    if (options.asObject) {\n      return entitiesToMap(this.getValue(), options);\n    }\n    sortByOptions(options, this.config || this.options);\n\n    return entitiesToArray(this.getValue(), options);\n  }\n\n  /**\n   * Select multiple entities from the store\n   *\n   * @example\n   *\n   * this.query.selectMany([1,2,3])\n   * this.query.selectMany([1,2], entity => entity.title)\n   */\n  selectMany<R>(ids: IDType[]): Observable<EntityType[]>;\n  selectMany<R>(ids: IDType[], project: (entity: EntityType) => R): Observable<R[]>;\n  selectMany<R>(ids: IDType[], project?: (entity: EntityType) => R): Observable<EntityType[] | R[]> {\n    if (!ids || !ids.length) return of([]);\n\n    return this.select(state => state.entities).pipe(\n      map(entities => mapSkipUndefined(ids, id => getEntity(id, project)(entities))),\n      distinctUntilArrayItemChanged()\n    );\n  }\n\n  /**\n   * Select an entity or a slice of an entity\n   *\n   * @example\n   *\n   * this.query.selectEntity(1)\n   * this.query.selectEntity(1, entity => entity.config.date)\n   * this.query.selectEntity(1, 'comments')\n   * this.query.selectEntity(e => e.title === 'title')\n   *\n   */\n  selectEntity<R>(id: IDType): Observable<EntityType>;\n  selectEntity<K extends keyof EntityType>(id: IDType, project?: K): Observable<EntityType[K]>;\n  selectEntity<R>(id: IDType, project: (entity: EntityType) => R): Observable<R>;\n  selectEntity<R>(predicate: ItemPredicate<EntityType>): Observable<EntityType>;\n  selectEntity<R>(idOrPredicate: IDType | ItemPredicate<EntityType>, project?: ((entity: EntityType) => R) | keyof EntityType): Observable<R | EntityType> {\n    let id = idOrPredicate;\n\n    if (isFunction(idOrPredicate)) {\n      // For performance reason we expect the entity to be in the store\n      (id as any) = findEntityByPredicate(idOrPredicate, this.getValue().entities);\n    }\n\n    return this.select(state => state.entities).pipe(\n      map(getEntity(id, project)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Get an entity by id\n   *\n   * @example\n   *\n   * this.query.getEntity(1);\n   */\n  getEntity(id: IDType): EntityType {\n    return this.getValue().entities[id as any];\n  }\n\n  /**\n   * Select the active entity's id\n   *\n   * @example\n   *\n   * this.query.selectActiveId()\n   */\n  selectActiveId(): Observable<S['active']> {\n    return this.select(state => (state as S & { active: S['active'] }).active);\n  }\n\n  /**\n   * Get the active id\n   *\n   * @example\n   *\n   * this.query.getActiveId()\n   */\n  getActiveId(): S['active'] {\n    return this.getValue().active;\n  }\n\n  /**\n   * Select the active entity\n   *\n   * @example\n   *\n   * this.query.selectActive()\n   * this.query.selectActive(entity => entity.title)\n   */\n  selectActive<R>(): S['active'] extends any[] ? Observable<EntityType[]> : Observable<EntityType>;\n  selectActive<R>(project?: (entity: EntityType) => R): S['active'] extends any[] ? Observable<R[]> : Observable<R>;\n  selectActive<R>(project?: (entity: EntityType) => R): Observable<R | EntityType> | Observable<EntityType[] | R[]> {\n    if (isArray(this.getActive())) {\n      return this.selectActiveId().pipe(switchMap(ids => this.selectMany(ids, project)));\n    }\n    return this.selectActiveId().pipe(switchMap(ids => this.selectEntity(ids, project)));\n  }\n\n  /**\n   * Get the active entity\n   *\n   * @example\n   *\n   * this.query.getActive()\n   */\n  getActive(): S['active'] extends any[] ? EntityType[] : EntityType;\n  getActive(): OrArray<EntityType> {\n    const activeId = this.getActiveId();\n    if (isArray(activeId)) {\n      return activeId.map(id => this.getValue().entities[id as any]);\n    }\n    return toBoolean(activeId) ? this.getEntity(activeId) : undefined;\n  }\n\n  /**\n   * Select the store's entity collection length\n   *\n   * @example\n   *\n   * this.query.selectCount()\n   * this.query.selectCount(entity => entity.completed)\n   */\n  selectCount(predicate?: (entity: EntityType, index: number) => boolean): Observable<number> {\n    return this.select(state => state.entities).pipe(map(() => this.getCount(predicate)));\n  }\n\n  /**\n   * Get the store's entity collection length\n   *\n   * @example\n   *\n   * this.query.getCount()\n   * this.query.getCount(entity => entity.completed)\n   */\n  getCount(predicate?: (entity: EntityType, index: number) => boolean): number {\n    if (isFunction(predicate)) {\n      return this.getAll().filter(predicate).length;\n    }\n    return this.getValue().ids.length;\n  }\n\n  /**\n   *\n   * Select the last entity from the store\n   *\n   * @example\n   *\n   * this.query.selectLast()\n   * this.query.selectLast(todo => todo.title)\n   */\n  selectLast<R>(): Observable<EntityType>;\n  selectLast<R>(project: (entity: EntityType) => R): Observable<R>;\n  selectLast<R>(project?: (entity: EntityType) => R): Observable<R | EntityType> {\n    return this.selectAt(ids => ids[ids.length - 1], project);\n  }\n\n  /**\n   *\n   * Select the first entity from the store\n   *\n   * @example\n   *\n   * this.query.selectFirst()\n   * this.query.selectFirst(todo => todo.title)\n   */\n  selectFirst<R>(): Observable<EntityType>;\n  selectFirst<R>(project: (entity: EntityType) => R): Observable<R>;\n  selectFirst<R>(project?: (entity: EntityType) => R): Observable<R | EntityType> {\n    return this.selectAt(ids => ids[0], project);\n  }\n\n  /**\n   *\n   * Listen for entity actions\n   *\n   *  @example\n   *\n   *  this.query.selectEntityAction(EntityActions.Add);\n   *  this.query.selectEntityAction(EntityActions.Update);\n   *  this.query.selectEntityAction(EntityActions.Remove);\n   *\n   *  this.query.selectEntityAction();\n   */\n  selectEntityAction(action: EntityActions): Observable<IDType[]>;\n  selectEntityAction(): Observable<EntityAction<IDType>>;\n  selectEntityAction(action?: EntityActions): Observable<IDType[] | EntityAction<IDType>> {\n    if (isUndefined(action)) {\n      return this.store.selectEntityAction$;\n    }\n    return this.store.selectEntityAction$.pipe(\n      filter(ac => ac.type === action),\n      map(action => action.ids)\n    );\n  }\n\n  /**\n   * Returns whether entity exists\n   *\n   * @example\n   *\n   * this.query.hasEntity(2)\n   * this.query.hasEntity(entity => entity.completed)\n   * this.query.hasEntity([1, 2, 33])\n   *\n   */\n  hasEntity(id: IDType): boolean;\n  hasEntity(id: IDType[]): boolean;\n  hasEntity(project: (entity: EntityType) => boolean): boolean;\n  hasEntity(): boolean;\n  hasEntity(projectOrIds?: IDType | IDType[] | ((entity: EntityType) => boolean)): boolean {\n    if (isNil(projectOrIds)) {\n      return this.getValue().ids.length > 0;\n    }\n\n    if (isFunction(projectOrIds)) {\n      return this.getAll().some(projectOrIds);\n    }\n\n    if (isArray(projectOrIds)) {\n      return projectOrIds.every(id => (id as any) in this.getValue().entities);\n    }\n\n    return (projectOrIds as any) in this.getValue().entities;\n  }\n\n  /**\n   * Returns whether entity store has an active entity\n   *\n   * @example\n   *\n   * this.query.hasActive()\n   * this.query.hasActive(3)\n   *\n   */\n  hasActive(id?: IDType): boolean {\n    const active = this.getValue().active;\n    const isIdProvided = isDefined(id);\n    if (Array.isArray(active)) {\n      if (isIdProvided) {\n        return active.includes(id);\n      }\n      return active.length > 0;\n    }\n    return isIdProvided ? active === id : isDefined(active);\n  }\n\n  /**\n   *\n   * Create sub UI query for querying Entity's UI state\n   *\n   * @example\n   *\n   *\n   * export class ProductsQuery extends QueryEntity<ProductsState> {\n   *   ui: EntityUIQuery<ProductsUIState>;\n   *\n   *   constructor(protected store: ProductsStore) {\n   *     super(store);\n   *     this.createUIQuery();\n   *   }\n   *\n   * }\n   */\n  createUIQuery() {\n    this.ui = new EntityUIQuery(this.__store__.ui);\n  }\n\n  private selectAt<R>(mapFn: (ids: IDType[]) => IDType, project?: (entity: EntityType) => R) {\n    return this.select(state => state.ids as any[]).pipe(\n      map(mapFn),\n      distinctUntilChanged(),\n      switchMap((id: IDType) => this.selectEntity(id, project))\n    );\n  }\n}\n\n// @internal\nexport class EntityUIQuery<UIState, DEPRECATED = any> extends QueryEntity<UIState> {\n  constructor(store) {\n    super(store);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Diff } from './types';\n\n/**\n * @example\n *\n * query.selectEntity(2).pipe(filterNil)\n */\nexport const filterNil = <T>(source: Observable<T | undefined | null>) => source.pipe(filter((value): value is Diff<T, null | undefined> => value !== null && typeof value !== 'undefined'));\n","/**\n * @internal\n *\n * @example\n *\n * getValue(state, 'todos.ui')\n *\n */\nexport function getValue( obj: any, prop: string ) {\n  /** return the whole state  */\n  if( prop.split('.').length === 1 ) {\n    return obj;\n  }\n  const removeStoreName = prop\n    .split('.')\n    .slice(1)\n    .join('.');\n  return removeStoreName.split('.').reduce(( acc: any, part: string ) => acc && acc[part], obj);\n}\n","import { isObject } from './isObject';\n\n/**\n * @internal\n *\n * @example\n * setValue(state, 'todos.ui', { filter: {} })\n */\nexport function setValue(obj: any, prop: string, val: any) {\n  const split = prop.split('.');\n\n  if (split.length === 1) {\n    return { ...obj, ...val };\n  }\n\n  obj = { ...obj };\n\n  const lastIndex = split.length - 2;\n  const removeStoreName = prop.split('.').slice(1);\n\n  removeStoreName.reduce((acc, part, index) => {\n    if (index === lastIndex) {\n      if (isObject(acc[part])) {\n        acc[part] = { ...acc[part], ...val };\n      } else {\n        acc[part] = val;\n      }\n    } else {\n      acc[part] = { ...acc[part] };\n    }\n\n    return acc && acc[part];\n  }, obj);\n\n  return obj;\n}\n","import { filter, skip } from 'rxjs/operators';\nimport { from, isObservable, of, OperatorFunction, ReplaySubject, Subscription } from 'rxjs';\nimport { HashMap, MaybeAsync } from './types';\nimport { isFunction } from './isFunction';\nimport { AkitaError } from './errors';\nimport { __stores__ } from './stores';\nimport { getValue } from './getValueByString';\nimport { setAction } from './actions';\nimport { setValue } from './setValueByString';\nimport { $$addStore, $$deleteStore } from './dispatchers';\nimport { isNil } from './isNil';\nimport { isObject } from './isObject';\nimport { isNotBrowser, hasLocalStorage, hasSessionStorage } from './root';\n\nlet skipStorageUpdate = false;\n\nconst _persistStateInit = new ReplaySubject(1);\n\nexport function selectPersistStateInit() {\n  return _persistStateInit.asObservable();\n}\n\nexport function setSkipStorageUpdate(skip: boolean) {\n  skipStorageUpdate = skip;\n}\n\nexport function getSkipStorageUpdate() {\n  return skipStorageUpdate;\n}\n\nexport interface PersistStateStorage {\n  getItem(key: string): MaybeAsync;\n\n  setItem(key: string, value: any): MaybeAsync;\n\n  clear(): void;\n}\n\nfunction isPromise(v: any) {\n  return v && isFunction(v.then);\n}\n\nfunction observify(asyncOrValue: any) {\n  if (isPromise(asyncOrValue) || isObservable(asyncOrValue)) {\n    return from(asyncOrValue);\n  }\n\n  return of(asyncOrValue);\n}\n\nexport interface PersistStateParams {\n  /** The storage key */\n  key: string;\n  /** Whether to enable persistState in a non-browser environment */\n  enableInNonBrowser: boolean;\n  /** Storage strategy to use. This defaults to LocalStorage but you can pass SessionStorage or anything that implements the StorageEngine API. */\n  storage: PersistStateStorage;\n  /** Custom deserializer. Defaults to JSON.parse */\n  deserialize: Function;\n  /** Custom serializer, defaults to JSON.stringify */\n  serialize: Function;\n  /**\n   * By default the whole state is saved to storage, use this param to include only the stores you need.\n   * Pay attention that you can't use both include and exclude\n   */\n  include: (string | ((storeName: string) => boolean))[];\n  /**\n   *  By default the whole state is saved to storage, use this param to exclude stores that you don't need.\n   *  Pay attention that you can't use both include and exclude\n   */\n  exclude: string[];\n\n  preStorageUpdate(storeName: string, state: any): any;\n\n  preStoreUpdate(storeName: string, state: any): any;\n\n  skipStorageUpdate: () => boolean;\n  preStorageUpdateOperator: () => OperatorFunction<any, any>;\n  /** Whether to persist a dynamic store upon destroy */\n  persistOnDestroy: boolean;\n}\n\nexport function persistState(params?: Partial<PersistStateParams>) {\n  const defaults: PersistStateParams = {\n    key: 'AkitaStores',\n    enableInNonBrowser: false,\n    storage: !hasLocalStorage() ? params.storage : localStorage,\n    deserialize: JSON.parse,\n    serialize: JSON.stringify,\n    include: [],\n    /**\n     * @deprecated use include with a callback\n     */\n    exclude: [],\n    persistOnDestroy: false,\n    preStorageUpdate: function(storeName, state) {\n      return state;\n    },\n    preStoreUpdate: function(storeName, state) {\n      return state;\n    },\n    skipStorageUpdate: getSkipStorageUpdate,\n    preStorageUpdateOperator: () => source => source\n  };\n\n  const { storage, enableInNonBrowser, deserialize, serialize, include, exclude, key, preStorageUpdate, persistOnDestroy, preStorageUpdateOperator, preStoreUpdate, skipStorageUpdate } = Object.assign(\n    {},\n    defaults,\n    params\n  );\n\n  if ((isNotBrowser && !enableInNonBrowser) || !storage) return;\n\n  const hasInclude = include.length > 0;\n  const hasExclude = exclude.length > 0;\n  let includeStores: { fns: Function[]; [key: string]: Function[] | string };\n\n  if (hasInclude && hasExclude) {\n    throw new AkitaError(\"You can't use both include and exclude\");\n  }\n\n  if (hasInclude) {\n    includeStores = include.reduce(\n      (acc, path) => {\n        if (isFunction(path)) {\n          acc.fns.push(path);\n        } else {\n          const storeName = path.split('.')[0];\n          acc[storeName] = path;\n        }\n        return acc;\n      },\n      { fns: [] }\n    );\n  }\n\n  let stores: HashMap<Subscription> = {};\n  let acc = {};\n  let subscriptions: Subscription[] = [];\n\n  const buffer = [];\n\n  function _save(v: any) {\n    observify(v).subscribe(() => {\n      const next = buffer.shift();\n      next && _save(next);\n    });\n  }\n\n  // when we use the local/session storage we perform the serialize, otherwise we let the passed storage implementation to do it\n  const isLocalStorage = (hasLocalStorage() && storage === localStorage) || (hasSessionStorage() && storage === sessionStorage);\n\n  observify(storage.getItem(key)).subscribe((value: any) => {\n    let storageState = isObject(value) ? value : deserialize(value || '{}');\n\n    function save(storeCache) {\n      storageState['$cache'] = { ...(storageState['$cache'] || {}), ...storeCache };\n      storageState = Object.assign({}, storageState, acc);\n\n      buffer.push(storage.setItem(key, isLocalStorage ? serialize(storageState) : storageState));\n      _save(buffer.shift());\n    }\n\n    function subscribe(storeName, path) {\n      stores[storeName] = __stores__[storeName]\n        ._select(state => getValue(state, path))\n        .pipe(\n          skip(1),\n          filter(() => skipStorageUpdate() === false),\n          preStorageUpdateOperator()\n        )\n        .subscribe(data => {\n          acc[storeName] = preStorageUpdate(storeName, data);\n          Promise.resolve().then(() => save({ [storeName]: __stores__[storeName]._cache().getValue() }));\n        });\n    }\n\n    function setInitial(storeName, store, path) {\n      if (storeName in storageState) {\n        setAction('@PersistState');\n        store._setState(state => {\n          return setValue(state, path, preStoreUpdate(storeName, storageState[storeName]));\n        });\n        const hasCache = storageState['$cache'] ? storageState['$cache'][storeName] : false;\n        __stores__[storeName].setHasCache(hasCache, { restartTTL: true });\n      }\n    }\n\n    subscriptions.push(\n      $$deleteStore.subscribe(storeName => {\n        if (stores[storeName]) {\n          if (persistOnDestroy === false) {\n            save({ [storeName]: false });\n          }\n          stores[storeName].unsubscribe();\n          delete stores[storeName];\n        }\n      })\n    );\n\n    subscriptions.push(\n      $$addStore.subscribe(storeName => {\n        if (storeName === 'router' || (hasExclude && exclude.includes(storeName))) {\n          return;\n        }\n\n        const store = __stores__[storeName];\n        if (hasInclude) {\n          let path = includeStores[storeName];\n\n          if (!path) {\n            const passPredicate = includeStores.fns.some(fn => fn(storeName));\n            if (passPredicate) {\n              path = storeName;\n            } else {\n              return;\n            }\n          }\n          setInitial(storeName, store, path);\n          subscribe(storeName, path);\n        } else {\n          setInitial(storeName, store, storeName);\n          subscribe(storeName, storeName);\n        }\n      })\n    );\n\n    _persistStateInit.next();\n  });\n\n  return {\n    destroy() {\n      subscriptions.forEach(s => s.unsubscribe());\n      for (let i = 0, keys = Object.keys(stores); i < keys.length; i++) {\n        const storeName = keys[i];\n        stores[storeName].unsubscribe();\n      }\n      stores = {};\n    },\n    clear() {\n      storage.clear();\n    },\n    clearStore(storeName?: string) {\n      if (isNil(storeName)) {\n        const value = observify(storage.setItem(key, '{}'));\n        value.subscribe();\n        return;\n      }\n      const value = storage.getItem(key);\n      observify(value).subscribe(v => {\n        const storageState = deserialize(v || '{}');\n\n        if (storageState[storeName]) {\n          delete storageState[storeName];\n          const value = observify(storage.setItem(key, serialize(storageState)));\n          value.subscribe();\n        }\n      });\n    }\n  };\n}\n","import { __stores__ } from './stores';\nimport { isString } from './isString';\nimport { setSkipStorageUpdate } from './persistState';\nimport { $$addStore } from './dispatchers';\nimport { filter, take } from 'rxjs/operators';\n\nexport class SnapshotManager {\n  /**\n   * Get a snapshot of the whole state or a specific stores\n   * Use it ONLY for things such as saving the state in the server\n   */\n  getStoresSnapshot(stores: string[] = []) {\n    let acc = {};\n    const hasInclude = stores.length > 0;\n    const keys = hasInclude ? stores : Object.keys(__stores__);\n    for (let i = 0; i < keys.length; i++) {\n      let storeName = keys[i];\n      if (storeName !== 'router') {\n        acc[storeName] = __stores__[storeName]._value();\n      }\n    }\n\n    return acc;\n  }\n\n  setStoresSnapshot(stores: { [storeName: string]: any } | string, options?: { skipStorageUpdate?: boolean; lazy?: boolean }) {\n    const mergedOptions = { ...{ skipStorageUpdate: false, lazy: false }, ...options };\n    mergedOptions.skipStorageUpdate && setSkipStorageUpdate(true);\n\n    let normalizedStores = stores;\n\n    if (isString(stores)) {\n      normalizedStores = JSON.parse(normalizedStores as string);\n    }\n\n    const size = Object.keys(normalizedStores).length;\n\n    if (mergedOptions.lazy) {\n      $$addStore\n        .pipe(\n          filter(name => normalizedStores.hasOwnProperty(name)),\n          take(size)\n        )\n        .subscribe(name => __stores__[name]._setState(() => normalizedStores[name]));\n    } else {\n      for (let i = 0, keys = Object.keys(normalizedStores); i < keys.length; i++) {\n        const storeName = keys[i];\n        if (__stores__[storeName]) {\n          __stores__[storeName]._setState(() => normalizedStores[storeName]);\n        }\n      }\n    }\n\n    mergedOptions.skipStorageUpdate && setSkipStorageUpdate(false);\n  }\n}\n\nexport const snapshotManager = new SnapshotManager();\n","import { QueryEntity } from '../queryEntity';\nimport { Query } from '../query';\nimport { filterNil } from '../filterNil';\nimport { toBoolean } from '../toBoolean';\nimport { getAkitaConfig } from '../config';\nimport { getValue } from '../getValueByString';\nimport { setValue } from '../setValueByString';\n\nexport type Queries<State> = Query<State> | QueryEntity<State>;\n\nexport abstract class AkitaPlugin<State = any> {\n  protected constructor(protected query: Queries<State>, config?: { resetFn?: Function }) {\n    if (config && config.resetFn) {\n      if (getAkitaConfig().resettable) {\n        this.onReset(config.resetFn);\n      }\n    }\n  }\n\n  /** This method is responsible for getting access to the query. */\n  protected getQuery() {\n    return this.query;\n  }\n\n  /** This method is responsible for getting access to the store. */\n  protected getStore() {\n    return this.getQuery().__store__;\n  }\n\n  /** This method is responsible for cleaning. */\n  public abstract destroy();\n\n  /** This method is responsible tells whether the plugin is entityBased or not.  */\n  protected isEntityBased(entityId: any) {\n    return toBoolean(entityId);\n  }\n\n  /** This method is responsible for selecting the source; it can be the whole store or one entity. */\n  protected selectSource(entityId: any, property?: string) {\n    if (this.isEntityBased(entityId)) {\n      return (this.getQuery() as QueryEntity<State>).selectEntity(entityId).pipe(filterNil);\n    }\n\n    if (property) {\n      return this.getQuery().select(state => getValue(state, this.withStoreName(property)));\n    }\n\n    return this.getQuery().select();\n  }\n\n  protected getSource(entityId: any, property?: string): any {\n    if (this.isEntityBased(entityId)) {\n      return (this.getQuery() as QueryEntity<State>).getEntity(entityId);\n    }\n\n    const state = this.getQuery().getValue();\n\n    if (property) {\n      return getValue(state, this.withStoreName(property));\n    }\n\n    return state;\n  }\n\n  protected withStoreName(prop: string) {\n    return `${this.storeName}.${prop}`;\n  }\n\n  protected get storeName() {\n    return this.getStore().storeName;\n  }\n\n  /** This method is responsible for updating the store or one entity; it can be the whole store or one entity. */\n  protected updateStore(newState, entityId?, property?: string) {\n    if (this.isEntityBased(entityId)) {\n      this.getStore().update(entityId, newState);\n    } else {\n      if (property) {\n        this.getStore()._setState(state => {\n          return setValue(state, this.withStoreName(property), newState);\n        });\n        return;\n      }\n      this.getStore()._setState(state => ({ ...state, ...newState }));\n    }\n  }\n\n  /**\n   * Function to invoke upon reset\n   */\n  private onReset(fn: Function) {\n    const original = this.getStore().reset;\n    this.getStore().reset = (...params) => {\n      /** It should run after the plugin destroy method */\n      setTimeout(() => {\n        original.apply(this.getStore(), params);\n        fn();\n      });\n    };\n  }\n}\n","import { QueryEntity } from '../../queryEntity';\nimport { delay, map, switchMap, take } from 'rxjs/operators';\nimport { BehaviorSubject, from, isObservable, Observable, Subscription } from 'rxjs';\nimport { EntityState, ID, getEntityType } from '../../types';\nimport { AkitaPlugin } from '../plugin';\nimport { applyTransaction } from '../../transaction';\nimport { isUndefined } from '../../isUndefined';\nimport { action, logAction } from '../../actions';\nimport { isNil } from '../../isNil';\n\nexport interface PaginationResponse<E> {\n  currentPage: number;\n  perPage: number;\n  lastPage: number;\n  data: E[];\n  total?: number;\n  from?: number;\n  to?: number;\n  pageControls?: number[];\n}\n\nexport type PaginatorConfig = {\n  pagesControls?: boolean;\n  range?: boolean;\n  startWith?: number;\n  cacheTimeout?: Observable<number>;\n  clearStoreWithCache?: boolean;\n};\n\nconst paginatorDefaults: PaginatorConfig = {\n  pagesControls: false,\n  range: false,\n  startWith: 1,\n  cacheTimeout: undefined,\n  clearStoreWithCache: true\n};\n\nexport class PaginatorPlugin<State extends EntityState> extends AkitaPlugin<State> {\n  /** Save current filters, sorting, etc. in cache */\n  metadata = new Map();\n\n  private page: BehaviorSubject<number>;\n  private pages = new Map<number, { ids: ID[] }>();\n  private readonly clearCacheSubscription: Subscription;\n\n  private pagination: PaginationResponse<getEntityType<State>> = {\n    currentPage: 1,\n    perPage: 0,\n    total: 0,\n    lastPage: 0,\n    data: []\n  };\n\n  /**\n   * When the user navigates to a different page and return\n   * we don't want to call `clearCache` on first time.\n   */\n  private initial = true;\n\n  constructor(protected query: QueryEntity<State>, public config: PaginatorConfig = {}) {\n    super(query, {\n      resetFn: () => {\n        this.initial = false;\n        this.destroy({ clearCache: true, currentPage: 1 });\n      }\n    });\n    this.config = Object.assign(paginatorDefaults, config);\n    const { startWith, cacheTimeout } = this.config;\n    this.page = new BehaviorSubject(startWith);\n    if (isObservable(cacheTimeout)) {\n      this.clearCacheSubscription = cacheTimeout.subscribe(() => this.clearCache());\n    }\n  }\n\n  /**\n   * Proxy to the query loading\n   */\n  isLoading$ = this.query.selectLoading().pipe(delay(0));\n\n  /**\n   * Listen to page changes\n   */\n  get pageChanges() {\n    return this.page.asObservable();\n  }\n\n  /**\n   * Get the current page number\n   */\n  get currentPage() {\n    return this.pagination.currentPage;\n  }\n\n  /**\n   * Check if current page is the first one\n   */\n  get isFirst() {\n    return this.currentPage === 1;\n  }\n\n  /**\n   * Check if current page is the last one\n   */\n  get isLast() {\n    return this.currentPage === this.pagination.lastPage;\n  }\n\n  /**\n   * Whether to generate an array of pages for *ngFor\n   * [1, 2, 3, 4]\n   */\n  withControls() {\n    this.config.pagesControls = true;\n    return this;\n  }\n\n  /**\n   * Whether to generate the `from` and `to` keys\n   * [1, 2, 3, 4]\n   */\n  withRange() {\n    this.config.range = true;\n    return this;\n  }\n\n  /**\n   * Set the loading state\n   */\n  setLoading(value = true) {\n    this.getStore().setLoading(value);\n  }\n\n  /**\n   * Update the pagination object and add the page\n   */\n  @action('@Pagination - New Page')\n  update(response: PaginationResponse<getEntityType<State>>) {\n    this.pagination = response;\n    this.addPage(response.data);\n  }\n\n  /**\n   *\n   * Set the ids and add the page to store\n   */\n  addPage(data: getEntityType<State>[]) {\n    this.pages.set(this.currentPage, { ids: data.map(entity => entity[this.getStore().idKey]) });\n    this.getStore().add(data);\n  }\n\n  /**\n   * Clear the cache.\n   */\n  clearCache(options: { clearStore?: boolean } = {}) {\n    if (!this.initial) {\n      logAction('@Pagination - Clear Cache');\n\n      if (options.clearStore !== false && (this.config.clearStoreWithCache || options.clearStore)) {\n        this.getStore().remove();\n      }\n\n      this.pages = new Map();\n      this.metadata = new Map();\n    }\n    this.initial = false;\n  }\n\n  clearPage(page: number) {\n    this.pages.delete(page);\n  }\n\n  /**\n   * Clear the cache timeout and optionally the pages\n   */\n  destroy({ clearCache, currentPage }: { clearCache?: boolean; currentPage?: number } = {}) {\n    if (this.clearCacheSubscription) {\n      this.clearCacheSubscription.unsubscribe();\n    }\n    if (clearCache) {\n      this.clearCache();\n    }\n    if (!isUndefined(currentPage)) {\n      this.setPage(currentPage);\n    }\n    this.initial = true;\n  }\n\n  /**\n   * Whether the provided page is active\n   */\n  isPageActive(page: number) {\n    return this.currentPage === page;\n  }\n\n  /**\n   * Set the current page\n   */\n  setPage(page: number) {\n    if (page !== this.currentPage || !this.hasPage(page)) {\n      this.page.next((this.pagination.currentPage = page));\n    }\n  }\n\n  /**\n   * Increment current page\n   */\n  nextPage() {\n    if (this.currentPage !== this.pagination.lastPage) {\n      this.setPage(this.pagination.currentPage + 1);\n    }\n  }\n\n  /**\n   * Decrement current page\n   */\n  prevPage() {\n    if (this.pagination.currentPage > 1) {\n      this.setPage(this.pagination.currentPage - 1);\n    }\n  }\n\n  /**\n   * Set current page to last\n   */\n  setLastPage() {\n    this.setPage(this.pagination.lastPage);\n  }\n\n  /**\n   * Set current page to first\n   */\n  setFirstPage() {\n    this.setPage(1);\n  }\n\n  /**\n   * Check if page exists in cache\n   */\n  hasPage(page: number) {\n    return this.pages.has(page);\n  }\n\n  /**\n   * Get the current page if it's in cache, otherwise invoke the request\n   */\n  getPage(req: () => Observable<PaginationResponse<getEntityType<State>>>) {\n    let page = this.pagination.currentPage;\n    if (this.hasPage(page)) {\n      return this.selectPage(page);\n    } else {\n      this.setLoading(true);\n      return from(req()).pipe(\n        switchMap((config: PaginationResponse<getEntityType<State>>) => {\n          page = config.currentPage;\n          applyTransaction(() => {\n            this.setLoading(false);\n            this.update(config);\n          });\n          return this.selectPage(page);\n        })\n      );\n    }\n  }\n\n  getQuery(): QueryEntity<State> {\n    return this.query;\n  }\n\n  refreshCurrentPage() {\n    if (isNil(this.currentPage) === false) {\n      this.clearPage(this.currentPage);\n      this.setPage(this.currentPage);\n    }\n  }\n\n  private getFrom() {\n    if (this.isFirst) {\n      return 1;\n    }\n    return (this.currentPage - 1) * this.pagination.perPage + 1;\n  }\n\n  private getTo() {\n    if (this.isLast) {\n      return this.pagination.total;\n    }\n    return this.currentPage * this.pagination.perPage;\n  }\n\n  /**\n   * Select the page\n   */\n  private selectPage(page: number): Observable<PaginationResponse<getEntityType<State>>> {\n    return this.query.selectAll({ asObject: true }).pipe(\n      take(1),\n      map(entities => {\n        let response: PaginationResponse<getEntityType<State>> = {\n          ...this.pagination,\n          data: this.pages.get(page).ids.map(id => entities[id])\n        };\n\n        const { range, pagesControls } = this.config;\n\n        /** If no total - calc it */\n        if (isNaN(this.pagination.total)) {\n          if (response.lastPage === 1) {\n            response.total = response.data ? response.data.length : 0;\n          } else {\n            response.total = response.perPage * response.lastPage;\n          }\n          this.pagination.total = response.total;\n        }\n\n        if (range) {\n          response.from = this.getFrom();\n          response.to = this.getTo();\n        }\n\n        if (pagesControls) {\n          response.pageControls = generatePages(this.pagination.total, this.pagination.perPage);\n        }\n\n        return response;\n      })\n    );\n  }\n}\n\n/**\n * Generate an array so we can ngFor them to navigate between pages\n */\nfunction generatePages(total: number, perPage: number) {\n  const len = Math.ceil(total / perPage);\n  let arr = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(i + 1);\n  }\n  return arr;\n}\n\n/** backward compatibility */\nexport const Paginator = PaginatorPlugin;\n","import { AkitaPlugin } from '../plugin';\nimport { Query } from '../../query';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { getValue } from '../../getValueByString';\nimport { toBoolean } from '../../toBoolean';\nimport { isString } from '../../isString';\nimport { setValue } from '../../setValueByString';\nimport { logAction } from '../../actions';\n\nexport type FormGroupLike = {\n  patchValue: Function;\n  setValue: Function;\n  value: any;\n  get: Function;\n  valueChanges: Observable<any>;\n  controls: any;\n};\n\nexport type AkitaFormProp<T> = {\n  [key: string]: T;\n};\n\nexport type PersistFormParams = {\n  debounceTime?: number;\n  formKey?: string;\n  emitEvent?: boolean;\n  arrControlFactory?: ArrayControlFactory;\n};\n\nexport type ArrayControlFactory = (value: any) => any; // Todo: Return  AbstractControl interface\n\nexport class PersistNgFormPlugin<T = any> extends AkitaPlugin {\n  formChanges: Subscription;\n  private isRootKeys: boolean;\n  private form: FormGroupLike;\n  private isKeyBased: boolean;\n  private initialValue;\n  private builder;\n\n  constructor(protected query: Query<any>, private factoryFnOrPath?: Function | string, private params: PersistFormParams = {}) {\n    super(query);\n    this.params = { ...{ debounceTime: 300, formKey: 'akitaForm', emitEvent: false, arrControlFactory: v => this.builder.control(v) }, ...params };\n    this.isRootKeys = toBoolean(factoryFnOrPath) === false;\n    this.isKeyBased = isString(factoryFnOrPath) || this.isRootKeys;\n  }\n\n  setForm(form: FormGroupLike, builder?) {\n    this.form = form;\n    this.builder = builder;\n    this.activate();\n    return this;\n  }\n\n  reset(initialState?: T) {\n    let value;\n    if (initialState) {\n      value = initialState;\n    } else {\n      value = this.isKeyBased ? this.initialValue : (this as any).factoryFnOrPath();\n    }\n\n    if (this.isKeyBased) {\n      Object.keys(this.initialValue).forEach(stateKey => {\n        const value = this.initialValue[stateKey];\n        if (Array.isArray(value) && this.builder) {\n          const formArray = this.form.controls[stateKey];\n          this.cleanArray(formArray);\n          value.forEach((v, i) => {\n            this.form.get(stateKey).insert(i, (this.params.arrControlFactory as Function)(v));\n          });\n        }\n      });\n    }\n    this.form.patchValue(value, { emitEvent: this.params.emitEvent });\n\n    const storeValue = this.isKeyBased ? setValue(this.getQuery().getValue(), `${this.getStore().storeName}.${this.factoryFnOrPath}`, value) : { [this.params.formKey]: value };\n    this.updateStore(storeValue);\n  }\n\n  private cleanArray(control) {\n    while (control.length !== 0) {\n      control.removeAt(0);\n    }\n  }\n\n  private resolveInitialValue(formValue, root) {\n    if (!formValue) return;\n    return Object.keys(formValue).reduce((acc, stateKey) => {\n      const value = root[stateKey];\n      if (Array.isArray(value) && this.builder) {\n        const factory = this.params.arrControlFactory;\n        this.cleanArray(this.form.get(stateKey));\n        value.forEach((v, i) => {\n          this.form.get(stateKey).insert(i, (factory as Function)(v));\n        });\n      }\n      acc[stateKey] = root[stateKey];\n      return acc;\n    }, {});\n  }\n\n  private activate() {\n    let path;\n\n    if (this.isKeyBased) {\n      if (this.isRootKeys) {\n        this.initialValue = this.resolveInitialValue(this.form.value, this.getQuery().getValue());\n        this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });\n      } else {\n        path = `${this.getStore().storeName}.${this.factoryFnOrPath}`;\n        const root = getValue(this.getQuery().getValue(), path);\n        this.initialValue = this.resolveInitialValue(root, root);\n        this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });\n      }\n    } else {\n      if (!(this.getQuery().getValue() as AkitaFormProp<T>)[this.params.formKey]) {\n        logAction('@PersistNgFormPlugin activate');\n        this.updateStore({ [this.params.formKey]: (this as any).factoryFnOrPath() });\n      }\n\n      const value = this.getQuery().getValue()[this.params.formKey];\n      this.form.patchValue(value);\n    }\n\n    this.formChanges = this.form.valueChanges.pipe(debounceTime(this.params.debounceTime)).subscribe(value => {\n      logAction('@PersistForm - Update');\n      let newState;\n      if (this.isKeyBased) {\n        if (this.isRootKeys) {\n          newState = state => ({ ...state, ...value });\n        } else {\n          newState = state => setValue(state, path, value);\n        }\n      } else {\n        newState = () => ({ [this.params.formKey]: value });\n      }\n      this.updateStore(newState(this.getQuery().getValue()));\n    });\n  }\n\n  destroy() {\n    this.formChanges && this.formChanges.unsubscribe();\n    this.form = null;\n    this.builder = null;\n  }\n}\n","// @internal\nexport function capitalize(value: string) {\n  return value && value.charAt(0).toUpperCase() + value.slice(1);\n}\n","import { currentAction, setSkipAction } from './actions';\nimport { isDefined } from './isDefined';\nimport { $$addStore, $$deleteStore, $$updateStore } from './dispatchers';\nimport { __stores__ } from './stores';\nimport { capitalize } from './captialize';\nimport { isNotBrowser } from './root';\n\nexport type DevtoolsOptions = {\n  /** instance name visible in devtools */\n  name: string;\n  /**  maximum allowed actions to be stored in the history tree */\n  maxAge: number;\n  latency: number;\n  actionsBlacklist: string[];\n  actionsWhitelist: string[];\n  storesWhitelist: string[];\n  shouldCatchErrors: boolean;\n  logTrace: boolean;\n  predicate: (state: any, action: any) => boolean;\n  shallow: boolean;\n  sortAlphabetically: boolean;\n};\nlet subs = [];\n\nexport type NgZoneLike = { run: any };\n\nexport function akitaDevtools(ngZone: NgZoneLike, options?: Partial<DevtoolsOptions>);\nexport function akitaDevtools(options?: Partial<DevtoolsOptions>);\nexport function akitaDevtools(ngZoneOrOptions?: NgZoneLike | Partial<DevtoolsOptions>, options: Partial<DevtoolsOptions> = {}) {\n  if (isNotBrowser) return;\n\n  if (!(window as any).__REDUX_DEVTOOLS_EXTENSION__) {\n    return;\n  }\n\n  subs.length &&\n    subs.forEach(s => {\n      if (s.unsubscribe) {\n        s.unsubscribe();\n      } else {\n        s && s();\n      }\n    });\n\n  const isAngular = ngZoneOrOptions && ngZoneOrOptions['run'];\n\n  if (!isAngular) {\n    ngZoneOrOptions = ngZoneOrOptions || {};\n    (ngZoneOrOptions as any).run = cb => cb();\n    options = ngZoneOrOptions as Partial<DevtoolsOptions>;\n  }\n\n  const defaultOptions: Partial<DevtoolsOptions> & { name: string } = { name: 'Akita', shallow: true, storesWhitelist: [] };\n  const merged = Object.assign({}, defaultOptions, options);\n  const storesWhitelist = merged.storesWhitelist;\n  const devTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__.connect(merged);\n  let appState = {};\n\n  const isAllowed = storeName => {\n    if (!storesWhitelist.length) {\n      return true;\n    }\n\n    return storesWhitelist.indexOf(storeName) > -1;\n  };\n\n  subs.push(\n    $$addStore.subscribe(storeName => {\n      if (isAllowed(storeName) === false) return;\n      appState = {\n        ...appState,\n        [storeName]: __stores__[storeName]._value()\n      };\n      devTools.send({ type: `[${capitalize(storeName)}] - @@INIT` }, appState);\n    })\n  );\n\n  subs.push(\n    $$deleteStore.subscribe(storeName => {\n      if (isAllowed(storeName) === false) return;\n      delete appState[storeName];\n      devTools.send({ type: `[${storeName}] - Delete Store` }, appState);\n    })\n  );\n\n  subs.push(\n    $$updateStore.subscribe(storeName => {\n      if (isAllowed(storeName) === false) return;\n      const { type, entityIds, skip } = currentAction;\n\n      if (skip) {\n        setSkipAction(false);\n        return;\n      }\n\n      const store = __stores__[storeName];\n      if (!store) {\n        return;\n      }\n\n      if (options.shallow === false && appState[storeName]) {\n        const isEqual = JSON.stringify(store._value()) === JSON.stringify(appState[storeName]);\n        if (isEqual) return;\n      }\n\n      appState = {\n        ...appState,\n        [storeName]: store._value()\n      };\n\n      const normalize = capitalize(storeName);\n      let msg = isDefined(entityIds) ? `[${normalize}] - ${type} (ids: ${entityIds})` : `[${normalize}] - ${type}`;\n\n      if (options.logTrace) {\n        console.group(msg);\n        console.trace();\n        console.groupEnd();\n      }\n\n      if (options.sortAlphabetically) {\n        const sortedAppState = Object.keys(appState)\n          .sort()\n          .reduce((acc, storeName) => {\n            acc[storeName] = appState[storeName];\n            return acc;\n          }, {});\n\n        devTools.send({ type: msg }, sortedAppState);\n        return;\n      }\n\n      devTools.send({ type: msg }, appState);\n    })\n  );\n\n  subs.push(\n    devTools.subscribe(message => {\n      if (message.type === 'DISPATCH') {\n        const payloadType = message.payload.type;\n\n        if (payloadType === 'COMMIT') {\n          devTools.init(appState);\n          return;\n        }\n\n        if (message.state) {\n          const rootState = JSON.parse(message.state);\n          for (let i = 0, keys = Object.keys(rootState); i < keys.length; i++) {\n            const storeName = keys[i];\n            if (__stores__[storeName]) {\n              (ngZoneOrOptions as NgZoneLike).run(() => {\n                __stores__[storeName]._setState(() => rootState[storeName], false);\n              });\n            }\n          }\n        }\n      }\n    })\n  );\n}\n","import { Observable } from 'rxjs';\nimport { EntityState, OrArray, getIDType } from '../types';\nimport { QueryEntity } from '../queryEntity';\nimport { isUndefined } from '../isUndefined';\nimport { coerceArray } from '../coerceArray';\nimport { toBoolean } from '../toBoolean';\nimport { isFunction } from '../isFunction';\n\nexport type RebaseAction<P = any> = (plugin: P) => any;\n\nexport type RebaseActions<P = any> = { beforeRemove?: RebaseAction; beforeAdd?: RebaseAction; afterAdd?: RebaseAction };\n\n/**\n * Each plugin that wants to add support for entities should extend this interface.\n */\nexport abstract class EntityCollectionPlugin<State extends EntityState, P> {\n  protected entities = new Map<getIDType<State>, P>();\n\n  protected constructor(protected query: QueryEntity<State>, private entityIds: OrArray<getIDType<State>>) {}\n\n  /**\n   * Get the entity plugin instance.\n   */\n  protected getEntity(id: getIDType<State>): P {\n    return this.entities.get(id);\n  }\n\n  /**\n   * Whether the entity plugin exist.\n   */\n  protected hasEntity(id: getIDType<State>): boolean {\n    return this.entities.has(id);\n  }\n\n  /**\n   * Remove the entity plugin instance.\n   */\n  protected removeEntity(id: getIDType<State>) {\n    this.destroy(id);\n    return this.entities.delete(id);\n  }\n\n  /**\n   * Set the entity plugin instance.\n   */\n  protected createEntity(id: getIDType<State>, plugin: P) {\n    return this.entities.set(id, plugin);\n  }\n\n  /**\n   * If the user passes `entityIds` we take them; otherwise, we take all.\n   */\n  protected getIds(): any {\n    return isUndefined(this.entityIds) ? this.query.getValue().ids : coerceArray(this.entityIds);\n  }\n\n  /**\n   * When you call one of the plugin methods, you can pass id/ids or undefined which means all.\n   */\n  protected resolvedIds(ids?): getIDType<State>[] {\n    return isUndefined(ids) ? this.getIds() : coerceArray(ids);\n  }\n\n  /**\n   * Call this method when you want to activate the plugin on init or when you need to listen to add/remove of entities dynamically.\n   *\n   * For example in your plugin you may do the following:\n   *\n   * this.query.select(state => state.ids).pipe(skip(1)).subscribe(ids => this.activate(ids));\n   */\n  protected rebase(ids: getIDType<State>[], actions: RebaseActions<P> = {}) {\n    /**\n     *\n     * If the user passes `entityIds` & we have new ids check if we need to add/remove instances.\n     *\n     * This phase will be called only upon update.\n     */\n    if (toBoolean(ids)) {\n      /**\n       * Which means all\n       */\n      if (isUndefined(this.entityIds)) {\n        for (let i = 0, len = ids.length; i < len; i++) {\n          const entityId = ids[i];\n          if (this.hasEntity(entityId) === false) {\n            isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);\n            const plugin = this.instantiatePlugin(entityId);\n            this.entities.set(entityId, plugin);\n            isFunction(actions.afterAdd) && actions.afterAdd(plugin);\n          }\n        }\n\n        this.entities.forEach((plugin, entityId) => {\n          if (ids.indexOf(entityId) === -1) {\n            isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);\n            this.removeEntity(entityId);\n          }\n        });\n      } else {\n        /**\n         * Which means the user passes specific ids\n         */\n        const _ids = coerceArray(this.entityIds);\n        for (let i = 0, len = _ids.length; i < len; i++) {\n          const entityId = _ids[i];\n          /** The Entity in current ids and doesn't exist, add it. */\n          if (ids.indexOf(entityId) > -1 && this.hasEntity(entityId) === false) {\n            isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);\n            const plugin = this.instantiatePlugin(entityId);\n            this.entities.set(entityId, plugin);\n            isFunction(actions.afterAdd) && actions.afterAdd(plugin);\n          } else {\n            this.entities.forEach((plugin, entityId) => {\n              /** The Entity not in current ids and exists, remove it. */\n              if (ids.indexOf(entityId) === -1 && this.hasEntity(entityId) === true) {\n                isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);\n                this.removeEntity(entityId);\n              }\n            });\n          }\n        }\n      }\n    } else {\n      /**\n       * Otherwise, start with the provided ids or all.\n       */\n      this.getIds().forEach(id => {\n        if (!this.hasEntity(id)) this.createEntity(id, this.instantiatePlugin(id));\n      });\n    }\n  }\n\n  /**\n   * Listen for add/remove entities.\n   */\n  protected selectIds(): Observable<any> {\n    return this.query.select(state => state.ids);\n  }\n\n  /**\n   * Base method for activation, you can override it if you need to.\n   */\n  protected activate(ids?: any[]) {\n    this.rebase(ids);\n  }\n\n  /**\n   * This method is responsible for plugin instantiation.\n   *\n   * For example:\n   * return new StateHistory(this.query, this.params, id) as P;\n   */\n  protected abstract instantiatePlugin(id: getIDType<State>): P;\n\n  /**\n   * This method is responsible for cleaning.\n   */\n  public abstract destroy(id?: getIDType<State>);\n\n  /**\n   * Loop over each id and invoke the plugin method.\n   */\n  protected forEachId(ids: OrArray<getIDType<State>>, cb: (entity: P) => any) {\n    const _ids = this.resolvedIds(ids);\n\n    for (let i = 0, len = _ids.length; i < len; i++) {\n      const id = _ids[i];\n      if (this.hasEntity(id)) {\n        cb(this.getEntity(id));\n      }\n    }\n  }\n}\n","import { pairwise, distinctUntilChanged } from 'rxjs/operators';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AkitaPlugin, Queries } from '../plugin';\nimport { logAction } from '../../actions';\nimport { isFunction } from '../../isFunction';\n\nexport interface StateHistoryParams {\n  maxAge?: number;\n  watchProperty?: string;\n  comparator?: (prevState, currentState) => boolean;\n}\n\nexport type History<State> = {\n  past: State[];\n  present: State | null;\n  future: State[];\n};\n\nexport class StateHistoryPlugin<State = any> extends AkitaPlugin<State> {\n  /** Allow skipping an update from outside */\n  private skip = false;\n\n  private history = {\n    past: [],\n    present: null,\n    future: []\n  };\n\n  /** Skip the update when redo/undo */\n  private skipUpdate = false;\n  private subscription;\n\n  /* Subjects for supporting observable hasPast$ and hasFuture$ */\n  private hasPastSubject: BehaviorSubject<boolean>;\n  private _hasPast$: Observable<boolean>;\n  private hasFutureSubject: BehaviorSubject<boolean>;\n  private _hasFuture$: Observable<boolean>;\n\n  constructor(protected query: Queries<State>, private params: StateHistoryParams = {}, private _entityId?: any) {\n    super(query, {\n      resetFn: () => this.clear()\n    });\n    params.maxAge = !!params.maxAge ? params.maxAge : 10;\n    params.comparator = params.comparator || (() => true);\n\n    this.activate();\n  }\n\n  /**\n   * Observable stream representing whether the history plugin has an available past\n   *\n   */\n  get hasPast$(): Observable<boolean> {\n    return this._hasPast$;\n  }\n\n  /**\n   * Observable stream representing whether the history plugin has an available future\n   *\n   */\n  get hasFuture$(): Observable<boolean> {\n    return this._hasFuture$;\n  }\n\n  get hasPast() {\n    return this.history.past.length > 0;\n  }\n\n  get hasFuture() {\n    return this.history.future.length > 0;\n  }\n\n  private get property() {\n    return this.params.watchProperty;\n  }\n\n  /* Updates the hasPast$ hasFuture$ observables*/\n  private updateHasHistory() {\n    this.hasFutureSubject.next(this.hasFuture);\n    this.hasPastSubject.next(this.hasPast);\n  }\n\n  activate() {\n    this.hasPastSubject = new BehaviorSubject(false);\n    this._hasPast$ = this.hasPastSubject.asObservable().pipe(distinctUntilChanged());\n    this.hasFutureSubject = new BehaviorSubject(false);\n    this._hasFuture$ = this.hasFutureSubject.asObservable().pipe(distinctUntilChanged());\n\n    this.history.present = this.getSource(this._entityId, this.property);\n    this.subscription = (this as any)\n      .selectSource(this._entityId, this.property)\n      .pipe(pairwise())\n      .subscribe(([past, present]) => {\n        if (this.skip) {\n          this.skip = false;\n          return;\n        }\n        /**\n         *  comparator: (prev, current) => isEqual(prev, current) === false\n         */\n        const shouldUpdate = this.params.comparator(past, present);\n\n        if (!this.skipUpdate && shouldUpdate) {\n          if (this.history.past.length === this.params.maxAge) {\n            this.history.past = this.history.past.slice(1);\n          }\n          this.history.past = [...this.history.past, past];\n          this.history.present = present;\n          this.updateHasHistory();\n        }\n      });\n  }\n\n  undo() {\n    if (this.history.past.length > 0) {\n      const { past, present } = this.history;\n      const previous = past[past.length - 1];\n      this.history.past = past.slice(0, past.length - 1);\n      this.history.present = previous;\n      this.history.future = [present, ...this.history.future];\n      this.update();\n    }\n  }\n\n  redo() {\n    if (this.history.future.length > 0) {\n      const { past, present } = this.history;\n      const next = this.history.future[0];\n      const newFuture = this.history.future.slice(1);\n      this.history.past = [...past, present];\n      this.history.present = next;\n      this.history.future = newFuture;\n      this.update('Redo');\n    }\n  }\n\n  jumpToPast(index: number) {\n    if (index < 0 || index >= this.history.past.length) return;\n\n    const { past, future, present } = this.history;\n    /**\n     *\n     * const past = [1, 2, 3, 4, 5];\n     * const present = 6;\n     * const future = [7, 8, 9];\n     * const index = 2;\n     *\n     * newPast = past.slice(0, index) = [1, 2];\n     * newPresent = past[index] = 3;\n     * newFuture = [...past.slice(index + 1),present, ...future] = [4, 5, 6, 7, 8, 9];\n     *\n     */\n    const newPast = past.slice(0, index);\n    const newFuture = [...past.slice(index + 1), present, ...future];\n    const newPresent = past[index];\n    this.history.past = newPast;\n    this.history.present = newPresent;\n    this.history.future = newFuture;\n    this.update();\n  }\n\n  jumpToFuture(index: number) {\n    if (index < 0 || index >= this.history.future.length) return;\n\n    const { past, future, present } = this.history;\n    /**\n     *\n     * const past = [1, 2, 3, 4, 5];\n     * const present = 6;\n     * const future = [7, 8, 9, 10]\n     * const index = 1\n     *\n     * newPast = [...past, present, ...future.slice(0, index) = [1, 2, 3, 4, 5, 6, 7];\n     * newPresent = future[index] = 8;\n     * newFuture = futrue.slice(index+1) = [9, 10];\n     *\n     */\n\n    const newPast = [...past, present, ...future.slice(0, index)];\n    const newPresent = future[index];\n    const newFuture = future.slice(index + 1);\n    this.history.past = newPast;\n    this.history.present = newPresent;\n    this.history.future = newFuture;\n    this.update('Redo');\n  }\n\n  /**\n   *\n   * jump n steps in the past or forward\n   *\n   */\n  jump(n: number) {\n    if (n > 0) return this.jumpToFuture(n - 1);\n    if (n < 0) return this.jumpToPast(this.history.past.length + n);\n  }\n\n  /**\n   * Clear the history\n   *\n   * @param customUpdateFn Callback function for only clearing part of the history\n   *\n   * @example\n   *\n   * stateHistory.clear((history) => {\n   *  return {\n   *    past: history.past,\n   *    present: history.present,\n   *    future: []\n   *  };\n   * });\n   */\n  clear(customUpdateFn?: (history: History<State>) => History<State>) {\n    this.history = isFunction(customUpdateFn)\n      ? customUpdateFn(this.history)\n      : {\n          past: [],\n          present: null,\n          future: []\n        };\n    this.updateHasHistory();\n  }\n\n  destroy(clearHistory = false) {\n    if (clearHistory) {\n      this.clear();\n    }\n    this.subscription.unsubscribe();\n  }\n\n  ignoreNext() {\n    this.skip = true;\n  }\n\n  private update(action = 'Undo') {\n    this.skipUpdate = true;\n    logAction(`@StateHistory - ${action}`);\n    this.updateStore(this.history.present, this._entityId, this.property);\n    this.updateHasHistory();\n    this.skipUpdate = false;\n  }\n}\n","import { EntityState, OrArray, getIDType } from '../../types';\nimport { QueryEntity } from '../../queryEntity';\nimport { StateHistoryParams, StateHistoryPlugin } from './stateHistoryPlugin';\nimport { toBoolean } from '../../toBoolean';\nimport { skip } from 'rxjs/operators';\nimport { EntityCollectionPlugin } from '../entityCollectionPlugin';\n\nexport interface StateHistoryEntityParams<IDType> extends StateHistoryParams {\n  entityIds?: OrArray<IDType>;\n}\n\nexport class EntityStateHistoryPlugin<State extends EntityState = any, P extends StateHistoryPlugin<State> = StateHistoryPlugin<State>> extends EntityCollectionPlugin<State, P> {\n  constructor(protected query: QueryEntity<State>, protected readonly params: StateHistoryEntityParams<getIDType<State>> = {}) {\n    super(query, params.entityIds);\n    params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;\n    this.activate();\n    this.selectIds()\n      .pipe(skip(1))\n      .subscribe(ids => this.activate(ids));\n  }\n\n  redo(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, e => e.redo());\n  }\n\n  undo(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, e => e.undo());\n  }\n\n  hasPast(id: getIDType<State>) {\n    if (this.hasEntity(id)) {\n      return this.getEntity(id).hasPast;\n    }\n  }\n\n  hasFuture(id: getIDType<State>) {\n    if (this.hasEntity(id)) {\n      return this.getEntity(id).hasFuture;\n    }\n  }\n\n  jumpToFuture(ids: OrArray<getIDType<State>>, index: number) {\n    this.forEachId(ids, e => e.jumpToFuture(index));\n  }\n\n  jumpToPast(ids: OrArray<getIDType<State>>, index: number) {\n    this.forEachId(ids, e => e.jumpToPast(index));\n  }\n\n  clear(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, e => e.clear());\n  }\n\n  destroy(ids?: OrArray<getIDType<State>>, clearHistory = false) {\n    this.forEachId(ids, e => e.destroy(clearHistory));\n  }\n\n  ignoreNext(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, e => e.ignoreNext());\n  }\n\n  protected instantiatePlugin(id: getIDType<State>) {\n    return new StateHistoryPlugin<State>(this.query, this.params, id) as P;\n  }\n}\n","import { AkitaPlugin, Queries } from '../plugin';\nimport { QueryEntity } from '../../queryEntity';\nimport { BehaviorSubject, combineLatest, Observable, Subject, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, skip } from 'rxjs/operators';\nimport { isUndefined } from '../../isUndefined';\nimport { Query } from '../../query';\nimport { coerceArray } from '../../coerceArray';\nimport { isFunction } from '../../isFunction';\nimport { logAction } from '../../actions';\n\ntype Head<State = any> = State | Partial<State>;\n\nexport type DirtyCheckComparator<State> = (head: State, current: State) => boolean;\n\nexport type DirtyCheckParams<StoreState = any> = {\n  comparator?: DirtyCheckComparator<StoreState>;\n  watchProperty?: keyof StoreState | (keyof StoreState)[];\n};\n\nexport const dirtyCheckDefaultParams = {\n  comparator: (head, current) => JSON.stringify(head) !== JSON.stringify(current)\n};\n\nexport function getNestedPath(nestedObj, path: string) {\n  const pathAsArray: string[] = path.split('.');\n  return pathAsArray.reduce((obj, key) => (obj && obj[key] !== 'undefined' ? obj[key] : undefined), nestedObj);\n}\n\nexport type DirtyCheckResetParams<StoreState = any> = {\n  updateFn?: StoreState | ((head: StoreState, current: StoreState) => any);\n};\n\nexport class DirtyCheckPlugin<State = any> extends AkitaPlugin<State> {\n  private head: Head<State>;\n  private dirty = new BehaviorSubject(false);\n  private subscription: Subscription;\n  private active = false;\n  private _reset = new Subject();\n\n  isDirty$: Observable<boolean> = this.dirty.asObservable().pipe(distinctUntilChanged());\n  reset$ = this._reset.asObservable();\n\n  constructor(protected query: Queries<State>, private params?: DirtyCheckParams<State>, private _entityId?: any) {\n    super(query);\n    this.params = { ...dirtyCheckDefaultParams, ...params };\n    if (this.params.watchProperty) {\n      let watchProp = coerceArray(this.params.watchProperty) as any[];\n      if (query instanceof QueryEntity && watchProp.includes('entities') && !watchProp.includes('ids')) {\n        watchProp.push('ids');\n      }\n      this.params.watchProperty = watchProp;\n    }\n  }\n\n  reset(params: DirtyCheckResetParams = {}) {\n    let currentValue = this.head;\n    if (isFunction(params.updateFn)) {\n      if (this.isEntityBased(this._entityId)) {\n        currentValue = params.updateFn(this.head, (this.getQuery() as QueryEntity<State>).getEntity(this._entityId));\n      } else {\n        currentValue = params.updateFn(this.head, (this.getQuery() as Query<State>).getValue());\n      }\n    }\n    logAction(`@DirtyCheck - Revert`);\n    this.updateStore(currentValue, this._entityId);\n    this._reset.next();\n  }\n\n  setHead() {\n    if (!this.active) {\n      this.activate();\n      this.active = true;\n    } else {\n      this.head = this._getHead();\n    }\n    this.updateDirtiness(false);\n    return this;\n  }\n\n  isDirty(): boolean {\n    return !!this.dirty.value;\n  }\n\n  hasHead() {\n    return !!this.getHead();\n  }\n\n  destroy() {\n    this.head = null;\n    this.subscription && this.subscription.unsubscribe();\n    this._reset && this._reset.complete();\n  }\n\n  isPathDirty(path: string) {\n    const head = this.getHead();\n    const current = (this.getQuery() as Query<State>).getValue();\n    const currentPathValue = getNestedPath(current, path);\n    const headPathValue = getNestedPath(head, path);\n\n    return this.params.comparator(currentPathValue, headPathValue);\n  }\n\n  protected getHead() {\n    return this.head;\n  }\n\n  private activate() {\n    this.head = this._getHead();\n    /** if we are tracking specific properties select only the relevant ones */\n    const source = this.params.watchProperty\n      ? (this.params.watchProperty as (keyof State)[]).map(prop =>\n          this.query\n            .select(state => state[prop])\n            .pipe(\n              map(val => ({\n                val,\n                __akitaKey: prop\n              }))\n            )\n        )\n      : [this.selectSource(this._entityId)];\n    this.subscription = combineLatest(...source)\n      .pipe(skip(1))\n      .subscribe((currentState: any[]) => {\n        if (isUndefined(this.head)) return;\n        /** __akitaKey is used to determine if we are tracking a specific property or a store change */\n        const isChange = currentState.some(state => {\n          const head = state.__akitaKey ? this.head[state.__akitaKey as any] : this.head;\n          const compareTo = state.__akitaKey ? state.val : state;\n\n          return this.params.comparator(head, compareTo);\n        });\n\n        this.updateDirtiness(isChange);\n      });\n  }\n\n  private updateDirtiness(isDirty: boolean) {\n    this.dirty.next(isDirty);\n  }\n\n  private _getHead(): Head<State> {\n    let head: Head<State> = this.getSource(this._entityId);\n    if (this.params.watchProperty) {\n      head = this.getWatchedValues(head as State);\n    }\n    return head;\n  }\n\n  private getWatchedValues(source: State): Partial<State> {\n    return (this.params.watchProperty as (keyof State)[]).reduce(\n      (watched, prop) => {\n        watched[prop] = source[prop];\n        return watched;\n      },\n      {} as Partial<State>\n    );\n  }\n}\n","import { DirtyCheckComparator, dirtyCheckDefaultParams, DirtyCheckPlugin, DirtyCheckResetParams, getNestedPath } from './dirtyCheckPlugin';\nimport { EntityCollectionPlugin } from '../entityCollectionPlugin';\nimport { auditTime, map, skip } from 'rxjs/operators';\nimport { merge, Observable, Subject } from 'rxjs';\nimport { EntityState, OrArray, getIDType, getEntityType } from '../../types';\nimport { QueryEntity } from '../../queryEntity';\nimport { coerceArray } from '../../coerceArray';\n\nexport type DirtyCheckCollectionParams<State extends EntityState> = {\n  comparator?: DirtyCheckComparator<getEntityType<State>>;\n  entityIds?: OrArray<getIDType<State>>;\n};\n\nexport class EntityDirtyCheckPlugin<State extends EntityState = any, P extends DirtyCheckPlugin<State> = DirtyCheckPlugin<State>> extends EntityCollectionPlugin<State, P> {\n  private _someDirty = new Subject();\n  someDirty$: Observable<boolean> = merge(this.query.select(state => state.entities), this._someDirty.asObservable()).pipe(\n    auditTime(0),\n    map(() => this.checkSomeDirty())\n  );\n\n  constructor(protected query: QueryEntity<State>, private readonly params: DirtyCheckCollectionParams<State> = {}) {\n    super(query, params.entityIds);\n    this.params = { ...dirtyCheckDefaultParams, ...params };\n    // TODO lazy activate?\n    this.activate();\n    this.selectIds()\n      .pipe(skip(1))\n      .subscribe(ids => {\n        super.rebase(ids, { afterAdd: plugin => plugin.setHead() });\n      });\n  }\n\n  setHead(ids?: OrArray<getIDType<State>>) {\n    if (this.params.entityIds && ids) {\n      const toArray = coerceArray(ids) as getIDType<State>[];\n      const someAreWatched = coerceArray(this.params.entityIds).some(id => toArray.indexOf(id) > -1);\n      if (someAreWatched === false) {\n        return this;\n      }\n    }\n    this.forEachId(ids, e => e.setHead());\n    this._someDirty.next();\n    return this;\n  }\n\n  hasHead(id: getIDType<State>): boolean {\n    if (this.entities.has(id)) {\n      const entity = this.getEntity(id);\n      return entity.hasHead();\n    }\n\n    return false;\n  }\n\n  reset(ids?: OrArray<getIDType<State>>, params: DirtyCheckResetParams = {}) {\n    this.forEachId(ids, e => e.reset(params));\n  }\n\n  isDirty(id: getIDType<State>): Observable<boolean>;\n  isDirty(id: getIDType<State>, asObservable: true): Observable<boolean>;\n  isDirty(id: getIDType<State>, asObservable: false): boolean;\n  isDirty(id: getIDType<State>, asObservable = true): Observable<boolean> | boolean {\n    if (this.entities.has(id)) {\n      const entity = this.getEntity(id);\n      return asObservable ? entity.isDirty$ : entity.isDirty();\n    }\n\n    return false;\n  }\n\n  someDirty(): boolean {\n    return this.checkSomeDirty();\n  }\n\n  isPathDirty(id: getIDType<State>, path: string) {\n    if (this.entities.has(id)) {\n      const head = (this.getEntity(id) as any).getHead();\n      const current = this.query.getEntity(id);\n      const currentPathValue = getNestedPath(current, path);\n      const headPathValue = getNestedPath(head, path);\n\n      return this.params.comparator(currentPathValue, headPathValue);\n    }\n\n    return null;\n  }\n\n  destroy(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, e => e.destroy());\n    /** complete only when the plugin destroys */\n    if (!ids) {\n      this._someDirty.complete();\n    }\n  }\n\n  protected instantiatePlugin(id: getIDType<State>): P {\n    return new DirtyCheckPlugin(this.query, this.params, id) as P;\n  }\n\n  private checkSomeDirty(): boolean {\n    const entitiesIds = this.resolvedIds();\n    for (const id of entitiesIds) {\n      if (this.getEntity(id).isDirty()) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","/**\n * Generate random guid\n *\n * @example\n *\n * {\n *   id: guid()\n * }\n *\n */\nexport function guid() {\n  return 'xxxxxx4xyx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n","import { DEFAULT_ID_KEY } from './defaultIDKey';\n\n// @internal\nexport function toEntitiesIds<E>(entities: E[], idKey = DEFAULT_ID_KEY) {\n  const ids = [];\n  for (const entity of entities) {\n    ids.push(entity[idKey]);\n  }\n  return ids;\n}\n","import { __stores__ } from './stores';\nimport { applyTransaction } from './transaction';\n\nexport interface ResetStoresParams {\n  exclude: string[];\n}\n\n/**\n * Reset stores back to their initial state\n *\n * @example\n *\n * resetStores()\n * resetStores({\n *   exclude: ['auth']\n * })\n */\nexport function resetStores(options?: Partial<ResetStoresParams>) {\n  const defaults: ResetStoresParams = {\n    exclude: []\n  };\n\n  options = Object.assign({}, defaults, options);\n  const stores = Object.keys(__stores__);\n\n  applyTransaction(() => {\n    for (const store of stores) {\n      const s = __stores__[store];\n      if (!options.exclude) {\n        s.reset();\n      } else {\n        if (options.exclude.indexOf(s.storeName) === -1) {\n          s.reset();\n        }\n      }\n    }\n  });\n}\n","import { isArray } from './isArray';\n\n// @internal\nexport function isNumber(value: any): value is number {\n  return !isArray(value) && value - parseFloat(value) + 1 >= 0;\n}\n","import { __stores__ } from './stores';\nimport { IDS } from './types';\nimport { AddEntitiesOptions } from './addEntities';\nimport { EntityStore } from './entityStore';\nimport { SetEntities } from './setEntities';\nimport { isNil } from './isNil';\nimport { AkitaError } from './errors';\n\nexport enum StoreActions {\n  Update,\n  AddEntities,\n  SetEntities,\n  UpdateEntities,\n  RemoveEntities,\n  UpsertEntities\n}\n\ninterface RunStoreActionSetEntities<Entity = any> {\n  payload: {\n    data: SetEntities<Entity>;\n  };\n}\n\ninterface RunStoreActionAddEntities<Entity = any> {\n  payload: {\n    data: Entity[] | Entity;\n    params?: AddEntitiesOptions;\n  };\n}\n\ninterface RunStoreActionUpdateEntities<Entity = any> {\n  payload: {\n    data: Partial<Entity>;\n    entityIds: IDS;\n  };\n}\n\ninterface RunStoreActionRemoveEntities<Entity = any> {\n  payload: {\n    entityIds: IDS;\n  };\n}\n\ninterface RunStoreActionUpsertEntities<Entity = any> {\n  payload: {\n    data: Partial<Entity>[] | Partial<Entity>;\n    entityIds?: IDS;\n  };\n}\n\ninterface RunStoreActionUpdate<State = any> {\n  payload: {\n    data: Partial<State>;\n  };\n}\n\n/**\n * @example\n *\n * runStoreAction('books', StoreActions.Update, {\n *   payload: {\n *    data: { filter: 'New filter' }\n *   }\n * });\n */\nexport function runStoreAction<State = any>(storeName: string, action: StoreActions.Update, params: RunStoreActionUpdate<State>);\n/**\n * @example\n *\n * runStoreAction('books', StoreActions.RemoveEntities, {\n *   payload: {\n *    entityIds: 2\n *   }\n * });\n */\nexport function runStoreAction<Entity = any>(storeName: string, action: StoreActions.RemoveEntities, params: RunStoreActionRemoveEntities<Entity>);\n/**\n * @example\n *\n * runStoreAction('books', StoreActions.UpdateEntities, {\n *   payload: {\n *    data: { title: 'New title' },\n *    entityIds: 2\n *   }\n * });\n */\nexport function runStoreAction<Entity = any>(storeName: string, action: StoreActions.UpdateEntities, params: RunStoreActionUpdateEntities<Entity>);\n/**\n * @example\n *\n * runStoreAction('books', StoreActions.SetEntities, {\n *   payload: {\n *    data: [{ id: 1 }, { id: 2 }]\n *   }\n * });\n */\nexport function runStoreAction<Entity = any>(storeName: string, action: StoreActions.SetEntities, params: RunStoreActionSetEntities<Entity>);\n/**\n * @example\n *\n * runStoreAction('books', StoreActions.AddEntities, {\n *   payload: {\n *    data: { id: 1 }\n *   }\n * });\n */\nexport function runStoreAction<Entity = any>(storeName: string, action: StoreActions.AddEntities, params: RunStoreActionAddEntities<Entity>);\n/**\n * @example\n *\n * runStoreAction('books', StoreActions.UpsertEntities, {\n *   payload: {\n *    data: { title: 'New Title' },\n *    entityIds: [1, 2]\n *   }\n * });\n * runStoreAction('books', StoreActions.UpsertEntities, {\n *   payload: {\n *    data: [{ id: 2, title: 'New Title' }, { id: 3, title: 'Another title'}],\n *   }\n * });\n */\nexport function runStoreAction<Entity = any>(storeName: string, action: StoreActions.UpsertEntities, params: RunStoreActionUpsertEntities<Entity>);\nexport function runStoreAction<EntityOrState = any>(\n  storeName: string,\n  action: StoreActions,\n  params:\n    | RunStoreActionSetEntities<EntityOrState>\n    | RunStoreActionAddEntities<EntityOrState>\n    | RunStoreActionRemoveEntities<EntityOrState>\n    | RunStoreActionUpdateEntities<EntityOrState>\n    | RunStoreActionUpsertEntities<EntityOrState>\n) {\n  const store = __stores__[storeName];\n\n  if (isNil(store)) {\n    throw new AkitaError(`${storeName} doesn't exist`);\n  }\n\n  switch (action) {\n    case StoreActions.SetEntities: {\n      const { payload } = params as RunStoreActionSetEntities;\n      (store as EntityStore).set(payload.data);\n      return;\n    }\n    case StoreActions.AddEntities: {\n      const { payload } = params as RunStoreActionAddEntities;\n      (store as EntityStore).add(payload.data, payload.params);\n      return;\n    }\n\n    case StoreActions.UpdateEntities: {\n      const { payload } = params as RunStoreActionUpdateEntities;\n      (store as EntityStore).update(payload.entityIds, payload.data);\n      return;\n    }\n\n    case StoreActions.RemoveEntities: {\n      const { payload } = params as RunStoreActionRemoveEntities;\n      (store as EntityStore).remove(payload.entityIds);\n      return;\n    }\n\n    case StoreActions.UpsertEntities: {\n      const { payload } = params as RunStoreActionUpsertEntities;\n      if (payload.entityIds) {\n        (store as EntityStore).upsert(payload.entityIds, payload.data);\n      } else if (Array.isArray(payload.data)) {\n        (store as EntityStore).upsertMany(payload.data);\n      } else {\n        (store as EntityStore).upsertMany([payload.data]);\n      }\n      return;\n    }\n\n    case StoreActions.Update: {\n      const { payload } = params as RunStoreActionUpdate;\n      (store as EntityStore).update(payload.data);\n      return;\n    }\n  }\n}\n","import { ArrayProperties, IDS, ItemPredicate } from './types';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { coerceArray } from './coerceArray';\nimport { isFunction } from './isFunction';\nimport { isObject } from './isObject';\nimport { isArray } from './isArray';\n\n/**\n * Update item in a collection\n *\n * @example\n *\n *\n * store.update(1, entity => ({\n *   comments: arrayUpdate(entity.comments, 1, { name: 'newComment' })\n * }))\n */\nexport function arrayUpdate<Root extends any[], Entity = any>(keyOrRoot: Root, predicateOrIds: IDS | ItemPredicate<Root[0]>, obj: Partial<Root[0]>, idKey?: string): Root[0][];\n/**\n * @deprecated\n */\nexport function arrayUpdate<Root, Entity = any>(keyOrRoot: ArrayProperties<Root>, predicateOrIds: IDS | ItemPredicate<Entity>, obj: Partial<Entity>, idKey?: string): (state: Root) => Root;\nexport function arrayUpdate<Root, Entity = any>(keyOrRoot: ArrayProperties<Root> | Root, predicateOrIds: IDS | ItemPredicate<Entity>, obj: Partial<Entity>, idKey = DEFAULT_ID_KEY) {\n  let condition: ItemPredicate<Entity>;\n\n  if (isFunction(predicateOrIds)) {\n    condition = predicateOrIds;\n  } else {\n    const ids = coerceArray(predicateOrIds);\n    condition = item => ids.includes(isObject(item) ? item[idKey] : item) === true;\n  }\n\n  const updateFn = state =>\n    state.map(entity => {\n      if (condition(entity) === true) {\n        return isObject(entity)\n          ? {\n              ...entity,\n              ...obj\n            }\n          : obj;\n      }\n\n      return entity;\n    });\n\n  if (isArray(keyOrRoot)) {\n    return updateFn(keyOrRoot);\n  }\n\n  return root => {\n    return {\n      [keyOrRoot as string]: updateFn(root[keyOrRoot])\n    };\n  };\n}\n","import { ArrayProperties, OrArray } from './types';\nimport { coerceArray } from './coerceArray';\nimport { AddEntitiesOptions } from './addEntities';\nimport { isArray } from './isArray';\n\n/**\n * Add item to a collection\n *\n * @example\n *\n *\n * store.update(state => ({\n *   comments: arrayAdd(state.comments, { id: 2 })\n * }))\n *\n */\nexport function arrayAdd<Root extends any[], Entity = any>(keyOrRoot: Root, newEntity: OrArray<Root[0]>, options?: AddEntitiesOptions): Root[0][];\n/**\n * @deprecated\n */\nexport function arrayAdd<Root, Entity = any>(keyOrRoot: ArrayProperties<Root>, newEntity: OrArray<Entity>, options?: AddEntitiesOptions): (state: Root) => Root;\nexport function arrayAdd<Root, Entity = any>(keyOrRoot: ArrayProperties<Root> | Root, newEntity: OrArray<Entity>, options: AddEntitiesOptions = {}) {\n  const newEntities = coerceArray(newEntity);\n\n  const addFn = state => (options.prepend ? [...newEntities, ...(state || [])] : [...(state || []), ...newEntities]);\n\n  if (isArray(keyOrRoot)) {\n    return addFn(keyOrRoot);\n  }\n\n  return state => {\n    return {\n      [keyOrRoot as ArrayProperties<Root>]: addFn(state[keyOrRoot])\n    };\n  };\n}\n","import { ID } from './types';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { arrayAdd } from './arrayAdd';\nimport { arrayUpdate } from './arrayUpdate';\nimport { isObject } from './isObject';\n\n/**\n * Upsert item in a collection\n *\n * @example\n *\n *\n * store.update(1, entity => ({\n *   comments: arrayUpsert(entity.comments, 1, { name: 'newComment' })\n * }))\n */\nexport function arrayUpsert<Root extends any[]>(arr: Root, id: ID, obj: Partial<Root[0]>, idKey = DEFAULT_ID_KEY): Root[0][] {\n  const entityIsObject = isObject(obj);\n  const entityExists = arr.some(entity => (entityIsObject ? entity[idKey] === id : entity === id));\n  if (entityExists) {\n    return arrayUpdate(arr, id, obj, idKey);\n  } else {\n    return arrayAdd(arr, entityIsObject ? { ...obj, [idKey]: id } : obj);\n  }\n}\n","// @internal\nexport function not(pred: Function): Function {\n  return function(...args) {\n    return !pred(...args);\n  };\n}\n","import { ArrayProperties, IDS, ItemPredicate } from './types';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { coerceArray } from './coerceArray';\nimport { isObject } from './isObject';\nimport { isFunction } from './isFunction';\nimport { not } from './not';\n\n/**\n * Remove item from collection\n *\n * @example\n *\n *\n * store.update(state => ({\n *   names: arrayRemove(state.names, ['one', 'second'])\n * }))\n */\nexport function arrayRemove<Root extends any[], Entity = Root[0]>(keyOrRoot: Root, identifier: IDS | ItemPredicate<Root[0]>, idKey?: string): Root[0][];\n/**\n * @deprecated\n */\nexport function arrayRemove<Root, Entity = any>(keyOrRoot: ArrayProperties<Root>, identifier: IDS | ItemPredicate<Entity>, idKey?: string): (state: Root) => Root;\nexport function arrayRemove<Root, Entity = any>(keyOrRoot: ArrayProperties<Root> | Root, identifier: IDS | ItemPredicate<Entity>, idKey = DEFAULT_ID_KEY) {\n  let identifiers;\n  let filterFn;\n\n  if (isFunction(identifier)) {\n    filterFn = not(identifier);\n  } else {\n    identifiers = coerceArray(identifier as IDS);\n    filterFn = current => {\n      return identifiers.includes(isObject(current) ? current[idKey] : current) === false;\n    };\n  }\n\n  if (Array.isArray(keyOrRoot)) {\n    return keyOrRoot.filter(filterFn);\n  }\n\n  return state => {\n    return {\n      [keyOrRoot as string]: state[keyOrRoot].filter(filterFn)\n    };\n  };\n}\n","import { Store } from './store';\nimport { Query } from './query';\nimport { StoreConfigOptions } from './storeConfig';\nimport { EntityStore } from './entityStore';\nimport { QueryEntity } from './queryEntity';\nimport { QueryConfigOptions } from './queryConfig';\nimport { EntityState } from './types';\n\nexport function createStore<State>(initialState: Partial<State>, options: Partial<StoreConfigOptions>) {\n  return new Store<State>(initialState, options);\n}\n\nexport function createQuery<State>(store: Store<State>) {\n  return new Query<State>(store);\n}\n\nexport function createEntityStore<State extends EntityState>(initialState: Partial<State>, options: Partial<StoreConfigOptions>) {\n  return new EntityStore<State>(initialState, options);\n}\n\nexport function createEntityQuery<State extends EntityState>(store: EntityStore<State>, options: QueryConfigOptions = {}) {\n  return new QueryEntity<State>(store, options);\n}\n","import { EMPTY, Observable, of } from 'rxjs';\nimport { Store } from './store';\n\n/**\n * \n * Helper function for checking if we have data in cache\n * \n * export class ProductsService {\n *   constructor(private productsStore: ProductsStore) {}\n\n *   get(): Observable<void> {\n *     const request = this.http.get().pipe(\n *       tap(this.productsStore.set(response))\n *     );\n *\n *     return cacheable(this.productsStore, request);\n *   }\n * }\n */\nexport function cacheable<T>(store: Store, request$: Observable<T>, options: { emitNext: boolean } = { emitNext: false }) {\n  if (store._cache().value) {\n    return options.emitNext ? of(undefined) : EMPTY;\n  }\n  return request$;\n}\n","import { combineLatest, Observable, ObservableInput, ObservedValueOf } from 'rxjs';\nimport { auditTime } from 'rxjs/operators';\n\ntype ReturnTypes<T extends Observable<any>[]> = { [P in keyof T]: T[P] extends Observable<infer R> ? R : never };\ntype Observables = [Observable<any>] | Observable<any>[];\n\nexport function combineQueries<R extends Observables>(observables: R): Observable<ReturnTypes<R>> {\n  return combineLatest(observables).pipe(auditTime(0)) as any;\n}\n","import { EntityState, getEntityType, getIDType } from './types';\nimport { Observable } from 'rxjs';\n\nexport abstract class EntityService<S extends EntityState> {\n  abstract get<T>(id?: getIDType<S>, config?: any): Observable<T>;\n  abstract add<T>(entity: getEntityType<EntityState>, config?: any): Observable<T>;\n  abstract update<T>(id: getIDType<S>, entity: Partial<getEntityType<S>>, config: any): Observable<T>;\n  abstract delete<T>(id: getIDType<S>, config: any): Observable<T>;\n}\n","import { Store } from './store';\nimport { Observable, defer } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\n\nexport function setLoading(store: Store) {\n  return function<T>(source: Observable<T>) {\n    return defer(() => {\n      store.setLoading(true);\n      return source.pipe(finalize(() => store.setLoading(false)));\n    });\n  };\n}\n"],"names":["tslib_1.__values","skip","tslib_1.__extends","action","from","tslib_1.__decorate","map"],"mappings":"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"}
