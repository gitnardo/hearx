{"version":3,"file":"datorama-akita.js","sources":["ng:/@datorama/akita/src/isArray.ts","ng:/@datorama/akita/src/isEmpty.ts","ng:/@datorama/akita/src/toEntitiesObject.ts","ng:/@datorama/akita/src/hasEntity.ts","ng:/@datorama/akita/src/activeState.ts","ng:/@datorama/akita/src/setEntities.ts","ng:/@datorama/akita/src/actions.ts","ng:/@datorama/akita/src/config.ts","ng:/@datorama/akita/src/deepFreeze.ts","ng:/@datorama/akita/src/dispatchers.ts","ng:/@datorama/akita/src/env.ts","ng:/@datorama/akita/src/errors.ts","ng:/@datorama/akita/src/isNil.ts","ng:/@datorama/akita/src/isDefined.ts","ng:/@datorama/akita/src/isFunction.ts","ng:/@datorama/akita/src/toBoolean.ts","ng:/@datorama/akita/src/isPlainObject.ts","ng:/@datorama/akita/src/root.ts","ng:/@datorama/akita/src/storeConfig.ts","ng:/@datorama/akita/src/stores.ts","ng:/@datorama/akita/src/transaction.ts","ng:/@datorama/akita/src/store.ts","ng:/@datorama/akita/src/isObject.ts","ng:/@datorama/akita/src/getActiveEntities.ts","ng:/@datorama/akita/src/addEntities.ts","ng:/@datorama/akita/src/coerceArray.ts","ng:/@datorama/akita/src/removeEntities.ts","ng:/@datorama/akita/src/getInitialEntitiesState.ts","ng:/@datorama/akita/src/updateEntities.ts","ng:/@datorama/akita/src/isUndefined.ts","ng:/@datorama/akita/src/entityActions.ts","ng:/@datorama/akita/src/defaultIDKey.ts","ng:/@datorama/akita/src/entityStore.ts","ng:/@datorama/akita/src/arrayFind.ts","ng:/@datorama/akita/src/sort.ts","ng:/@datorama/akita/src/entitiesToArray.ts","ng:/@datorama/akita/src/entitiesToMap.ts","ng:/@datorama/akita/src/isString.ts","ng:/@datorama/akita/src/getEntity.ts","ng:/@datorama/akita/src/mapSkipUndefined.ts","ng:/@datorama/akita/src/queryConfig.ts","ng:/@datorama/akita/src/compareKeys.ts","ng:/@datorama/akita/src/query.ts","ng:/@datorama/akita/src/sortByOptions.ts","ng:/@datorama/akita/src/queryEntity.ts","ng:/@datorama/akita/src/filterNil.ts","ng:/@datorama/akita/src/getValueByString.ts","ng:/@datorama/akita/src/setValueByString.ts","ng:/@datorama/akita/src/persistState.ts","ng:/@datorama/akita/src/snapshotManager.ts","ng:/@datorama/akita/src/plugins/plugin.ts","ng:/@datorama/akita/src/plugins/paginator/paginatorPlugin.ts","ng:/@datorama/akita/src/plugins/persistForm/persistNgFormPlugin.ts","ng:/@datorama/akita/src/captialize.ts","ng:/@datorama/akita/src/devtools.ts","ng:/@datorama/akita/src/plugins/entityCollectionPlugin.ts","ng:/@datorama/akita/src/plugins/stateHistory/stateHistoryPlugin.ts","ng:/@datorama/akita/src/plugins/stateHistory/entityStateHistoryPlugin.ts","ng:/@datorama/akita/src/plugins/dirtyCheck/dirtyCheckPlugin.ts","ng:/@datorama/akita/src/plugins/dirtyCheck/entityDirtyCheckPlugin.ts","ng:/@datorama/akita/src/guid.ts","ng:/@datorama/akita/src/toEntitiesIds.ts","ng:/@datorama/akita/src/resetStores.ts","ng:/@datorama/akita/src/isNumber.ts","ng:/@datorama/akita/src/runStoreAction.ts","ng:/@datorama/akita/src/arrayUpdate.ts","ng:/@datorama/akita/src/arrayAdd.ts","ng:/@datorama/akita/src/arrayUpsert.ts","ng:/@datorama/akita/src/not.ts","ng:/@datorama/akita/src/arrayRemove.ts","ng:/@datorama/akita/src/fp.ts","ng:/@datorama/akita/src/cacheable.ts","ng:/@datorama/akita/src/combineQueries.ts","ng:/@datorama/akita/src/entityService.ts","ng:/@datorama/akita/src/setLoading.ts"],"names":["skip","action","from","tslib_1.__decorate","map"],"mappings":";;;;;;;;;;;;;;;;;;;;AACA,SAAgB,OAAO,CAAI,KAAU;AAAI,IACvC,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC9B,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACJ5J;AAAa;AAAI;AAAe;AAEpB;AACE;AAAd,SAAgB,OAAO,CAAI,GAAM;AACjC,IAAE,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE;AACpB,QAAI,OAAO,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC;AAC5B,KAAG;AACH,IAAE,OAAO,KAAK,CAAC;AACf,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAa;AAAI;AAAe;AAAuB;AAAoB;AAA2B;AAAe;ACNrR,SAAgB,gBAAgB,CAAI,QAAa,EAAE,KAAa,EAAE,YAA6B;AAC/F;AACK,UADG,GAAG,GAAG;AACd,QAAI,QAAQ,EAAE,EAAE;AAChB,QAAI,GAAG,EAAE,EAAE;AACX,KAAG;AACH,IACE,KAAK,MAAM,MAAM,IAAI,QAAQ,EAAE;AACjC;AACI;AAAyB,cAAnB,OAAO,GAAG,YAAY,CAAC,MAAM,CAAC;AACxC,QAAI,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,OAAO,CAAC;AAC3C,QAAI,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;AACjC,KAAG;AACH,IACE,OAAO,GAAG,CAAC;AACb,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAa;AAAI;AAAe;AAAuB;AAAiB;AAAe;ACfvP,SAAgB,SAAS,CAAI,QAAwB,EAAE,EAAM;AAC7D,IAAE,OAAO,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;AACrC,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACL5J;AAAa;AAAI;AAAe;AACrB;AAAe;AAG1B,SAAgB,cAAc,CAAI,KAAqB;AAAI,IACzD,OAAO,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;AACxC,CAAC;AACD;AACY;AACT;AAAqB;AAAe;AAAvC,SAAgB,kBAAkB,CAAC,MAAW;AAAI,IAChD,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC;AACzB,CAAC;AACD;AACY;AACT;AAAe;AAAkB;AAAe;AAAnD,SAAgB,mBAAmB,CAAI,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAqD;AACnH,IAAE,IAAI,kBAAkB,CAAC,MAAM,CAAC,EAAE;AAClC,QAAI,OAAO,iBAAiB,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AAC1C,KAAG;AACH,IACE,IAAI,SAAS,CAAC,QAAQ,EAAE,MAAM,CAAC,KAAK,KAAK,EAAE;AAC7C,QAAI,OAAO,IAAI,CAAC;AAChB,KAAG;AACH,IACE,OAAO,MAAM,CAAC;AAChB,CAAC;AACD;AACY;AACT;AAAgC;AAAqB;AAAe;AAAvE,SAAgB,iBAAiB,CAAC,iBAAuB,EAAE,MAAY;AACvE;AAAqB,UAAb,QAAQ,GAAG,iBAAiB,CAAC,MAAM;AAAM;AAAqB;AACzD;AAAQ,IADuB,EAAE,IAAI,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAC;AAC1E;AACE,IAAA,IAAI,QAAQ,CAAC,MAAM,KAAK,iBAAiB,CAAC,MAAM,EAAE;AACpD,QAAI,OAAO,iBAAiB,CAAC;AAC7B,KAAG;AACH,IACE,OAAO,QAAQ,CAAC;AAClB,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACpC5J;AAAa;AAAI;AAAoB;AACnC;AAAe;AAcjB,SAAgB,aAAa,CAAS,KAAK;AAAI,IAC7C,OAAO,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,GAAG,CAAC;AACrC,CAAC;AACD;AACY;AACT;AAAe;AAAuB;AAA2B;AACpE;AADA,SAAS,eAAe,CAAI,QAAoB,EAAE,YAA6B;AAC/E;AACE,QADI,MAAM,GAAG,EAAE;AACjB,IAAE,KAAK,MAAM,EAAE,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;AAC1C,QAAI,MAAM,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;AAC5C,KAAG;AACH,IACE,OAAO,MAAM,CAAC;AAChB,CAAC;AACD;AACY;AACT;AAAkB;AAAkB;AAAe;AAAtD,SAAgB,WAAW,CAA8B,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,YAAY,EAAE,cAAc,EAA2B;AAAI;AAC5H,QAAZ,WAAuB;AAC7B;AAEA,QAFM,MAAY;AAClB,IACE,IAAI,OAAO,CAAC,QAAQ,CAAC,EAAE;AACzB;AAAyB,cAAf,OAAO,GAAG,gBAAgB,CAAC,QAAQ,EAAE,KAAK,EAAE,YAAY,CAAC;AACnE,QAAI,WAAW,GAAG,OAAO,CAAC,QAAQ,CAAC;AACnC,QAAI,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC;AACzB,KAAG;AAAC,SAAK,IAAI,aAAa,CAAC,QAAQ,CAAC,EAAE;AACtC,QAAI,WAAW,GAAG,cAAc,GAAG,QAAQ,CAAC,QAAQ,GAAG,eAAe,CAAC,QAAQ,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;AACxG,QAAI,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC;AAC1B,KAAG;AAAC,SAAK;AACT;AACI,QAAA,WAAW,GAAG,cAAc,GAAG,QAAQ,GAAG,eAAe,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;AACtF,QAAI,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG;AAAM;AAAyB;AAGrE;AAAY,QAH2B,EAAE,KAAK,KAAK,oBAAC,EAAE,GAAQ,GAAG,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC;AACtF,KAAG;AACH;AACoB,UAAZ,QAAQ,qBACT,KAAK,IACR,QAAQ,EAAE,WAAW,EACrB,GAAG,EAAE,MAAM,EACX,OAAO,EAAE,KAAK,GACf;AACH,IACE,IAAI,cAAc,CAAC,KAAK,CAAC,EAAE;AAC7B,QAAI,QAAQ,CAAC,MAAM,GAAG,mBAAmB,oBAAC,QAAQ,GAAQ,CAAC;AAC3D,KAAG;AACH,IACE,OAAO,QAAQ,CAAC;AAClB,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;AC7DhK,MAAa,aAAa,GAAG;AAC7B,IAAE,IAAI,EAAE,IAAI;AACZ,IAAE,SAAS,EAAE,IAAI;AACjB,IAAE,IAAI,EAAE,KAAK;AACb,CAAC;AACD;AACgB,IAAZ,kBAAkB,GAAG,KAAK;AAC9B;AACG;AAAe;AAAlB,SAAgB,iBAAiB;AACjC,IAAE,kBAAkB,GAAG,KAAK,CAAC;AAC7B,CAAC;AACD;AAC2D;AACxD;AAAmB;AAAyB;AACvC;AADR,SAAgB,SAAS,CAAC,IAAY,EAAE,SAAU;AAClD,IAAE,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AAC7B,IAAE,kBAAkB,GAAG,IAAI,CAAC;AAC5B,CAAC;AACD;AACG;AAAmB;AAAyB;AACvC;AADR,SAAgB,SAAS,CAAC,IAAY,EAAE,SAAU;AAClD,IAAE,IAAI,kBAAkB,KAAK,KAAK,EAAE;AACpC,QAAI,aAAa,CAAC,IAAI,GAAG,IAAI,CAAC;AAC9B,QAAI,aAAa,CAAC,SAAS,GAAG,SAAS,CAAC;AACxC,KAAG;AACH,CAAC;AACD;AACG;AAAoB;AAAe;AAAtC,SAAgB,aAAa,CAACA,OAAI,GAAG,IAAI;AACzC,IAAE,aAAa,CAAC,IAAI,GAAGA,OAAI,CAAC;AAC5B,CAAC;AACD;AACG;AAAqB;AAAyB;AACtC;AADX,SAAgB,MAAM,CAAC,MAAc,EAAE,SAAU;AACjD,IAAE;AAAY;AAAyB;AAA8B;AACzD;AAAmB;AAAQ,IAD9B,UAAS,MAAW,EAAE,WAAmB,EAAE,UAA8B;AAClF;AAAyB,cAAf,cAAc,GAAG,UAAU,CAAC,KAAK;AAC3C,QAAI,UAAU,CAAC,KAAK;AAAQ;AACb;AACb;AAAY,QAFS,UAAS,GAAG,IAAI;AACvC,YAAM,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AACnC,YAAM,OAAO,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAC9C,SAAK,CAAA,CAAC;AACN,QACI,OAAO,UAAU,CAAC;AACtB,KAAG,EAAC;AACJ,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAiB,IC/B7K,MAAM,GAAgB;AAC1B,IAAE,UAAU,EAAE,KAAK;AACnB,IAAE,GAAG,EAAE,IAAI;AACX,IAAE,UAAU,EAAE,SAAS;AACvB,CAAC;AACD;AACG;AAAqB;AAAe;AAAvC,SAAgB,WAAW,CAAC,MAAmB;AAC/C,IAAE,MAAM,qBAAQ,MAAM,EAAK,MAAM,CAAE,CAAC;AACpC,CAAC;AACD;AACY;AACT;AAAe;AAAlB,SAAgB,cAAc;AAC9B,IAAE,OAAO,MAAM,CAAC;AAChB,CAAC;AACD;AACG;AAAe;AAAlB,SAAgB,mBAAmB;AACnC,IAAE,OAAO,MAAM,CAAC,UAAU,CAAC;AAC3B,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAa;AAAI;AAAgB;AAAe;AC1BhN,SAAgB,UAAU,CAAC,CAAC;AAC5B,IAAE,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACnB;AACoB,UAAZ,WAAW,GAAG,OAAO,CAAC,KAAK,UAAU;AAC7C;AAAqB,UAAb,UAAU,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc;AACpD,IACE,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,OAAO;AAAM;AAE3C;AAAmB;AAAQ,IAFW,UAAS,IAAI;AACrD,QAAI,IACE,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC;AAC9B,aAAO,WAAW,GAAG,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,WAAW,GAAG,IAAI,CAAC;AAC3F,YAAM,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI;AACtB,aAAO,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,UAAU,CAAC;AACpE,YAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EACzB;AACN,YAAM,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;AAC1B,SAAK;AACL,KAAG,EAAC,CAAC;AACL,IACE,OAAO,CAAC,CAAC;AACX,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACrB5J;AAAa;AAGb,MAAa,aAAa,GAAG,IAAI,OAAO,EAAU;AAClD;AACA;AAAA,MAAa,UAAU,GAAG,IAAI,aAAa,CAAS,EAAE,EAAE,IAAI,CAAC;AAC7D;AACA;AAAA,MAAa,aAAa,GAAG,IAAI,OAAO,EAAU;AAClD;AACY;AACT;AAAwB;AAAe;AAA1C,SAAgB,eAAe,CAAC,SAAiB;AACjD,IAAE,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAChC,CAAC;AACD;AACY;AACT;AAAwB;AAAe;AAA1C,SAAgB,aAAa,CAAC,SAAiB;AAC/C,IAAE,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAC7B,CAAC;AACD;AACY;AACT;AAAwB;AAAe;AAA1C,SAAgB,cAAc,CAAC,SAAiB;AAChD,IAAE,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAChC,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;ACvBhK,IAAW,OAAO,GAAG,IAAI;AACzB;AACG;AAAe;AAAlB,SAAgB,mBAAmB;AACnC,IAAE,OAAO,GAAG,KAAK,CAAC;AAClB,CAAC;AACD;AACY;AACT;AAAe;AAAlB,SAAgB,KAAK;AACrB,IAAE,OAAO,OAAO,CAAC;AACjB,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;ACThK,MAAa,UAAW,SAAQ,KAAK;AACrC;AAAQ;AACP;AAAQ,IADP,YAAY,OAAe;AAC7B,QAAI,KAAK,CAAC,OAAO,CAAC,CAAC;AACnB,KAAG;AACH,CAAC;AACD;AACY;AACT;AAAmB;AAAwB;AAAe;AAA7D,SAAgB,kBAAkB,CAAC,IAAY,EAAE,SAAiB;AAClE,IAAE,IAAI,CAAC,IAAI,EAAE;AACb,QAAI,OAAO,CAAC,KAAK,CAAC,wCAAwC,SAAS,EAAE,CAAC,CAAC;AACvE,KAAG;AACH,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAa;AAAI;AAAgB;AAAe;ACZhN,SAAgB,KAAK,CAAC,CAAC;AACvB,IAAE,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,SAAS,CAAC;AACvC,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACJ5J;AAAa;AAAI;AAEhB;AACE;AAAH,SAAgB,SAAS,CAAC,GAAQ;AAClC,IAAE,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC;AAC9B,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAa;AAAI;AAAoB;AAAe;ACLpN,SAAgB,UAAU,CAAC,KAAU;AAAI,IACvC,OAAO,OAAO,KAAK,KAAK,UAAU,CAAC;AACrC,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAa;AAAI;AAAoB;AAAe;ACHpN,SAAgB,SAAS,CAAC,KAAU;AAAI,IACtC,OAAO,KAAK,IAAI,IAAI,IAAI,GAAG,KAAK,EAAE,KAAK,OAAO,CAAC;AACjD,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACJ5J;AAAa;AAAI;AAAoB;AAE3B;AACV,SAAgB,aAAa,CAAC,KAAK;AACnC,IAAE,OAAO,SAAS,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,WAAW,CAAC,IAAI,KAAK,QAAQ,CAAC;AACjE,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;ACNhK,MAAa,SAAS,GAAG,OAAO,MAAM,KAAK,WAAW;AACtD;AAAA,MAAa,YAAY,GAAG,CAAC,SAAS;AACtC;AAAA,MAAa,cAAc,GAAG,OAAO,MAAM,KAAK,WAAW,IAAI,oBAAM,MAAM,IAAE,gBAAgB,KAAK,WAAW;AAC7G;AAAA,MAAa,eAAe;AAAQ;AAEhC;AAF2B;AAC/B,IAAE,IAAI;AACN,QAAI,OAAO,OAAO,YAAY,KAAK,WAAW,CAAC;AAC/C,KAAG;AAAC,IAAA,WAAM;AACV,QAAI,OAAO,KAAK,CAAC;AACjB,KAAG;AACH,CAAC,CAAA;AACA;AAAD,MAAa,iBAAiB;AAAQ;AAElC;AAF6B;AACjC,IAAE,IAAI;AACN,QAAI,OAAO,OAAO,cAAc,KAAK,WAAW,CAAC;AACjD,KAAG;AAAC,IAAA,WAAM;AACV,QAAI,OAAO,KAAK,CAAC;AACjB,KAAG;AACH,CAAC,CAAA;AACA;AAAC;AAAI;AAAkC;AAAqH;AAAI;ACFjK,MAAa,SAAS,GAAG,aAAa;AACtC;AACG;AAAuB;AAAe;AAAzC,SAAgB,WAAW,CAAC,QAA4B;AACxD,IAAE;AAAY;AACb;AAAmB;AAAQ,IADnB,UAAS,WAAqB;AACvC,QAAI,WAAW,CAAC,SAAS,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;AAC7C,QACI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACxE;AACE,kBADU,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;AACzB;AACM,YAAA,IAAI,GAAG,KAAK,MAAM,EAAE;AAC1B,gBAAQ,WAAW,CAAC,SAAS,CAAC,CAAC,WAAW,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;AAC5D,aAAO;AAAC,iBAAK;AACb,gBAAQ,WAAW,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;AACpD,aAAO;AACP,SAAK;AACL,KAAG,EAAC;AACJ,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AC/B5J;AAAa;AAKb,MAAa,UAAU,GAAwC,EAAE;AACjE;AACY;AACZ,MAAa,WAAW,GAAwC,EAAE;AAElE,IAAI,SAAS,IAAI,KAAK,EAAE,EAAE;AAC1B,IAAE,oBAAC,MAAM,IAAS,QAAQ,GAAG,UAAU,CAAC;AACxC,IAAE,oBAAC,MAAM,IAAS,SAAS,GAAG,WAAW,CAAC;AAC1C,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACf5J;AAAa;AAAiB,MAKxB,mBAAmB,GAAG,IAAI,OAAO,EAAE;AACzC;AACY;AACI,MAAV,oBAAoB,GAAG,IAAI,eAAe,CAAC,KAAK,CAAC;AACvD;AACY;AAMZ,MAAa,kBAAkB,GAAuB;AACtD,IAAE,kBAAkB,EAAE,CAAC;AACvB,IAAE,gBAAgB,EAAE,IAAI;AACxB,CAAC;AACD;AACY;AACT;AAAe;AAAlB,SAAgB,UAAU;AAC1B,IAAE,IAAI,CAAC,sBAAsB,EAAE,EAAE;AACjC,QAAI,kBAAkB,CAAC,gBAAgB,GAAG,IAAI,OAAO,EAAE,CAAC;AACxD,KAAG;AACH,IAAE,kBAAkB,CAAC,kBAAkB,EAAE,CAAC;AAC1C,IAAE,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAClC,CAAC;AACD;AACY;AACT;AAAe;AAAlB,SAAgB,QAAQ;AACxB,IAAE,IAAI,EAAE,kBAAkB,CAAC,kBAAkB,KAAK,CAAC,EAAE;AACrD,QAAI,kBAAkB,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACnD,QAAI,kBAAkB,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC;AACnD,QAAI,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACrC,QAAI,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACnC,KAAG;AACH,CAAC;AACD;AACY;AACT;AAAe;AAAlB,SAAgB,sBAAsB;AACtC,IAAE,OAAO,kBAAkB,CAAC,kBAAkB,GAAG,CAAC,CAAC;AACnD,CAAC;AACD;AACY;AACT;AAAe;AAAlB,SAAgB,MAAM;AAAK,IACzB,OAAO,kBAAkB,CAAC,gBAAgB,GAAG,kBAAkB,CAAC,gBAAgB,CAAC,YAAY,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;AAC7G,CAAC;AACD;AACG;AACuB;AAC0C;AACF;AAChE;AACU;AACgB;AACkB;AACA;AACvC;AACL;AAEQ;AAAqB;AAAuB;AAAe;AAArE,SAAgB,gBAAgB,CAAIC,SAAe,EAAE,OAAO,GAAG,SAAS;AAAI,IAC1E,UAAU,EAAE,CAAC;AACf,IAAE,IAAI;AACN,QAAI,OAAOA,SAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AACjC,KAAG;AAAC,YAAQ;AACZ,QAAI,SAAS,CAAC,cAAc,CAAC,CAAC;AAC9B,QAAI,QAAQ,EAAE,CAAC;AACf,KAAG;AACH,CAAC;AACD;AACG;AACuB;AAC0C;AAClE;AACiE;AACjE;AACU;AACI;AACA;AAC8B;AACA;AACzC;AACH;AACA;AAEQ;AAAV,SAAgB,WAAW;AAC3B,IAAE;AAAY;AAAyB;AAA8B;AACzD;AAAmB;AAAQ,IAD9B,UAAS,MAAW,EAAE,WAAmB,EAAE,UAA8B;AAClF;AAAyB,cAAf,cAAc,GAAG,UAAU,CAAC,KAAK;AAC3C,QACI,UAAU,CAAC,KAAK;AAAQ;AACb;AACf;AAAY,QAFW,UAAS,GAAG,IAAI;AACvC,YAAM,OAAO,gBAAgB;AAAM;AACX;AAAgB,YADV;AAC9B,gBAAQ,OAAO,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAChD,aAAO,GAAE,IAAI,CAAC,CAAC;AACf,SAAK,CAAA,CAAC;AACN,QACI,OAAO,UAAU,CAAC;AACtB,KAAG,EAAC;AACJ,CAAC;AACD;AACG;AACD;AACgE;AAChE;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACW;AAAmB;AAAe;AAA7C,SAAgB,eAAe,CAAI,IAAwB;AAC3D,IAAE;AAAY;AAAyB;AACvC;AAAQ,IADC,UAAS,MAAqB;AAAI,QACvC,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG;AAAM;AAA4B;AAG3D;AAAY,QAHc,KAAK,IAAI,gBAAgB;AAAM;AAEzD;AACU,QAH0C,MAAM,IAAI,CAAC,KAAK,CAAC,EAAC,EAAC,CAAC,CAAC;AAC1E,KAAG,EAAC;AACJ,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACzH5J;AAAI;AAAG;AAAuC;AAAG;AACvC;AAAG;AAAmC;AACxC;AAA8B;AAAK;AAAG;AACF;AAAa;AAC/C;AAAwB;AAAO;AACtC;AAAG;AAAsC;AACrB;AACnB;AAAmC;AAAO;AAC1C;AAAe;AAkCnB,MAAa,KAAK;AAAG;AAAQ;AACC;AACpB;AAAQ,IAQhB,YAAY,YAAwB,EAAY,UAAuC,EAAE;AAC3F,QADkD,YAAO,GAAP,OAAO,CAAkC;AAAC,QAPlF,kBAAa,GAAG,KAAK,CAAC;AAChC,QACY,UAAK,GAAe;AAChC,YAAI,MAAM,EAAE,IAAI,eAAe,CAAU,KAAK,CAAC;AAC/C,YAAI,GAAG,EAAE,IAAI;AACb,SAAG,CAAC;AACJ,QAEI,IAAI,CAAC,MAAM,oBAAC,YAAY,GAAM,CAAC;AACnC,KAAG;AACH;AAEC;AACE;AACE;AAEH;AAAO;AAGT;AAAO;AACL;AAAmB;AAAQ,IAD3B,UAAU,CAAC,OAAO,GAAG,KAAK;AAC5B,QAAI,IAAI,OAAO,KAAK,oBAAC,IAAI,CAAC,MAAM,EAAE,IAA8B,OAAO,EAAE;AACzE,YAAM,KAAK,EAAE,IAAI,SAAS,CAAC,aAAa,CAAC,CAAC;AAC1C,YAAM,IAAI,CAAC,SAAS;AAAM;AAAgC;AACzD;AAID,YALqB,KAAK,0CAAU,KAAK,IAAE,OAAO,MAA+B,EAAC,CAAC;AACnF,SAAK;AACL,KAAG;AACH;AAEC;AACE;AAEH;AAAO;AAEF;AAAO;AACE;AACE;AAGT;AAAO;AAA2B;AAA2B;AAAmB;AACrF,IADA,WAAW,CAAC,QAAiB,EAAE,UAAmC,EAAE,UAAU,EAAE,KAAK,EAAE;AACzF,QAAI,IAAI,QAAQ,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE;AAC9C,YAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACvC,SAAK;AACL,QACI,IAAI,OAAO,CAAC,UAAU,EAAE;AAC5B;AAA6B,kBAAjB,SAAS,GAAG,IAAI,CAAC,WAAW,EAAE;AAC1C,YAAM,IAAI,SAAS,EAAE;AACrB,gBAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,KAAK,IAAI,EAAE;AACrC,oBAAU,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACvC,iBAAS;AACT,gBAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,sBAAQ,UAAU;AAAM;AAA+B;AAExE,gBAFoC,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAE,SAAS,CAAC,EAAA,CAAC;AACnF,aAAO;AACP,SAAK;AACL,KAAG;AACH;AAEC;AACE;AAEH;AAAO;AAEF;AACC;AACI;AAAQ,IADhB,QAAQ;AACV,QAAI,OAAO,IAAI,CAAC,UAAU,CAAC;AAC3B,KAAG;AACH;AAEC;AACE;AACE;AAEH;AAAO;AAGT;AAAO;AACP;AAAwB;AAAmB;AAAQ,IADjD,QAAQ,CAAI,KAAQ;AACtB,QAAI,IAAI,KAAK,KAAK,oBAAC,IAAI,CAAC,MAAM,EAAE,IAAwB,KAAK,EAAE;AAC/D,YAAM,KAAK,EAAE,IAAI,SAAS,CAAC,WAAW,CAAC,CAAC;AACxC,YAAM,IAAI,CAAC,SAAS;AAAM;AAAgC;AAEvD;AAEW,YAJO,KAAK,0CAAU,KAAK,IAAE,KAAK,MAAyB,EAAC,CAAC;AAC3E,SAAK;AACL,KAAG;AACH;AAEC;AAAQ;AAAmB;AAA0B;AACrC;AAAQ,IADvB,OAAO,CAAI,OAAwB;AAAI,QACrC,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC,IAAI,CACnC,GAAG,CAAC,OAAO,CAAC,EACZ,oBAAoB,EAAE,CACvB,CAAC;AACN,KAAG;AACH;AAEC;AAAQ;AACG;AAAQ,IADlB,MAAM;AAAK,QACT,OAAO,IAAI,CAAC,UAAU,CAAC;AAC3B,KAAG;AACH;AAEC;AAAQ;AAAmB;AAAQ,IAAlC,MAAM;AAAK,QACT,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;AAC7B,KAAG;AACH;AAEC;AAAQ;AAAmB;AAAQ,IAAlC,IAAI,MAAM;AAAK,QACb,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;AAC7C,KAAG;AACH;AAEC;AAAQ;AACD;AAAQ,IADd,IAAI,SAAS;AACf,QAAI,OAAO,oBAAC,IAAI,CAAC,MAAM,IAAgD,SAAS,IAAI,oBAAC,IAAI,CAAC,OAAO,IAAgD,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;AAChL,KAAG;AACH;AAEC;AAAQ;AACF;AAAQ,IADb,IAAI,UAAU;AAChB,QAAI,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,IAAI,UAAU,CAAC;AAC/E,KAAG;AACH;AAEC;AAAQ;AACH;AAAQ,IADZ,IAAI,WAAW;AACjB,QAAI,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;AACnD,KAAG;AACH;AACO;AACH;AAAQ,IADV,IAAI,WAAW;AACjB,QAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,mBAAmB,EAAE,CAAC;AACtF,KAAG;AACH;AAEC;AAAQ;AACF;AAAQ,IADb,IAAI,UAAU;AAChB,QAAI,OAAO,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;AAChG,KAAG;AACH;AAEC;AAAQ;AAA2B;AAAmC;AAC9D;AAAQ,IADf,SAAS,CAAC,QAAyC,EAAE,eAAe,GAAG,IAAI;AAC7E,QAAI,IAAI,UAAU,CAAC,QAAQ,CAAC,EAAE;AAC9B;AAA6B,kBAAjB,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;AAC/C,YAAM,IAAI,CAAC,UAAU,GAAG,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC;AACzE,SAAK;AAAC,aAAK;AACX,YAAM,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC;AACjC,SAAK;AACL,QACI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;AACrB,YAAM,IAAI,CAAC,KAAK,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACxD,YAAM,OAAO;AACb,SAAK;AACL,QACI,IAAI,sBAAsB,EAAE,EAAE;AAClC,YAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;AAC/B,YAAM,OAAO;AACb,SAAK;AACL,QACI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC;AACpD,KAAG;AACH;AAEC;AACE;AAEH;AAAO;AAEF;AAAO;AAGT;AAAO;AACO;AAAQ,IADvB,KAAK;AACP,QAAI,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;AAC7B,YAAM,KAAK,EAAE,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC;AACpC,YAAM,IAAI,CAAC,SAAS;AAAM;AAA2B;AACnD,YADmB,MAAM,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,EAAC,CAAC;AAClE,YAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AAC9B,SAAK;AAAC,aAAK;AACX,YAAM,KAAK,EAAE,IAAI,OAAO,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;AAC5E,SAAK;AACL,KAAG;AACH;AAEC;AAED;AAEA;AACG,IAYD,MAAM,CAAC,eAAoD;AAC7D,QAAI,KAAK,EAAE,IAAI,SAAS,CAAC,QAAQ,CAAC,CAAC;AACnC;AAEM,YADE,QAAQ;AAChB;AAAyB,cAAf,YAAY,GAAG,IAAI,CAAC,MAAM,EAAE;AACtC,QAAI,IAAI,UAAU,CAAC,eAAe,CAAC,EAAE;AACrC,YAAM,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,eAAe,CAAC,YAAY,CAAC,CAAC;AAChI,SAAK;AAAC,aAAK;AACX,YAAM,QAAQ,GAAG,eAAe,CAAC;AACjC,SAAK;AACL;AACwB,cAAd,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,uCAAO,YAAY,EAAK,QAAQ,IAAQ;AAC7F;AAAyB,cAAf,QAAQ,GAAG,aAAa,CAAC,YAAY,CAAC,GAAG,QAAQ,GAAG,IAAI,oBAAC,YAAY,IAAS,WAAW,CAAC,QAAQ,CAAC;AAC7G,QAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;AAC7B,KAAG;AACH;AACO;AAA6B;AAAmB;AACvD,IADE,iBAAiB,CAAC,UAAuC;AAC3D,QAAI,IAAI,CAAC,OAAO,qBAAQ,IAAI,CAAC,OAAO,EAAK,UAAU,CAAE,CAAC;AACtD,KAAG;AACH;AAEC;AAAQ;AAAoB;AAA4B;AAC3C;AACd,IAFE,cAAc,CAAC,CAAc,EAAE,SAAsB;AAAI,QACvD,OAAO,SAAS,CAAC;AACrB,KAAG;AACH;AACO;AACC;AAAQ,IADd,WAAW;AACb,QAAI,IAAI,CAAC,OAAO,EAAE,CAAC;AACnB,KAAG;AACH;AAEC;AACE;AAEH;AAAO;AAEF;AAAO;AAGT;AAAO;AACK;AAAQ,IADrB,OAAO;AACT;AAAyB,cAAf,UAAU,GAAG,SAAS,GAAG,oBAAC,MAAM,IAAS,UAAU,GAAG,KAAK;AACrE,QAAI,IAAI,CAAC,UAAU,IAAI,IAAI,KAAK,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;AAC5D,YAAM,OAAO,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACxC,YAAM,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACtC,YAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AAC9B,YAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;AACnC,SAAK;AACL,KAAG;AACH;AACO;AAAgB;AACL;AAAmB;AAC/B,IAFI,MAAM,CAAC,YAAe;AAChC,QAAI,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;AACtC,QAAI,IAAI,CAAC,SAAS;AAAM;AACjB;AAAY,QADA,MAAM,YAAY,EAAC,CAAC;AACvC,QAAI,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAClC,QAAI,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;AAC7B,YAAM,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;AACxC,SAAK;AACL,QAAI,KAAK,EAAE,IAAI,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AACzE,KAAG;AACH;AACO;AAAgB;AAAwB;AACpB;AACT;AAAQ,IAFhB,QAAQ,CAAC,KAAQ,EAAE,eAAe,GAAG,IAAI;AACnD,QAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC3B,QAAI,IAAI,eAAe,EAAE;AACzB,YAAM,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACrC,YAAM,iBAAiB,EAAE,CAAC;AAC1B,SAAK;AACL,KAAG;AACH;AACO;AAAgB;AACZ;AAAQ,IADT,gBAAgB;AAC1B,QAAI,MAAM,EAAE,CAAC,SAAS;AAAM;AACR;AAAY,QADT;AACvB,YAAM,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;AACjC,YAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;AACnC,SAAK,EAAC,CAAC;AACP,KAAG;AACH;AACO;AAAgB;AACR;AAAQ,IADb,YAAY;AACtB,QAAI,IAAI,IAAI,CAAC,UAAU,KAAK,KAAK,EAAE;AACnC,YAAM,OAAO,KAAK,CAAC;AACnB,SAAK;AACL,QAAI,OAAO,IAAI,CAAC,UAAU,IAAI,cAAc,EAAE,CAAC,UAAU,CAAC;AAC1D,KAAG;AACH;AACO;AAAgB;AACb;AAAQ,IADR,iBAAiB;AAC3B,QAAI,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;AAC7B,YAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC9B,YAAM,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;AAChC,SAAK;AACL,KAAG;AACH;AACO;AAAgB;AACP;AAAQ,IADd,WAAW;AACrB,QAAI,OAAO,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,KAAK,cAAc,EAAE,CAAC,GAAG,CAAC;AAC9E,KAAG;AACH;;uDAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAa;AAAI;AAAoB;AAAe;AChUpN,SAAgB,QAAQ,CAAC,KAAU;AACnC;AAAqB,UAAb,IAAI,GAAG,OAAO,KAAK;AAC3B,IAAE,OAAO,KAAK,IAAI,IAAI,KAAK,IAAI,IAAI,QAAQ,IAAI,IAAI,IAAI,UAAU,CAAC,CAAC;AACnE,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACJ5J;AAAa;AAAI;AACP;AAAkB;AACX;AAAe;AAKhC,SAAgB,iBAAiB,CAAC,WAA0C,EAAE,GAAS,EAAE,aAAyB;AAClH;AAEM,QAFA,MAAM;AACZ,IACE,IAAI,OAAO,CAAC,WAAW,CAAC,EAAE;AAC5B,QAAI,MAAM,GAAG,WAAW,CAAC;AACzB,KAAG;AAAC,SAAK;AACT,QAAI,IAAI,QAAQ,CAAC,WAAW,CAAC,EAAE;AAC/B,YAAM,IAAI,KAAK,CAAC,aAAa,CAAC;AAAE,gBAAA,OAAO;AACvC,YAAM,oBAAC,WAAW,MAAwB,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,WAAW,CAAC,CAAC;AACrF;AAA6B,kBAAjB,cAAc,GAAG,GAAG,CAAC,OAAO,oBAAC,aAAa,GAAO;AAC7D,YAAM,IAAI,oBAAC,WAAW,IAAsB,IAAI,EAAE;AAClD;AAAiC,sBAAnB,OAAO,GAAG,cAAc,KAAK,CAAC;AAC5C,gBAAQ,IAAI,OAAO,IAAI,CAAC,oBAAC,WAAW,IAAsB,IAAI;AAAE,oBAAA,OAAO;AACvE,gBAAQ,MAAM,GAAG,OAAO,GAAG,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,uBAAI,GAAG,CAAC,cAAc,GAAG,CAAC,CAAC,GAAQ,CAAC;AAClF,aAAO;AAAC,iBAAK,IAAI,oBAAC,WAAW,IAAsB,IAAI,EAAE;AACzD;AAAiC,sBAAnB,MAAM,GAAG,GAAG,CAAC,MAAM,KAAK,cAAc,GAAG,CAAC;AACxD,gBAAQ,IAAI,MAAM,IAAI,CAAC,oBAAC,WAAW,IAAsB,IAAI;AAAE,oBAAA,OAAO;AACtE,gBAAQ,MAAM,GAAG,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,uBAAI,GAAG,CAAC,cAAc,GAAG,CAAC,CAAC,GAAQ,CAAC;AACpE,aAAO;AACP,SAAK;AAAC,aAAK;AACX,YAAM,IAAI,WAAW,KAAK,aAAa;AAAE,gBAAA,OAAO;AAChD,YAAM,MAAM,sBAAG,WAAW,EAAM,CAAC;AACjC,SAAK;AACL,KAAG;AACH,IACE,OAAO,MAAM,CAAC;AAChB,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AClC5J;AAAa;AAAI;AAAkB;AAExB;AAAe;AAW1B,SAAgB,WAAW,CAA8B,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,GAAG,EAAE,EAAE,YAAY,EAA2B;AACxI;AAAqB,QAAf,WAAW,GAAG,EAAE;AACtB;AACE,QADI,MAAM,GAAG,EAAE;AACjB;AAAqB,QAAf,cAAc,GAAG,KAAK;AAC5B,IACE,KAAK,MAAM,MAAM,IAAI,QAAQ,EAAE;AACjC,QAAI,IAAI,SAAS,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,KAAK,EAAE;AAC5D;AACM;AAA6B,kBAAvB,OAAO,GAAG,YAAY,CAAC,MAAM,CAAC;AAC1C;AAA6B,kBAAjB,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC;AACrC,YAAM,WAAW,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC;AACtC,YAAM,IAAI,OAAO,CAAC,OAAO;AAAE,gBAAA,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACpD;AAAiB,gBAAN,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACjC,YACM,cAAc,GAAG,IAAI,CAAC;AAC5B,SAAK;AACL,KAAG;AACH,IACE,OAAO,cAAc;AACvB,UAAM;AACN,YAAQ,QAAQ,oBACH,KAAK,IACR,QAAQ,oBACH,KAAK,CAAC,QAAQ,EACd,WAAW,GAEhB,GAAG,EAAE,OAAO,CAAC,OAAO,GAAG,CAAC,GAAG,MAAM,EAAE,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,GAAG,MAAM,CAAC,GAC7E;AACT,YAAQ,MAAM;AACd,SAAO;AACP,UAAM,IAAI,CAAC;AACX,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AC9C5J;AAAa;AAAI;AAAe;AAG3B;AAAe;AAApB,SAAgB,WAAW,CAAI,KAAc;AAAI,IAC/C,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE;AACpB,QAAI,OAAO,EAAE,CAAC;AACd,KAAG;AACH,IAAE,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC;AAChD,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACR5J;AAAa;AAAI;AACf;AAAkB;AAAe;AAQnC,SAAgB,cAAc,CAA8B,EAAE,KAAK,EAAE,GAAG,EAA8B;AAAI,IACxG,IAAI,KAAK,CAAC,GAAG,CAAC;AAAE,QAAA,OAAO,iBAAiB,CAAC,KAAK,CAAC,CAAC;AAClD;AAAqB,UAAb,QAAQ,GAAG,KAAK,CAAC,QAAQ;AACjC;AAAqB,QAAf,WAAW,GAAG,EAAE;AACtB,IACE,KAAK,MAAM,EAAE,IAAI,KAAK,CAAC,GAAG,EAAE;AAC9B,QAAI,IAAI,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,KAAK,EAAE;AACpC,YAAM,WAAW,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;AACrC,SAAK;AACL,KAAG;AACH;AACoB,UAAZ,QAAQ,qBACT,KAAK,IACR,QAAQ,EAAE,WAAW,EACrB,GAAG,EAAE,KAAK,CAAC,GAAG,CAAC,MAAM;AAAM;AAA8B;AAGrD;AAAY,QAHM,OAAO,IAAI,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,KAAK,EAAC,GAClE;AACH,IACE,IAAI,cAAc,CAAC,KAAK,CAAC,EAAE;AAC7B,QAAI,QAAQ,CAAC,MAAM,GAAG,mBAAmB,CAAC,QAAQ,CAAC,CAAC;AACpD,KAAG;AACH,IACE,OAAO,QAAQ,CAAC;AAClB,CAAC;AACD;AACY;AACT;AAAe;AAAoB;AAAe;AAArD,SAAgB,iBAAiB,CAAI,KAAyB;AAAI,IAChE,yBACK,KAAK,IACR,QAAQ,EAAE,EAAE,EACZ,GAAG,EAAE,EAAE,EACP,MAAM,EAAE,kBAAkB,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,IAAI,IACpD;AACJ,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAa;ACxC7K,MAAa,uBAAuB;AAAQ;AAEnC;AAF8B,0BACpC;AACH,IAAI,QAAQ,EAAE,EAAE;AAChB,IAAI,GAAG,EAAE,EAAE;AACX,IAAI,OAAO,EAAE,IAAI;AACjB,IAAI,KAAK,EAAE,IAAI;AACf,CAAG,GAAgB,CAAA;AACnB;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAa;AAAI;AAAkB;AAAkB;AAAe;ACKpO,SAAgB,cAAc,CAA8B,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,YAAY,EAAE,eAAe,EAAE,UAAU,EAA8B;AACxJ;AAAqB,UAAb,eAAe,GAAG,EAAE;AAC5B;AACoB,QAAd,eAAe,GAAG,KAAK;AAC7B;AAAqB,QAAf,UAAc;AACpB,IACE,KAAK,MAAM,EAAE,IAAI,GAAG,EAAE;AACxB;AACI,QAAA,IAAI,SAAS,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC,KAAK,KAAK,EAAE;AACjD,YAAM,SAAS;AACf,SAAK;AACL;AACwB,cAAd,SAAS,GAAG,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC;AACxC;AACO,YADC,QAAQ;AAChB,QAAI,IAAI,UAAU,CAAC,YAAY,CAAC,EAAE;AAClC,YAAM,QAAQ,GAAG,UAAU,CAAC,UAAU,CAAC,GAAG,UAAU,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC;AACxG,SAAK;AAAC,aAAK;AACX,YAAM,QAAQ,GAAG,YAAY,CAAC;AAC9B,SAAK;AACL;AACwB,cAAd,WAAW,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,KAAK,SAAS,CAAC,KAAK,CAAC;AAC9F;AACG,YADK,SAAY;AACpB,QAAI,UAAU,GAAG,EAAE,CAAC;AACpB,QACI,IAAI,WAAW,EAAE;AACrB,YAAM,eAAe,GAAG,IAAI,CAAC;AAC7B,YAAM,UAAU,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;AACnC,SAAK;AACL;AAEG,cADO,MAAM,qBACP,SAAS,EACT,QAAQ,CACZ;AACL,QACI,IAAI,aAAa,CAAC,SAAS,CAAC,EAAE;AAClC,YAAM,SAAS,GAAG,MAAM,CAAC;AACzB,SAAK;AAAC,aAAK;AACX;AACM;AACM;AAEV;AAAsB;AACM;AACM;AACM;AACM;AAGzC;AAAgB,YADjB,IAAI,aAAa,CAAC,QAAQ,CAAC,EAAE;AACnC,gBAAQ,SAAS,GAAG,IAAI,oBAAC,SAAS,IAAS,WAAW,CAAC,MAAM,CAAC,CAAC;AAC/D,aAAO;AAAC,iBAAK;AACb,gBAAQ,SAAS,GAAG,IAAI,oBAAC,QAAQ,IAAS,WAAW,CAAC,MAAM,CAAC,CAAC;AAC9D,aAAO;AACP,SAAK;AACL,QACI,eAAe,CAAC,UAAU,CAAC,GAAG,eAAe,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;AACxE,KAAG;AACH;AACoB,QAAd,UAAU,GAAG,KAAK,CAAC,GAAG;AAC5B;AAAqB,QAAf,aAAa,GAAG,KAAK,CAAC,QAAQ;AACpC,IACE,IAAI,eAAe,EAAE;AACvB,cAAU,CAAC,EAAE,CAAC,GAAG,GAAG;AACpB,cAAU,mBAAiD,EAA/C,OAAI,EAAJ,sBAAmB,EAAE,0DAAO;AAAE,QACtC,aAAa,GAAG,IAAI,CAAC;AACzB,QAAI,UAAU,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG;AAAM;AAA8B;AAGlE;AACC,QAJ8B,OAAO,KAAK,OAAO,KAAK,EAAE,GAAG,UAAU,GAAG,OAAO,CAAC,EAAC,CAAC;AACnF,KAAG;AACH,IACE,yBACK,KAAK,IACR,QAAQ,oBACH,aAAa,EACb,eAAe,GAEpB,GAAG,EAAE,UAAU,IACf;AACJ,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAa;AAAI;AAAoB;AAAe;AC1FpN,SAAgB,WAAW,CAAC,KAAU;AAAI,IACxC,OAAO,KAAK,KAAK,SAAS,CAAC;AAC7B,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAsB;AAAwB,ICH5M,MAAG;AACL,IAAE,MAAG;AACL,IAAE,SAAM;AACR,IAAE,SAAM;AACP;AAEA;AACE;AAGA;AAAgD;AAAgD;AAAC;AAAI;AAAkC;AAAqH;AAAI;ACXnQ,MAAa,cAAc,GAAG,IAAI;AAClC;AAAC;AAAQ;AAAI;AAAG;AAA+C;AAAG;AAAa;AAAG;AAAiE;AAAG;AAAsC;AAAkE;AAAqB;AAAgB;AAAO;AAAK;AAAG;AAAG;AAAmC;ACuCxV,MAAa,WAA+F,SAAQ,KAAQ;AAC5H;AAAQ;AACN;AAA2B;AAAQ,IAEnC,YAAY,eAA2B,EAAE,EAAY,UAAuC,EAAE;AAChG,QAAI,KAAK,mBAAM,uBAAuB,EAAE,EAAK,YAAY,GAAI,OAAO,CAAC,CAAC;AACtE,QAFuD,YAAO,GAAP,OAAO,CAAkC;AAAC,QAFvF,kBAAa,GAAG,IAAI,OAAO,EAAwB,CAAC;AAC9D,KAGG;AACH;AAEC;AAAQ;AAAmB;AAAQ,IAAlC,IAAI,mBAAmB;AAAK,QAC1B,OAAO,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC;AAC7C,KAAG;AACH;AAEC;AAAQ;AACG;AAAQ,IADlB,IAAI,KAAK;AACX,QAAI,OAAO,oBAAC,IAAI,CAAC,MAAM,IAAwB,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,cAAc,CAAC;AAC7F,KAAG;AACH;AAEC;AACE;AAEH;AAAO;AAEF;AAAO;AACE;AACE;AAGT;AAAO;AAA2B;AAA2B;AACpE;AAAQ,IADN,GAAG,CAAC,QAAiC,EAAE,UAAwC,EAAE;AACnF,QAAI,IAAI,KAAK,CAAC,QAAQ,CAAC;AAAE,YAAA,OAAO;AAChC,QACI,KAAK,EAAE,IAAI,SAAS,CAAC,YAAY,CAAC,CAAC;AACvC;AACwB,cAAd,cAAc,GAAG,IAAI,CAAC,iBAAiB,KAAK,WAAW,CAAC,SAAS,CAAC,iBAAiB;AAC7F,QACI,IAAI,CAAC,SAAS;AAAM;AACF;AACd;AACH,QAHc,KAAK;AACxB;AAA6B,kBAAjB,QAAQ,GAAG,WAAW,CAAC;AACnC,gBAAQ,KAAK;AACb,gBAAQ,QAAQ;AAChB,gBAAQ,KAAK,EAAE,IAAI,CAAC,KAAK;AACzB,gBAAQ,YAAY,EAAE,IAAI,CAAC,iBAAiB;AAC5C,gBAAQ,cAAc;AACtB,aAAO,CAAC;AACR,YACM,IAAI,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,KAAK,EAAE;AACnD,gBAAQ,oBAAC,QAAQ,IAAS,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC;AACpD,aAAO;AACP,YACM,OAAO,QAAQ,CAAC;AACtB,SAAK,EAAC,CAAC;AACP,QACI,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;AACjD,QACI,IAAI,IAAI,CAAC,iBAAiB,EAAE,EAAE;AAClC,YAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC9B,SAAK;AACL,QACI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;AACxE,KAAG;AACH;AAEC;AACE;AACE;AAEF;AAAO;AACE;AACE;AAEH;AAAO;AAEJ;AAA2B;AAA2B;AAAmB;AACjF,IADJ,GAAG,CAAC,QAA6B,EAAE,UAA8B,EAAE,OAAO,EAAE,KAAK,EAAE;AACrF;AAAyB,cAAf,UAAU,GAAG,WAAW,CAAC,QAAQ,CAAC;AAC5C,QACI,IAAI,OAAO,CAAC,UAAU,CAAC;AAAE,YAAA,OAAO;AACpC;AACwB,cAAd,IAAI,GAAG,WAAW,CAAC;AAC7B,YAAM,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE;AAC1B,YAAM,YAAY,EAAE,IAAI,CAAC,iBAAiB;AAC1C,YAAM,QAAQ,EAAE,UAAU;AAC1B,YAAM,KAAK,EAAE,IAAI,CAAC,KAAK;AACvB,YAAM,OAAO;AACb,SAAK,CAAC;AACN,QACI,IAAI,IAAI,EAAE;AACd,YAAM,KAAK,EAAE,IAAI,SAAS,CAAC,YAAY,CAAC,CAAC;AACzC,YAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;AAC9C,YACM,IAAI,CAAC,SAAS;AAAM;AAEjB;AAAgB,YAFJ,MAAM,IAAI,CAAC,QAAQ,EAAC,CAAC;AAC1C,YACM,IAAI,IAAI,CAAC,iBAAiB,EAAE,EAAE;AACpC,gBAAQ,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;AACpC,aAAO;AACP,YACM,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;AAC7E,SAAK;AACL,KAAG;AACH;AAEC;AAGE;AAEa;AAAmB;AAC5B,IAmBL,MAAM,CACJ,cAAgH,EAChH,YAAiF;AAClF,QACC,IAAI,WAAW,CAAC,YAAY,CAAC,EAAE;AACnC,YAAM,KAAK,CAAC,MAAM,oBAAC,cAAc,GAAe,CAAC;AACjD,YAAM,OAAO;AACb,SAAK;AACL;AAAyB,YAAjB,GAAG,GAAa,EAAE;AAC1B,QACI,IAAI,UAAU,CAAC,cAAc,CAAC,EAAE;AACpC;AACM,YAAA,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM;AAAM;AAA6B;AAA2B;AAAgB,YAA7E,EAAE,IAAI,oBAAC,cAAc,IAAuC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC;AAC5G,SAAK;AAAC,aAAK;AACX;AACM,YAAA,GAAG,GAAG,KAAK,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,WAAW,oBAAC,cAAc,GAAoB,CAAC;AAC9F,SAAK;AACL,QACI,IAAI,OAAO,CAAC,GAAG,CAAC;AAAE,YAAA,OAAO;AAC7B,QACI,KAAK,EAAE,IAAI,SAAS,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;AAC/C,QAAI,IAAI,CAAC,SAAS;AAAM;AAEvB;AAAuB;AACf,QAHU,KAAK,IAClB,cAAc,CAAC;AACrB,YAAQ,KAAK,EAAE,IAAI,CAAC,KAAK;AACzB,YAAQ,GAAG;AACX,YAAQ,eAAe,EAAE,IAAI,CAAC,oBAAoB;AAClD,YAAQ,KAAK;AACb,YAAQ,YAAY;AACpB,YAAQ,UAAU,EAAE,IAAI,CAAC,WAAW;AACpC,SAAO,CAAC,EACH,CAAC;AACN,QACI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;AACjE,KAAG;AACH;AAEC;AACE;AAEH;AAAO;AAEF;AAAO;AACE;AACE;AAGT;AAAO;AACK;AAA2B;AAA2B;AAAmB;AAAQ,IAAlG,MAAM,CAAC,GAAoB,EAAE,QAA2F,EAAE,UAAuC,EAAE;AACrK;AAAyB,cAAf,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC;AACpC;AAAyB,cAAf,SAAS;AAAQ;AAA+B;AAAuB;AACvE,QADY,QAAQ;AAAS;AAAyB;AAC5D;AAAY,QADkB,EAAE,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,KAAK,QAAQ,CAAA,CAAA;AACjF;AAAyB,cAAf,YAAY,GAAG,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC;AACtD;AAAyB,cAAf,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AACrD;AAAyB,cAAf,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG;AAAM;AAC5C;AAAuB;AAAY,QADI,EAAE;AAC/D;AAA6B,gBAAnB,MAAM,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,QAAQ,oBAAC,EAAE,GAAe,GAAG,QAAQ;AAC/E;AAA6B,kBAAjB,MAAM,yCAAS,MAAM,OAAiB,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,GAAE;AACpE,YAAM,IAAI,YAAY,EAAE;AACxB,gBAAQ,OAAO,IAAI,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;AAC7C,aAAO;AACP,YAAM,OAAO,MAAM,CAAC;AACpB,SAAK,EAAC;AACN;AAEG,QAAC,IAAI,CAAC,MAAM,oBAAC,SAAS,uBAAS,QAAQ,GAAQ,CAAC;AACnD,QAAI,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;AAC1B,QAAI,KAAK,EAAE,IAAI,SAAS,CAAC,eAAe,CAAC,CAAC;AAC1C,KAAG;AACH;AAEC;AACE;AAEH;AAAO;AAEF;AAAO;AAEH;AAAO;AACE;AAGT;AAAO;AAA2B;AAA2B;AAAmB;AAAQ,IAA/F,UAAU,CAAC,QAAsB,EAAE,UAA0D,EAAE;AACjG;AACA,cADU,QAAQ,GAAG,EAAE;AACvB;AAAyB,cAAf,UAAU,GAAG,EAAE;AACzB;AAAyB,cAAf,eAAe,GAAG,EAAE;AAC9B;AAEG,QAAC,KAAK,MAAM,MAAM,IAAI,QAAQ,EAAE;AACnC;AAA6B,kBAAjB,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC;AAC/D;AAA6B,kBAAjB,EAAE,GAAG,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC;AAC7C,YAAM,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAE;AACxC;AAAiC,sBAAnB,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC;AAC/C;AAAiC,sBAAnB,MAAM,qBAAQ,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAK,gBAAgB,CAAE;AAC7E;AAAiC,sBAAnB,IAAI,GAAG,OAAO,CAAC,SAAS,GAAG,IAAI,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,MAAM;AAC/E;AAAiC,sBAAnB,QAAQ,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,IAAI,CAAC;AAC9D;AAAiC,sBAAnB,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;AAC3C,gBAAQ,eAAe,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC;AAC3C,gBAAQ,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAChC,aAAO;AAAC,iBAAK;AACb;AAAiC,sBAAnB,SAAS,GAAG,OAAO,CAAC,SAAS,GAAG,IAAI,OAAO,CAAC,SAAS,CAAC,gBAAgB,CAAC,GAAG,gBAAgB;AACxG;AAAiC,sBAAnB,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC;AAC1D;AAAiC,sBAAnB,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;AAC3C,gBAAQ,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC9B,gBAAQ,eAAe,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC;AAC3C,aAAO;AACP,SAAK;AACL,QACI,KAAK,EAAE,IAAI,SAAS,CAAC,aAAa,CAAC,CAAC;AACxC,QACI,IAAI,CAAC,SAAS;AAAM;AAEnB;AAAuB;AAAY,QAFrB,KAAK,uBACf,KAAK,IACR,GAAG,EAAE,QAAQ,CAAC,MAAM,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,GAAG,QAAQ,CAAC,GAAG,KAAK,CAAC,GAAG,EAC9D,QAAQ,oBACH,KAAK,CAAC,QAAQ,EACd,eAAe,GAEpB,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,IAC1B,EAAC,CAAC;AACR,QACI,UAAU,CAAC,MAAM,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAClG,QAAI,QAAQ,CAAC,MAAM,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC,CAAC;AAC3F,QAAI,IAAI,QAAQ,CAAC,MAAM,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;AAC9C,YAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;AAClC,SAAK;AACL,KAAG;AACH;AAEC;AACE;AAEH;AACE;AAAO;AAEF;AAAO;AACE;AAEJ;AAAsB;AAC1B;AAAmB;AAAQ,IADjC,OAAO,CAAC,GAAQ,EAAE,QAA6B;AACjD;AAAyB,cAAf,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC;AACpC,QAAI,IAAI,OAAO,CAAC,OAAO,CAAC;AAAE,YAAA,OAAO;AACjC;AACE,YADM,QAAQ,GAAG,EAAE;AACrB,QAAI,KAAK,MAAM,EAAE,IAAI,OAAO,EAAE;AAC9B,YAAM,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;AAChC,YAAM,QAAQ,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC;AAC9B,SAAK;AACL,QAAI,KAAK,EAAE,IAAI,SAAS,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;AAChD,QAAI,IAAI,CAAC,SAAS;AAAM;AAEnB;AACK;AAAY,QAHH,KAAK,uBACf,KAAK,IACR,QAAQ,oBACH,KAAK,CAAC,QAAQ,EACd,QAAQ,KAEb,EAAC,CAAC;AACR,KAAG;AACH;AAEC;AACE;AAEH;AACE;AAAO;AAEF;AAAO;AAEJ;AAAuB;AACd;AACf;AAAQ,IAFV,IAAI,CAACC,OAAY,EAAE,EAAU;AAC/B;AAAyB,cAAf,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE;AAChC,QAAI,GAAG,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,MAAM,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,EAAE,GAAG,CAAC,MAAM,CAACA,OAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzE,QACI,KAAK,EAAE,IAAI,SAAS,CAAC,aAAa,CAAC,CAAC;AACxC,QAAI,IAAI,CAAC,SAAS;AAAM;AAEnB;AAAuB;AAAY,QAFrB,KAAK,uBACf,KAAK,IAER,QAAQ,oBACH,KAAK,CAAC,QAAQ,GAEnB,GAAG,IACH,EAAC,CAAC;AACR,KAAG;AACH;AAEC;AACsB;AAEnB;AAAQ,IAWV,MAAM,CAAC,OAAuE;AAChF,QAAI,IAAI,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC;AAAE,YAAA,OAAO;AAClC;AACwB,cAAd,QAAQ,GAAG,SAAS,CAAC,OAAO,CAAC;AACvC;AAEG;AAAyB,YAApB,GAAG,GAAoB,EAAE;AACjC,QACI,IAAI,UAAU,CAAC,OAAO,CAAC,EAAE;AAC7B,YAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM;AAAM;AAAmC;AAE7D;AAAgB,YAFK,QAAQ,IAAI,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAC,CAAC;AAC1E,SAAK;AAAC,aAAK;AACX,YAAM,GAAG,GAAG,QAAQ,GAAG,WAAW,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC;AACnD,SAAK;AACL,QACI,IAAI,OAAO,CAAC,GAAG,CAAC;AAAE,YAAA,OAAO;AAC7B,QACI,KAAK,EAAE,IAAI,SAAS,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;AAC/C,QAAI,IAAI,CAAC,SAAS;AAAM;AAA4B;AAAuB;AACvE,QADe,CAAC,KAAyB,KAAK,cAAc,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,EAAC,CAAC;AAClF,QAAI,IAAI,GAAG,KAAK,IAAI,EAAE;AACtB,YAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AAC9B,SAAK;AACL,QACI,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;AAC7B,QAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;AACjE,KAAG;AACH;AAEC;AACE;AAEH;AAAO;AAEF;AAAO;AACE;AAEd;AAAkB;AACE;AAEb;AAEH;AAED;AAAW;AAAU;AAAqC;AAAmB;AAAQ,IAAtF,YAAY,CAAC,kBAAyE;AACxF;AAAyB,cAAf,GAAG,GAAG,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC;AACxC,QAAI,KAAK,EAAE,IAAI,SAAS,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;AAC/C,QAAI,IAAI,CAAC,MAAM,CAAC,GAAG,qBAAE,kBAAkB,GAAwB,CAAC;AAChE,KAAG;AACH;AAEC;AAA8B;AAEtB;AACN,IAKD,SAAS,CAAC,WAA6C;AACzD;AAAyB,cAAf,MAAM,GAAG,iBAAiB,CAAC,WAAW,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC;AACxE,QACI,IAAI,MAAM,KAAK,SAAS,EAAE;AAC9B,YAAM,OAAO;AACb,SAAK;AACL,QACI,KAAK,EAAE,IAAI,SAAS,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;AAC/C,QAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AAC5B,KAAG;AACH;AAEC;AACE;AACE;AAEF;AAAO;AACE;AAEJ;AAAmB;AACrB;AAAmB;AAAQ,IAD/B,SAAS,CAAsB,GAAM;AACvC;AAAyB,cAAf,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC;AACpC,QAAI,IAAI,OAAO,CAAC,OAAO,CAAC;AAAE,YAAA,OAAO;AACjC;AAAyB,cAAf,UAAU,GAAG,OAAO,CAAC,KAAK;AAAM;AAAyB;AACnD;AAChB,QAFqC,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAC;AACxE,QAAI,IAAI,UAAU;AAAE,YAAA,OAAO;AAC3B,QACI,KAAK,EAAE,IAAI,SAAS,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;AAC5C,QAAI,IAAI,CAAC,SAAS;AAAM;AACF;AAAuB;AAAY,QADtC,KAAK;AACxB;AAAgB;AACE;AAAyB;AAAgB,kBAA/C,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,uBAAI,KAAK,CAAC,MAAM,GAAa,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC;AACtF,YAAM,yBACK,KAAK,IACR,MAAM,EAAE,OAAO,IACf;AACR,SAAK,EAAC,CAAC;AACP,KAAG;AACH;AAEC;AACE;AACE;AAEF;AAAO;AACE;AAEJ;AAAmB;AACxB;AAAmB;AAAQ,IAD5B,YAAY,CAAsB,GAAM;AAC1C;AAAyB,cAAf,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC;AACpC,QAAI,IAAI,OAAO,CAAC,OAAO,CAAC;AAAE,YAAA,OAAO;AACjC;AAAyB,cAAf,SAAS,GAAG,OAAO,CAAC,IAAI;AAAM;AAAyB;AACjD;AAChB,QAFmC,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAC;AACtE,QAAI,IAAI,CAAC,SAAS;AAAE,YAAA,OAAO;AAC3B,QACI,KAAK,EAAE,IAAI,SAAS,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;AAC/C,QAAI,IAAI,CAAC,SAAS;AAAM;AAEjB;AACK;AAAY,QAHL,KAAK;AACxB,YAAM,yBACK,KAAK,IACR,MAAM,EAAE,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM;AAAM;AAAwC;AAI/G;AAEa,gBANqD,SAAS,IAAI,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAC,GAAG,IAAI,IAChH;AACR,SAAK,EAAC,CAAC;AACP,KAAG;AACH;AAEC;AACE;AACE;AAEF;AAAO;AACE;AAEJ;AACE;AAAsB;AAC3B;AAAQ,IADX,YAAY,CAAsB,GAAM;AAC1C;AAAyB,cAAf,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC;AACpC;AAAyB,cAAf,YAAY;AAAQ;AAA6B;AACvD;AAAY,QADS,MAAM;AAAS;AAAyB;AACvD;AAAY,QADa,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,MAAM,CAAA,CAAA;AAC5E;AAAyB,cAAf,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;AACrD;AAAyB,cAAf,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;AACnD,QAAI,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;AAC9B,QAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;AACxB,QAAI,KAAK,EAAE,IAAI,SAAS,CAAC,eAAe,CAAC,CAAC;AAC1C,KAAG;AACH;AAEC;AACE;AAEH;AAAO;AAEF;AAAO;AACE;AACE;AAGV;AAAS;AAAO;AAEH;AAAO;AACE;AAG1B;AAAO;AACO;AACX;AAIM;AAAW;AAAO;AAAS;AAAgC;AACrD;AAAmB;AAAQ,IAD1C,aAAa,CAAC,YAAY,GAAG,EAAE,EAAE,cAA2C,EAAE;AAChF;AAAyB,cAAf,QAAQ,GAAgC,EAAE,IAAI,EAAE,MAAM,IAAI,CAAC,SAAS,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE;AACrG,QAAI,IAAI,CAAC,EAAE,GAAG,IAAI,aAAa,CAAC,YAAY,oBAAO,QAAQ,EAAK,WAAW,EAAG,CAAC;AAC/E,QAAI,OAAO,IAAI,CAAC,EAAE,CAAC;AACnB,KAAG;AACH;AAEC;AAAQ;AACK;AACb,IAFC,OAAO;AACT,QAAI,KAAK,CAAC,OAAO,EAAE,CAAC;AACpB,QAAI,IAAI,IAAI,CAAC,EAAE,YAAY,WAAW,EAAE;AACxC,YAAM,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;AACxB,SAAK;AACL,QAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;AAClC,KAAG;AACH;AAEC;AAAQ;AAAoB;AAA6B;AAAmB;AACvE,IADJ,oBAAoB,CAAC,CAAuB,EAAE,UAAe;AAAI,QAC/D,0BAAO,UAAU,GAAe;AACpC,KAAG;AACH;AAEC;AAAQ;AAA4B;AAC/B;AAAQ,IADZ,iBAAiB,CAAC,SAAc;AAAI,QAClC,0BAAO,SAAS,GAAe;AACnC,KAAG;AACH;AAEC;AAAQ;AAA4B;AAAmB;AAAQ,IAA9D,mBAAmB,CAAC,SAA+B;AAAI,QACrD,OAAO,SAAS,CAAC;AACrB,KAAG;AACH;AACO;AACN;AAAmB;AAAQ,IAD1B,IAAY,GAAG;AACjB,QAAI,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC;AAC7B,KAAG;AACH;AACO;AAAgB;AACR;AAAQ,IADrB,IAAY,QAAQ;AACtB,QAAI,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC;AAClC,KAAG;AACH;AACO;AAAgB;AACN;AAAQ,IADvB,IAAY,MAAM;AACpB,QAAI,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC;AAChC,KAAG;AACH;AACO;AAAgB;AACvB;AAAmB;AAAQ,IADjB,UAAU,CAAC,GAAoB;AACzC,QAAI,IAAI,CAAC,SAAS;AAAM;AAEjB;AACK;AACR,QAJe,KAAK;AACxB,YAAM,yBACK,KAAK,IACR,MAAM,EAAE,GAAG,IACX;AACR,SAAK,EAAC,CAAC;AACP,KAAG;AACH;AACO;AAAgB;AACnB;AAAmB;AAClB,IAFK,gBAAgB,CAAC,GAAG,GAAG,KAAK;AACtC;AAAyB,cAAf,GAAG,GAAG,IAAI,CAAC,GAAG;AACxB;AAAyB,cAAf,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,oBAAoB,CAAC;AAC3D;AACK,YADG,UAAU;AAClB;AAAyB,cAAf,QAAQ;AAAQ;AACJ;AAClB;AAAY,QAFK,EAAE;AACvB;AAA6B,kBAAjB,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;AACvC;AAA6B,kBAAjB,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,oBAAoB,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,oBAAoB;AAC9F,YAAM,uBACE,CAAC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAC9B,EAAE,EACL;AACR,SAAK,CAAA;AACL,QACI,IAAI,GAAG,EAAE;AACb,YAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM;AAAM;AAA6B;AAChE;AACG,YAF2B,EAAE,IAAI,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AAC1F,SAAK;AAAC,aAAK;AACX,YAAM,UAAU,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AACrC,SAAK;AACL,QACI,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AAC5D,KAAG;AACH;AACO;AAAgB;AACb;AAAQ,IADR,iBAAiB;AAC3B,QAAI,OAAO,IAAI,CAAC,UAAU,EAAE,IAAI,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,oBAAoB,CAAC,KAAK,KAAK,CAAC;AACpF,KAAG;AACH;AACO;AAAgB;AACpB;AAAmB;AACrB,IAFS,cAAc,CAAC,GAAa;AACtC,QAAI,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;AAC3B,YAAM,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC1B,SAAK;AACL,KAAG;AACH;AACO;AAAgB;AACN;AAAQ,IADf,UAAU;AACpB,QAAI,OAAO,IAAI,CAAC,EAAE,YAAY,aAAa,CAAC;AAC5C,KAAG;AACH,CAAC;AApYCC;AAAaA,IADZ,WAAW,EAAE;AACf;AAAyC;AAA+D;AAA4C,yCAkBlJ;AA2PDA;AAAaA,IADZ,WAAW,EAAE;AACf;AAAyC,yDAAD,CAAC,oBAAD,CAAC;AACZ;AACM,+CAMjC;AAEH;AAEE;AAAI;AAAiC;AA8GvC,MAAa,aAAyC,SAAQ,WAAoB;AAClF;AAAQ;AAAgC;AAEZ;AAAQ,IAAlC,YAAY,YAAY,GAAG,EAAE,EAAE,cAA2C,EAAE;AAC9E,QAAI,KAAK,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;AACrC,KAAG;AACH;AAEC;AACE;AACE;AAEH;AAAO;AAEF;AAAO;AAEd;AAAkB;AACE;AAIhB;AAAS;AAAO;AAAkC;AAA2B;AAAmB;AAC9F,IADJ,qBAAqB,CAA+B,QAA4C;AAClG,QAAI,IAAI,CAAC,oBAAoB,GAAG,QAAQ,CAAC;AACzC,KAAG;AACH,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACnnB5J;AAAa;AAAI;AAAe;AACpB;AAA6B;AAC7B;AAAe;AAO3B,SAAgB,IAAI,CAAI,UAAe,EAAE,cAAmC,EAAE,KAAa;AAC3F;AACA,UADQ,MAAM,GAAG,EAAE;AACnB,IAAE,IAAI,UAAU,CAAC,cAAc,CAAC,EAAE;AAClC,QAAI,KAAK,MAAM,MAAM,IAAI,UAAU,EAAE;AACrC,YAAM,IAAI,cAAc,CAAC,MAAM,CAAC,KAAK,IAAI,EAAE;AAC3C,gBAAQ,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC5B,aAAO;AACP,SAAK;AACL,KAAG;AAAC,SAAK;AACT;AAAyB,cAAf,KAAK,GAAG,WAAW,CAAC,cAAc,CAAC,CAAC,MAAM;AAAM;AAA0B;AAExE;AAAuB;AAC3B,QAH6C,CAAC,GAAG,EAAE,OAAO,KAAK,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,GAAE,IAAI,GAAG,EAAE,CAAC;AACnG,QACI,KAAK,MAAM,MAAM,IAAI,UAAU,EAAE;AACrC,YAAM,IAAI,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;AACpC,gBAAQ,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC5B,aAAO;AACP,SAAK;AACL,KAAG;AACH,IACE,OAAO,MAAM,CAAC;AAChB,CAAC;AACD;AACY;AACT;AAAe;AAAe;AAAjC,SAAgB,6BAA6B;AAAK,IAChD,OAAO,oBAAoB;AAAM;AAAiC;AAC7C;AAAmB;AACxC,IAF4B,CAAC,cAAmB,EAAE,iBAAsB;AAC1E,QAAI,IAAI,cAAc,KAAK,iBAAiB,EAAE;AAC9C,YAAM,OAAO,IAAI,CAAC;AAClB,SAAK;AACL,QACI,IAAI,OAAO,CAAC,cAAc,CAAC,KAAK,KAAK,IAAI,OAAO,CAAC,iBAAiB,CAAC,KAAK,KAAK,EAAE;AACnF,YAAM,OAAO,KAAK,CAAC;AACnB,SAAK;AACL,QACI,IAAI,OAAO,CAAC,cAAc,CAAC,IAAI,OAAO,CAAC,iBAAiB,CAAC,EAAE;AAC/D,YAAM,OAAO,IAAI,CAAC;AAClB,SAAK;AACL;AAEG;AAAyB,cAAlB,UAAU,GAAG,SAAS,CAAC,iBAAiB,EAAE,cAAc,CAAC;AACnE,QACI,IAAI,UAAU,EAAE;AACpB,YAAM,OAAO,KAAK,CAAC;AACnB,SAAK;AACL;AACwB,cAAd,2BAA2B,GAAG,SAAS,CAAC,cAAc,EAAE,iBAAiB,CAAC;AACpF;AAEG,QAAC,OAAO,2BAA2B,KAAK,KAAK,CAAC;AACjD,KAAG,EAAC,CAAC;AACL,CAAC;AACD;AACY;AACT;AAAe;AAAoB;AAC5B;AAAe;AADzB,SAAS,SAAS,CAAI,KAAU,EAAE,MAAW;AAC7C;AAAqB,UAAb,SAAS,GAAG,MAAM,CAAC,IAAI;AAAM;AACnB;AAAmB;AAAQ,IADb,WAAW;AAC3C;AAAyB,cAAf,OAAO,GAAG,KAAK,CAAC,IAAI;AAAM;AAA+B;AAC/C;AAAY,QADD,QAAQ,IAAI,QAAQ,KAAK,WAAW,EAAC;AACpE,QAAI,OAAO,OAAO,KAAK,SAAS,CAAC;AACjC,KAAG,EAAC;AACJ,IACE,OAAO,SAAS,CAAC;AACnB,CAAC;AACD;AACG;AACW;AAEJ;AAEM;AAAe;AAqB/B,SAAgB,SAAS,CAAI,cAA4C,EAAE,KAAc;AAAI,IAC3F;AAAY;AAAyB;AAC1B;AAAQ,IADZ,UAAS,MAAuB;AACzC,QAAI,OAAO,MAAM,CAAC,IAAI,CAChB,GAAG;AAAM;AAAiC;AAC7B;AAAY,QADrB,CAAC,UAAkC;AAC7C;AACI,YAAI,IAAI,OAAO,CAAC,UAAU,CAAC,KAAK,KAAK,EAAE;AAC3C,gBAAU,OAAO,UAAU,CAAC;AAC5B,aAAS;AACT,YAAQ,OAAO,IAAI,CAAC,UAAU,EAAE,cAAc,EAAE,KAAK,IAAI,cAAc,CAAC,CAAC;AACzE,SAAO,EAAC,EACF,6BAA6B,EAAE,EAC/B,GAAG;AAAM;AACO;AACjB;AAAY,QAFP,KAAK;AACf,YAAQ,IAAI,OAAO,CAAC,KAAK,CAAC,KAAK,KAAK,EAAE;AACtC,gBAAU,OAAO,KAAK,CAAC;AACvB,aAAS;AACT,YACQ,IAAI,OAAO,CAAC,cAAc,CAAC,IAAI,UAAU,CAAC,cAAc,CAAC,EAAE;AACnE,gBAAU,OAAO,KAAK,CAAC;AACvB,aAAS;AACT,YACQ,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;AACxB,SAAO,EAAC,CACH,CAAC;AACN,KAAG,EAAC;AACJ,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAsB;AAAgB,ICxHpM,KAAM,KAAK;AACb,IAAE,MAAO,MAAM;AACd;AAEA;AACA;AAAI;AAAkB;AAAqB;AAAe;AAA3D,SAAgB,aAAa,CAAC,GAAG,EAAE,QAAe,KAAK,CAAC,GAAG;AAC3D,IAAE;AAAY;AACN;AAAoB;AAAmB;AAAQ,IAD9C,UAAS,CAAC,EAAE,CAAC;AACtB,QAAI,IAAI,CAAC,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;AAC1D,YAAM,OAAO,CAAC,CAAC;AACf,SAAK;AACL;AACwB,cAAd,IAAI,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,KAAK,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC;AAC3E;AAAyB,cAAf,IAAI,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,KAAK,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC;AAC3E;AAEA,YADQ,UAAU,GAAG,CAAC;AACtB,QAAI,IAAI,IAAI,GAAG,IAAI,EAAE;AACrB,YAAM,UAAU,GAAG,CAAC,CAAC;AACrB,SAAK;AAAC,aAAK,IAAI,IAAI,GAAG,IAAI,EAAE;AAC5B,YAAM,UAAU,GAAG,CAAC,CAAC,CAAC;AACtB,SAAK;AACL,QAAI,OAAO,KAAK,IAAI,KAAK,CAAC,IAAI,GAAG,UAAU,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC;AAC9D,KAAG,EAAC;AACJ,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACvB5J;AAAa;AAAI;AAAkB;AACvB;AAAsB;AACzB;AAGT,SAAgB,eAAe,CAA2B,KAAQ,EAAE,OAAyB;AAAI;AAEjG,QADM,GAAG,GAAG,EAAE;AACd,UAAQ,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,KAAK;AACjC,UAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,OAAO;AAC5D,IACE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACvC;AAAyB,cAAf,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACnC,QAAI,IAAI,CAAC,QAAQ,EAAE;AACnB,YAAM,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACvB,YAAM,SAAS;AACf,SAAK;AACL;AACwB,cAAd,OAAO,GAAG,WAAW,CAAC,QAAQ,CAAC;AACzC;AAAyB,cAAf,OAAO,GAAG,OAAO,CAAC,KAAK;AAAM;AAC/B;AACI;AACZ,QAHkC,EAAE,IAAI,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC;AACtD,QAAI,IAAI,OAAO,EAAE;AACjB,YAAM,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACvB,SAAK;AACL,KAAG;AACH,IACE,IAAI,MAAM,EAAE;AACd;AAAyB,YAAjB,OAAO,GAAQ,UAAU,CAAC,MAAM,CAAC,GAAG,MAAM,GAAG,aAAa,CAAC,MAAM,EAAE,WAAW,CAAC;AACvF,QAAI,GAAG,GAAG,GAAG,CAAC,IAAI;AAAM;AAAwB;AAGjC;AAAuB;AAAY,QAH/B,CAAC,CAAC,EAAE,CAAC,KAAK,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,EAAC,CAAC;AACnD,KAAG;AACH;AACoB,UAAZ,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,MAAM,CAAC;AAC5D,IACE,OAAO,MAAM,KAAK,GAAG,CAAC,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;AAC5D,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACjC5J;AAAa;AAAI;AACf;AAAoB;AAAsB;AAG5C;AAAA,SAAgB,aAAa,CAA8B,KAAQ,EAAE,OAAO;AAC5E;AACG,UADKC,MAAG,GAAG,EAAE;AAChB,UAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,OAAO;AACvC,UAAQ,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,KAAK;AACjC,IACE,IAAI,CAAC,QAAQ,IAAI,CAAC,OAAO,EAAE;AAC7B,QAAI,OAAO,QAAQ,CAAC;AACpB,KAAG;AACH;AAAqB,UAAb,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,KAAK;AAC3C,IACE,IAAI,QAAQ,IAAI,QAAQ,EAAE;AAC5B;AACM,YADE,KAAK,GAAG,CAAC;AACjB,QAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;AAC1D,YAAM,IAAI,KAAK,KAAK,OAAO;AAAE,gBAAA,MAAM;AACnC;AACI,kBADQ,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;AACvB;AAA6B,kBAAjB,MAAM,GAAG,QAAQ,CAAC,EAAE,CAAC;AACjC;AAA6B,kBAAjB,OAAO,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC,KAAK;AAAM;AAC3C;AACM;AACV,YAH0C,EAAE,IAAI,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC;AACtE,YAAM,IAAI,OAAO,EAAE;AACnB,gBAAQA,MAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;AACzB,gBAAQ,KAAK,EAAE,CAAC;AAChB,aAAO;AACP,SAAK;AACL,KAAG;AAAC,SAAK;AACT;AAAyB,cAAf,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,MAAM,CAAC;AACnE,QACI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;AAC1C;AACI,kBADQ,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;AACvB;AAA6B,kBAAjB,MAAM,GAAG,QAAQ,CAAC,EAAE,CAAC;AACjC,YACM,IAAI,CAAC,QAAQ,EAAE;AACrB,gBAAQA,MAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;AACzB,gBAAQ,SAAS;AACjB,aAAO;AACP;AAC4B,kBAAhB,OAAO,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC,KAAK;AAAM;AAC3C;AACM;AAElB,YAJkD,EAAE,IAAI,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC;AACtE,YAAM,IAAI,OAAO,EAAE;AACnB,gBAAQA,MAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;AACzB,aAAO;AACP,SAAK;AACL,KAAG;AACH,IACE,OAAOA,MAAG,CAAC;AACb,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAa;AAAI;AAAoB;AAAe;AC/CpN,SAAgB,QAAQ,CAAC,KAAU;AAAI,IACrC,OAAO,OAAO,KAAK,KAAK,QAAQ,CAAC;AACnC,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACJ5J;AAAa;AAAI;AAAe;AACrB;AAAuB;AACxB;AAGV,SAAgB,qBAAqB,CAAI,SAA2B,EAAE,QAAQ;AAC9E,IAAI,KAAI,MAAM,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;AACjD,QAAM,IAAG,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,KAAK,IAAI,EAAE;AACjD,YAAQ,OAAO,QAAQ,CAAC;AACxB,SAAO;AACP,KAAK;AACL,IACI,OAAO,SAAS,CAAC;AACrB,CAAC;AACD;AACY;AACT;AAAiB;AAAsB;AAC5B;AADd,SAAgB,SAAS,CAAE,EAAE,EAAE,OAAO;AAAI,IACxC;AAAY;AACH;AAAmB;AAE1B,IAHK,UAAS,QAAQ;AAC1B;AAAyB,cAAf,MAAM,GAAG,QAAQ,CAAC,EAAE,CAAC;AAC/B,QACI,IAAG,WAAW,CAAC,MAAM,CAAC,EAAE;AAC5B,YAAM,OAAO,SAAS,CAAC;AACvB,SAAK;AACL,QACI,IAAG,CAAC,OAAO,EAAE;AACjB,YAAM,OAAO,MAAM,CAAC;AACpB,SAAK;AACL,QACI,IAAG,QAAQ,CAAC,OAAO,CAAC,EAAE;AAC1B,YAAM,OAAO,MAAM,CAAC,OAAO,CAAC,CAAC;AAC7B,SAAK;AACL,QACI,OAAO,oBAAC,OAAO,IAAc,MAAM,CAAC,CAAC;AACzC,KAAG,EAAC;AACJ,CACC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAa;AAAI;AAAkB;AAAkB;AAAyB;AAAe;ACnC7P,SAAgB,gBAAgB,CAAO,GAAQ,EAAE,UAAsD;AACvG,IAAE,OAAO,GAAG,CAAC,MAAM;AAAM;AAAyB;AAC/B;AAAwB;AACzB;AACV;AAAQ,IAHI,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK;AAChD;AAAyB,cAAf,GAAG,GAAG,UAAU,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;AAC/C,QAAI,IAAI,GAAG,KAAK,SAAS,EAAE;AAC3B,YAAM,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACvB,SAAK;AACL,QAAI,OAAO,MAAM,CAAC;AAClB,KAAG,GAAE,EAAE,CAAC,CAAC;AACT,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;ACChK,MAAa,cAAc,GAAG,kBAAkB;AAChD;AACG;AAAe;AAAuB;AAAe;AAAxD,SAAgB,WAAW,CAAI,QAA+B;AAC9D,IAAE;AAAY;AACb;AAAmB;AAAQ,IADnB,UAAS,WAAqB;AACvC,QAAI,WAAW,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC;AACrC,QAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACxE;AACE,kBADU,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;AACzB,YAAM,WAAW,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;AACvD,SAAK;AACL,KAAG,EAAC;AACJ,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACtB5J;AAAI;AAAe;AAElB;AAAe;AAAhB,SAAgB,WAAW,CAAI,WAAkB;AACjD,IAAE;AAAY;AAAmB;AAClB;AAA4B;AAC3B;AAAQ,IAFf,UAAa,SAAS,EAAE,SAAS;AAC1C;AAAyB,cAAf,KAAK,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;AAC5C;AACI,QAAA,OAAO,WAAW,CAAC,IAAI;AAAM;AAE7B;AAAuB;AAAY,QAFX,SAAS;AACrC,YAAM,IAAG,KAAK,EAAE;AAChB,gBAAQ,OAAO,SAAS,CAAC,SAAS,CAAC,KAAK,SAAS,CAAC,SAAS,CAAC,CAAC;AAC7D,aAAO;AACP,YAAM,OAAO,SAAS,CAAC,SAAS,CAAC,KAAK,SAAS,CAAC,SAAS,CAAC,CAAC;AAC3D,SAAK,EAAC,KAAK,KAAK,CAAC;AACjB,KAAG,EAAC;AACJ,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACZ5J;AAAI;AAAe;AASnB,MAAa,KAAK;AAAG;AAChB;AACS;AAAQ,IAEpB,YAAsB,KAAe;AACvC,QADwB,UAAK,GAAL,KAAK,CAAU;AAAC,QACpC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;AAC3B,QAAI,IAAI,KAAK,EAAE,EAAE;AACjB;AACM,YAAA,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;AAC1C,SAAK;AACL,KAAG;AACH;AAEC;AAAmB;AAEb;AAEA;AAAQ,IAYb,MAAM,CAAI,OAA2E;AAAI;AAAyB,YAC5G,KAAK;AACb,QAAI,IAAI,UAAU,CAAC,OAAO,CAAC,EAAE;AAC7B,YAAM,KAAK,GAAG,OAAO,CAAC;AACtB,SAAK;AAAC,aAAK,IAAI,QAAQ,CAAC,OAAO,CAAC,EAAE;AAClC,YAAM,KAAK;AAAQ;AACP;AAA2B;AACzB,YAFA,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,CAAA,CAAC;AACtC,SAAK;AAAC,aAAK,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;AACvC,YAAM,0BAAO,IAAI,CAAC,KAAK;AACvB,iBAAS,OAAO;AAAM;AAEhB;AAA2B;AAAgB,YAFhC,KAAK,IAAI,KAAK,EAAC;AAChC,iBAAS,IAAI,CACH,oBAAoB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,EAC1C,GAAG;AAAM;AACO;AACf;AAAgB,YAFb,KAAK;AACnB,gBAAY,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;AACxC,oBAAc,OAAO,oBAAC,OAAO,IAA2B,GAAG;AAAM;AAG1D;AAAmC;AACzC,oBAJ2D,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,EAAC,CAAC;AACjF,iBAAa;AACb,gBACY,OAAO,oBAAC,OAAO,IAAiB,MAAM;AAAM;AAC/B;AACR;AAEf;AACO,gBAL0C,CAAC,GAAG,EAAE,CAAC;AAC1D,oBAAc,GAAG,oBAAC,CAAC,GAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AACvC,oBAAc,OAAO,GAAG,CAAC;AACzB,iBAAa,GAAE,EAAE,CAAC,CAAC;AACnB,aAAW,EAAC,CACH,GAAQ;AACjB,SAAK;AAAC,aAAK;AACX,YAAM,KAAK;AAAQ;AAGL;AACX;AAGK,YAPM,KAAK,IAAI,KAAK,CAAA,CAAC;AAC7B,SAAK;AACL,QACI,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AACrC,KAAG;AACH;AAEC;AACE;AACE;AAEF;AAAO;AAEJ;AACD;AAAQ,IADX,aAAa;AACf,QAAI,OAAO,IAAI,CAAC,MAAM;AAAM;AAA4B;AACvD;AAGC,QAJqB,KAAK,IAAI,oBAAC,KAAK,IAA8B,OAAO,EAAC,CAAC;AAC7E,KAAG;AACH;AAEC;AACE;AACE;AAEF;AAAO;AAEJ;AAA2B;AAAmB;AAClD,IADA,WAAW;AAAK,QACd,OAAO,IAAI,CAAC,MAAM;AAAM;AAA4B;AACrD;AAGC,QAJmB,KAAK,IAAI,oBAAC,KAAK,IAA8B,KAAK,EAAC,CAAC;AAC3E,KAAG;AACH;AAEC;AACE;AACE;AAEF;AAAO;AAGT;AAAO;AACC;AAAQ,IADf,QAAQ;AAAK,QACX,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;AAC/B,KAAG;AACH;AAEC;AACE;AACE;AAEF;AAAO;AACE;AACE;AAER;AAED;AAAS;AAAmB;AAAQ,IAAvC,cAAc;AAAK,QACjB,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,YAAY,EAAE,CAAC;AAC9C,KAAG;AACH;AAEC;AACE;AACE;AAEF;AAAO;AAGT;AAAO;AACR;AAAQ,IADN,WAAW;AAAK,QACd,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC;AACrC,KAAG;AACH;AAEC;AAAQ;AAAmB;AAAQ,IAAlC,IAAI,MAAM;AAAK,QACb,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;AAC5C,KAAG;AACH,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAa;AAAI;AAAsB;AAAqB;AAAe;ACtI3O,SAAgB,aAAa,CAAC,OAAO,EAAE,MAAM;AAC7C,IAAE,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,KAAK,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC;AAC/D,IAAE,OAAO,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,KAAK,MAAM,IAAI,MAAM,CAAC,WAAW,CAAC,CAAC;AAC9E,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACL5J;AAAI;AAAG;AAEP;AAAG;AACF;AACD;AAAuB;AAAS;AAAM;AAAG;AAAG;AAAG;AACd;AA6BjC,MAAa,WAAyF,SAAQ,KAAQ;AACtH;AAAQ;AAAwB;AACX;AAAQ,IAK3B,YAAY,KAAqB,EAAU,UAA8B,EAAE;AAC7E,QAAI,KAAK,CAAC,KAAK,CAAC,CAAC;AACjB,QAF6C,YAAO,GAAP,OAAO,CAAyB;AAAC,QAE1E,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;AAC3B,KAAG;AACH;AAEC;AAA2B;AAAmB;AAE9C,IA0BC,SAAS,CACP,UAAqC;AACzC,QAAM,QAAQ,EAAE,KAAK;AACrB,KAAK;AACF,QACC,OAAO,IAAI,CAAC,MAAM;AAAM;AAA4B;AAAuB;AAE/E,QAFuB,KAAK,IAAI,KAAK,CAAC,QAAQ,EAAC,CAAC,IAAI,CAAC,GAAG;AAAM;AAAuB;AAGhF,QAHoD,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAC,CAAC,CAAC;AACtF,KAAG;AACH;AAEC;AAA2B;AAC3B;AACG,IAyBF,MAAM,CAAC,UAAqC,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,SAAS,EAAE;AAAI,QAC1G,IAAI,OAAO,CAAC,QAAQ,EAAE;AAC1B,YAAM,OAAO,aAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAC;AACrD,SAAK;AACL,QAAI,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;AACxD,QACI,OAAO,eAAe,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAC;AACrD,KAAG;AACH;AAEC;AAAmB;AAAsB;AAI1C;AAAmB;AAAQ,IAKzB,UAAU,CAAI,GAAa,EAAE,OAAmC;AAAI,QAClE,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM;AAAE,YAAA,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;AAC3C,QACI,OAAO,IAAI,CAAC,MAAM;AAAM;AAC1B;AAAuB;AAAY,QADd,KAAK,IAAI,KAAK,CAAC,QAAQ,EAAC,CAAC,IAAI,CAC9C,GAAG;AAAM;AAA+B;AAAuB;AAAY,QAAvE,QAAQ,IAAI,gBAAgB,CAAC,GAAG;AAAO;AAAyB;AAC/D;AAAY,QADqB,EAAE,IAAI,SAAS,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,QAAQ,CAAC,EAAC,EAAC,EAC9E,6BAA6B,EAAE,CAChC,CAAC;AACN,KAAG;AACH;AAEC;AAAmB;AAEnB;AAEQ;AAAmB;AACxB,IASF,YAAY,CAAI,aAAiD,EAAE,OAAwD;AAAI;AAAyB,YAClJ,EAAE,GAAG,aAAa;AAC1B,QACI,IAAI,UAAU,CAAC,aAAa,CAAC,EAAE;AACnC;AACM,YAAA,oBAAC,EAAE,MAAW,qBAAqB,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC;AACnF,SAAK;AACL,QACI,OAAO,IAAI,CAAC,MAAM;AAAM;AAC1B;AAAuB;AACvB,QAFqB,KAAK,IAAI,KAAK,CAAC,QAAQ,EAAC,CAAC,IAAI,CAC9C,GAAG,CAAC,SAAS,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,EAC3B,oBAAoB,EAAE,CACvB,CAAC;AACN,KAAG;AACH;AAEC;AACE;AACE;AAEF;AAAO;AAEJ;AAAqB;AACnB;AAAQ,IADd,SAAS,CAAC,EAAU;AAAI,QACtB,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,oBAAC,EAAE,GAAQ,CAAC;AAC/C,KAAG;AACH;AAEC;AACE;AACE;AAEF;AAAO;AAEJ;AAAmB;AAAQ,IAA/B,cAAc;AAAK,QACjB,OAAO,IAAI,CAAC,MAAM;AAAM;AAA4B;AAAuB;AAI/E,QAJuB,KAAK,IAAI,oBAAC,KAAK,IAAiC,MAAM,EAAC,CAAC;AAC/E,KAAG;AACH;AAEC;AACE;AACE;AAEF;AAAO;AAEJ;AAAmB;AACvB,IADA,WAAW;AAAK,QACd,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC;AAClC,KAAG;AACH;AAEC;AAAmB;AAER;AAEA;AAAQ,IAKlB,YAAY,CAAI,OAAmC;AAAI,QACrD,IAAI,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE;AACnC,YAAM,OAAO,IAAI,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC,SAAS;AAAM;AAA8B;AAErE;AAAgB,YAFkB,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC,EAAC,CAAC,CAAC;AACzF,SAAK;AACL,QAAI,OAAO,IAAI,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC,SAAS;AAAM;AAA0B;AAI9E;AAAY,QAJmC,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,OAAO,CAAC,EAAC,CAAC,CAAC;AACzF,KAAG;AACH;AAEC;AAAmB;AACnB,IAMC,SAAS;AAAK;AACZ,cAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE;AACvC,QAAI,IAAI,OAAO,CAAC,QAAQ,CAAC,EAAE;AAC3B,YAAM,OAAO,QAAQ,CAAC,GAAG;AAAM;AAA6B;AAEjD;AAAgB,YAFD,EAAE,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,oBAAC,EAAE,GAAQ,EAAC,CAAC;AACrE,SAAK;AACL,QAAI,OAAO,SAAS,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC;AACtE,KAAG;AACH;AAEC;AACE;AACE;AAEF;AAAO;AACE;AAEJ;AAA6B;AAAmB;AAAQ,IAA9D,WAAW,CAAC,SAA0D;AAAI,QACxE,OAAO,IAAI,CAAC,MAAM;AAAM;AAA4B;AAAuB;AAC/E,QADuB,KAAK,IAAI,KAAK,CAAC,QAAQ,EAAC,CAAC,IAAI,CAAC,GAAG;AAAM;AAAuB;AAGpF,QAHwD,MAAM,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAC,CAAC,CAAC;AAC1F,KAAG;AACH;AAEC;AACE;AACE;AAEF;AAAO;AACE;AAEJ;AAA6B;AAAmB;AAAQ,IAA9D,QAAQ,CAAC,SAA0D;AAAI,QACrE,IAAI,UAAU,CAAC,SAAS,CAAC,EAAE;AAC/B,YAAM,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC;AACpD,SAAK;AACL,QAAI,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC;AACtC,KAAG;AACH;AAEC;AACc;AAA2B;AAE7B;AAEX,IAKA,UAAU,CAAI,OAAmC;AAAI,QACnD,OAAO,IAAI,CAAC,QAAQ;AAAM;AAA0B;AAKxD;AAAY,QALa,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,GAAE,OAAO,CAAC,CAAC;AAC9D,KAAG;AACH;AAEC;AACc;AAA2B;AAE9B;AAEX,IAKC,WAAW,CAAI,OAAmC;AAAI,QACpD,OAAO,IAAI,CAAC,QAAQ;AAAM;AAG7B;AAEY;AAAY,QALA,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,GAAE,OAAO,CAAC,CAAC;AACjD,KAAG;AACH;AAEC;AACqB;AAEjB;AAAQ,IAUX,kBAAkB,CAAC,MAAsB;AAAI,QAC3C,IAAI,WAAW,CAAC,MAAM,CAAC,EAAE;AAC7B,YAAM,OAAO,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC;AAC5C,SAAK;AACL,QAAI,OAAO,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,IAAI,CACxC,MAAM;AAAM;AACf;AAAuB;AACpB,QAFO,EAAE,IAAI,EAAE,CAAC,IAAI,KAAK,MAAM,EAAC,EAChC,GAAG;AAAM;AAIf;AACiB;AAAY,QALnB,MAAM,IAAI,MAAM,CAAC,GAAG,EAAC,CAC1B,CAAC;AACN,KAAG;AACH;AAEC;AAAgC;AAErB;AAEX,IASC,SAAS,CAAC,YAAoE;AAAI,QAChF,IAAI,KAAK,CAAC,YAAY,CAAC,EAAE;AAC7B,YAAM,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;AAC5C,SAAK;AACL,QACI,IAAI,UAAU,CAAC,YAAY,CAAC,EAAE;AAClC,YAAM,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAC9C,SAAK;AACL,QACI,IAAI,OAAO,CAAC,YAAY,CAAC,EAAE;AAC/B,YAAM,OAAO,YAAY,CAAC,KAAK;AAAM;AAA6B;AAG5D;AAAgB,YAHU,EAAE,IAAI,oBAAC,EAAE,OAAY,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAC,CAAC;AAC/E,SAAK;AACL,QACI,OAAO,oBAAC,YAAY,OAAY,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC;AAC7D,KAAG;AACH;AAEC;AACE;AACE;AAEF;AAAO;AACE;AAGT;AAAO;AAAsB;AACjB;AAAQ,IADrB,SAAS,CAAC,EAAW;AAAI;AACX,cAAN,MAAM,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM;AACzC;AAAyB,cAAf,YAAY,GAAG,SAAS,CAAC,EAAE,CAAC;AACtC,QAAI,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;AAC/B,YAAM,IAAI,YAAY,EAAE;AACxB,gBAAQ,OAAO,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AACnC,aAAO;AACP,YAAM,OAAO,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;AAC/B,SAAK;AACL,QAAI,OAAO,YAAY,GAAG,MAAM,KAAK,EAAE,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;AAC5D,KAAG;AACH;AAEC;AACE;AAEH;AAAO;AAGP;AAAO;AAAO;AACE;AAEH;AAAO;AACE;AACE;AAInB;AACK;AAAO;AACX;AAAmB;AAAQ,IAD/B,aAAa;AACf,QAAI,IAAI,CAAC,EAAE,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;AACnD,KAAG;AACH;AACO;AAAgB;AAAmB;AAAwB;AAA2B;AAC5E;AAAQ,IADf,QAAQ,CAAI,KAAgC,EAAE,OAAmC;AAC3F,QAAI,OAAO,IAAI,CAAC,MAAM;AAAM;AAA4B;AAErD;AAAY,QAFQ,KAAK,uBAAI,KAAK,CAAC,GAAG,EAAS,EAAC,CAAC,IAAI,CAClD,GAAG,CAAC,KAAK,CAAC,EACV,oBAAoB,EAAE,EACtB,SAAS;AAAM;AAAyB;AACzC;AAIF,QALa,CAAC,EAAU,KAAK,IAAI,CAAC,YAAY,CAAC,EAAE,EAAE,OAAO,CAAC,EAAC,CAC1D,CAAC;AACN,KAAG;AACH,CAAC;AACD;AACY;AACT;AAAiC;AAApC,MAAa,aAAyC,SAAQ,WAAoB;AAClF;AAAQ;AACC;AAAQ,IADf,YAAY,KAAK;AACnB,QAAI,KAAK,CAAC,KAAK,CAAC,CAAC;AACjB,KAAG;AACH,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACjZ5J;AAAI;AAAa;AAAG;AACA;AAEpB;AAKA,MAAa,SAAS;AAAQ;AAAe;AAAqB;AAAe;AAAxD,CAAI,MAAwC,KAAK,MAAM,CAAC,IAAI,CAAC,MAAM;AAAM;AAAoB;AAAe;AAAxC,CAAC,KAAK,KAAyC,KAAK,KAAK,IAAI,IAAI,OAAO,KAAK,KAAK,WAAW,EAAC,CAAC,CAAA;AAC5L;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAI;AAAc;AAAG;AAAa;AAAG;AAA+B;AAAG;AAAkB;AAAmB;AAAe;ACF3R,SAAgB,QAAQ,CAAE,GAAQ,EAAE,IAAY;AAAI;AAEnD,IAAC,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,CAAC,EAAG;AACrC,QAAI,OAAO,GAAG,CAAC;AACf,KAAG;AACH;AAAqB,UAAb,eAAe,GAAG,IAAI;AAC9B,SAAK,KAAK,CAAC,GAAG,CAAC;AACf,SAAK,KAAK,CAAC,CAAC,CAAC;AACb,SAAK,IAAI,CAAC,GAAG,CAAC;AACd,IAAE,OAAO,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM;AAAM;AAAsB;AAAuB;AAEhF;AAAQ,IAFsB,CAAE,GAAQ,EAAE,IAAY,KAAM,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,GAAE,GAAG,CAAC,CAAC;AAChG,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACnB5J;AAAI;AAAc;AAAG;AAAa;AAMzB;AAAkB;AAAmB;AAEjC;AAAe;AAA5B,SAAgB,QAAQ,CAAC,GAAQ,EAAE,IAAY,EAAE,GAAQ;AACzD;AAAqB,UAAb,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;AAC/B,IACE,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;AAC1B,QAAI,yBAAY,GAAG,EAAK,GAAG,EAAG;AAC9B,KAAG;AACH,IACE,GAAG,qBAAQ,GAAG,CAAE,CAAC;AACnB;AACoB,UAAZ,SAAS,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC;AACpC;AAAqB,UAAb,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AAClD,IACE,eAAe,CAAC,MAAM;AAAM;AAC3B;AAAuB;AACP;AACd;AAAQ,IAHY,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK;AAC1C,QAAI,IAAI,KAAK,KAAK,SAAS,EAAE;AAC7B,YAAM,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE;AAC/B,gBAAQ,GAAG,CAAC,IAAI,CAAC,qBAAQ,GAAG,CAAC,IAAI,CAAC,EAAK,GAAG,CAAE,CAAC;AAC7C,aAAO;AAAC,iBAAK;AACb,gBAAQ,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;AACxB,aAAO;AACP,SAAK;AAAC,aAAK;AACX,YAAM,GAAG,CAAC,IAAI,CAAC,qBAAQ,GAAG,CAAC,IAAI,CAAC,CAAE,CAAC;AACnC,SAAK;AACL,QACI,OAAO,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;AAC5B,KAAG,GAAE,GAAG,CAAC,CAAC;AACV,IACE,OAAO,GAAG,CAAC;AACb,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACpC5J;AAAiB,IAcb,iBAAiB,GAAG,KAAK;AAC7B;AACgB,MAAV,iBAAiB,GAAG,IAAI,aAAa,CAAC,CAAC,CAAC;AAC9C;AACG;AAAe;AAAlB,SAAgB,sBAAsB;AACtC,IAAE,OAAO,iBAAiB,CAAC,YAAY,EAAE,CAAC;AAC1C,CAAC;AACD;AACG;AAAmB;AAAe;AAArC,SAAgB,oBAAoB,CAACJ,OAAa;AAClD,IAAE,iBAAiB,GAAGA,OAAI,CAAC;AAC3B,CAAC;AACD;AACG;AAAe;AAAlB,SAAgB,oBAAoB;AACpC,IAAE,OAAO,iBAAiB,CAAC;AAC3B,CAAC;AACD;AACG;AAAgB;AAAe;AAQlC,SAAS,SAAS,CAAC,CAAM;AACzB,IAAE,OAAO,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACjC,CAAC;AACD;AACG;AAA2B;AACzB;AADL,SAAS,SAAS,CAAC,YAAiB;AACpC,IAAE,IAAI,SAAS,CAAC,YAAY,CAAC,IAAI,YAAY,CAAC,YAAY,CAAC,EAAE;AAC7D,QAAI,OAAO,IAAI,CAAC,YAAY,CAAC,CAAC;AAC9B,KAAG;AACH,IACE,OAAO,EAAE,CAAC,YAAY,CAAC,CAAC;AAC1B,CAAC;AACD;AACG;AAAsB;AACvB;AA+BF,SAAgB,YAAY,CAAC,MAAoC;AACjE;AAAqB,UAAb,QAAQ,GAAuB;AACvC,QAAI,GAAG,EAAE,aAAa;AACtB,QAAI,kBAAkB,EAAE,KAAK;AAC7B,QAAI,OAAO,EAAE,CAAC,eAAe,EAAE,GAAG,MAAM,CAAC,OAAO,GAAG,YAAY;AAC/D,QAAI,WAAW,EAAE,IAAI,CAAC,KAAK;AAC3B,QAAI,SAAS,EAAE,IAAI,CAAC,SAAS;AAC7B,QAAI,OAAO,EAAE,EAAE;AACf;AACI;AAEJ;AAAY,QAAR,OAAO,EAAE,EAAE;AACf,QAAI,gBAAgB,EAAE,KAAK;AAC3B,QAAI,gBAAgB;AAAO;AACnB;AAEC;AAAuB;AAAY,QAHtB,UAAS,SAAS,EAAE,KAAK;AAC/C,YAAM,OAAO,KAAK,CAAC;AACnB,SAAK,CAAA;AACL,QAAI,cAAc;AAAO;AACjB;AAEC;AAAuB;AAAY,QAHxB,UAAS,SAAS,EAAE,KAAK;AAC7C,YAAM,OAAO,KAAK,CAAC;AACnB,SAAK,CAAA;AACL,QAAI,iBAAiB,EAAE,oBAAoB;AAC3C,QAAI,wBAAwB;AAAO;AAEnC;AACW,QAHmB;AAAW;AAG9B;AAAuB;AAAY,QAHV,MAAM,IAAI,MAAM,CAAA,CAAA;AACpD,KAAG;AACH,UACQ,EAAE,OAAO,EAAE,kBAAkB,EAAE,WAAW,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,wBAAwB,EAAE,cAAc,EAAE,iBAAiB,EAAE,GAAG,MAAM,CAAC,MAAM,CACnM,EAAE,EACF,QAAQ,EACR,MAAM,CACP;AACH,IACE,IAAI,CAAC,YAAY,IAAI,CAAC,kBAAkB,KAAK,CAAC,OAAO;AAAE,QAAA,OAAO;AAChE;AACoB,UAAZ,UAAU,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC;AACvC;AAAqB,UAAb,UAAU,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC;AACvC;AAAqB,QAAf,aAAsE;AAC5E,IACE,IAAI,UAAU,IAAI,UAAU,EAAE;AAChC,QAAI,MAAM,IAAI,UAAU,CAAC,wCAAwC,CAAC,CAAC;AACnE,KAAG;AACH,IACE,IAAI,UAAU,EAAE;AAClB,QAAI,aAAa,GAAG,OAAO,CAAC,MAAM;AAC9B;AACG;AACL;AAAuB;AAClB,QAHD,CAAC,GAAG,EAAE,IAAI;AAChB,YAAQ,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE;AAC9B,gBAAU,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC7B,aAAS;AAAC,iBAAK;AACf;AAAiC,sBAAjB,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC9C,gBAAU,GAAG,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;AAChC,aAAS;AACT,YAAQ,OAAO,GAAG,CAAC;AACnB,SAAO,GACD,EAAE,GAAG,EAAE,EAAE,EAAE,CACZ,CAAC;AACN,KAAG;AACH;AACoB,QAAd,MAAM,GAA0B,EAAE;AACxC;AACK,QADC,GAAG,GAAG,EAAE;AACd;AAAqB,QAAf,aAAa,GAAmB,EAAE;AACxC;AACoB,UAAZ,MAAM,GAAG,EAAE;AACnB;AACO;AACP;AAAmB;AAAQ,IADzB,SAAS,KAAK,CAAC,CAAM;AACvB,QAAI,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS;AAAM;AACZ;AAAY,QADL;AAC3B;AAA6B,kBAAjB,IAAI,GAAG,MAAM,CAAC,KAAK,EAAE;AACjC,YAAM,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;AAC1B,SAAK,EAAC,CAAC;AACP,KAAG;AACH;AAEC;AAAqB,UAAd,cAAc,GAAG,CAAC,eAAe,EAAE,IAAI,OAAO,KAAK,YAAY,MAAM,iBAAiB,EAAE,IAAI,OAAO,KAAK,cAAc,CAAC;AAC/H,IACE,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS;AAAM;AACtC;AAAmB;AAAQ,IADM,CAAC,KAAU;AACvD;AAAyB,YAAjB,YAAY,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,WAAW,CAAC,KAAK,IAAI,IAAI,CAAC;AAC3E;AACW;AACC;AAAuB;AAAY,QAD3C,SAAS,IAAI,CAAC,UAAU;AAC5B,YAAM,YAAY,CAAC,QAAQ,CAAC,sBAAS,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAM,UAAU,CAAE,CAAC;AACpF,YAAM,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC;AAC1D,YACM,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,cAAc,GAAG,SAAS,CAAC,YAAY,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;AACjG,YAAM,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;AAC5B,SAAK;AACL;AACW;AACV;AAA2B;AACzB;AAAY,QAFX,SAAS,SAAS,CAAC,SAAS,EAAE,IAAI;AACtC,YAAM,MAAM,CAAC,SAAS,CAAC,GAAG,UAAU,CAAC,SAAS,CAAC;AAC/C,iBAAS,OAAO;AAAM;AACjB;AACY;AACH,YAHG,KAAK,IAAI,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,EAAC;AAChD,iBAAS,IAAI,CACH,IAAI,CAAC,CAAC,CAAC,EACP,MAAM;AAAM;AAA2B;AACvC,YADO,MAAM,iBAAiB,EAAE,KAAK,KAAK,EAAC,EAC3C,wBAAwB,EAAE,CAC3B;AACT,iBAAS,SAAS;AAAM;AACE;AAA2B;AAC9C,YAFY,IAAI;AACvB,gBAAU,GAAG,CAAC,SAAS,CAAC,GAAG,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAC7D,gBAAU,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI;AAAM;AAA+B;AAAoB,gBAAxD,MAAM,IAAI,CAAC,EAAE,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAC,CAAC;AACzG,aAAS,EAAC,CAAC;AACX,SAAK;AACL;AACW;AAAgC;AACtB;AACZ;AAAuB;AACxB,QAHJ,SAAS,UAAU,CAAC,SAAS,EAAE,KAAK,EAAE,IAAI;AAC9C,YAAM,IAAI,SAAS,IAAI,YAAY,EAAE;AACrC,gBAAQ,SAAS,CAAC,eAAe,CAAC,CAAC;AACnC,gBAAQ,KAAK,CAAC,SAAS;AAAM;AACC;AAA+B;AAAoB,gBADzD,KAAK;AAC7B,oBAAU,OAAO,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,CAAC,SAAS,EAAE,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;AAC3F,iBAAS,EAAC,CAAC;AACX;AAAiC,sBAAnB,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,GAAG,KAAK;AAC3F,gBAAQ,UAAU,CAAC,SAAS,CAAC,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;AAC1E,aAAO;AACP,SAAK;AACL,QACI,aAAa,CAAC,IAAI,CAChB,aAAa,CAAC,SAAS;AAAM;AACb;AACV;AAAY,QAFM,SAAS;AACvC,YAAQ,IAAI,MAAM,CAAC,SAAS,CAAC,EAAE;AAC/B,gBAAU,IAAI,gBAAgB,KAAK,KAAK,EAAE;AAC1C,oBAAY,IAAI,CAAC,EAAE,CAAC,SAAS,GAAG,KAAK,EAAE,CAAC,CAAC;AACzC,iBAAW;AACX,gBAAU,MAAM,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;AAC1C,gBAAU,OAAO,MAAM,CAAC,SAAS,CAAC,CAAC;AACnC,aAAS;AACT,SAAO,EAAC,CACH,CAAC;AACN,QACI,aAAa,CAAC,IAAI,CAChB,UAAU,CAAC,SAAS;AAAM;AACV;AAAuB;AAAY,QAD9B,SAAS;AACpC,YAAQ,IAAI,SAAS,KAAK,QAAQ,KAAK,UAAU,IAAI,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAE;AACnF,gBAAU,OAAO;AACjB,aAAS;AACT;AAC4B,kBAAd,KAAK,GAAG,UAAU,CAAC,SAAS,CAAC;AAC3C,YAAQ,IAAI,UAAU,EAAE;AACxB;AAAiC,oBAAnB,IAAI,GAAG,aAAa,CAAC,SAAS,CAAC;AAC7C,gBACU,IAAI,CAAC,IAAI,EAAE;AACrB;AAAqC,0BAAnB,aAAa,GAAG,aAAa,CAAC,GAAG,CAAC,IAAI;AAAM;AAC1C;AACE;AACR,oBAH2C,EAAE,IAAI,EAAE,CAAC,SAAS,CAAC,EAAC;AAC7E,oBAAY,IAAI,aAAa,EAAE;AAC/B,wBAAc,IAAI,GAAG,SAAS,CAAC;AAC/B,qBAAa;AAAC,yBAAK;AACnB,wBAAc,OAAO;AACrB,qBAAa;AACb,iBAAW;AACX,gBAAU,UAAU,CAAC,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;AAC7C,gBAAU,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AACrC,aAAS;AAAC,iBAAK;AACf,gBAAU,UAAU,CAAC,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;AAClD,gBAAU,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;AAC1C,aAAS;AACT,SAAO,EAAC,CACH,CAAC;AACN,QACI,iBAAiB,CAAC,IAAI,EAAE,CAAC;AAC7B,KAAG,EAAC,CAAC;AACL,IACE,OAAO;AACT;AAAY;AACO;AAAY,QAD3B,OAAO;AACX,YAAM,aAAa,CAAC,OAAO;AAAM;AACvB;AAA2B;AAAgB,YADzB,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,EAAC,CAAC;AAClD,YAAM,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACxE;AAAiC,sBAAnB,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC;AACjC,gBAAQ,MAAM,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;AACxC,aAAO;AACP,YAAM,MAAM,GAAG,EAAE,CAAC;AAClB,SAAK;AACL;AAAY;AACS;AAElB,QAHC,KAAK;AACT,YAAM,OAAO,CAAC,KAAK,EAAE,CAAC;AACtB,SAAK;AACL;AAAY;AACJ;AACP;AAAY,QAFT,UAAU,CAAC,SAAkB;AACjC,YAAM,IAAI,KAAK,CAAC,SAAS,CAAC,EAAE;AAC5B;AAAiC,sBAAnB,KAAK,GAAG,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AAC3D,gBAAQ,KAAK,CAAC,SAAS,EAAE,CAAC;AAC1B,gBAAQ,OAAO;AACf,aAAO;AACP;AAA6B,kBAAjB,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC;AACxC,YAAM,SAAS,CAAC,KAAK,CAAC,CAAC,SAAS;AAAM;AACZ;AAC1B;AACe,YAHkB,CAAC;AAClC;AAAiC,sBAAnB,YAAY,GAAG,WAAW,CAAC,CAAC,IAAI,IAAI,CAAC;AACnD,gBACQ,IAAI,YAAY,CAAC,SAAS,CAAC,EAAE;AACrC,oBAAU,OAAO,YAAY,CAAC,SAAS,CAAC,CAAC;AACzC;AAAqC,0BAArB,KAAK,GAAG,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;AAChF,oBAAU,KAAK,CAAC,SAAS,EAAE,CAAC;AAC5B,iBAAS;AACT,aAAO,EAAC,CAAC;AACT,SAAK;AACL,KAAG,CAAC;AACJ,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACrQ5J,MAMa,eAAe;AAC5B;AACE;AACE;AAEJ;AAA0B;AAC1B;AAAQ,IADN,iBAAiB,CAAC,SAAmB,EAAE;AACzC;AACO,YADC,GAAG,GAAG,EAAE;AAChB;AAAyB,cAAf,UAAU,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC;AACxC;AAAyB,cAAf,IAAI,GAAG,UAAU,GAAG,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;AAC9D,QAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC1C;AAA6B,gBAAnB,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC;AAC7B,YAAM,IAAI,SAAS,KAAK,QAAQ,EAAE;AAClC,gBAAQ,GAAG,CAAC,SAAS,CAAC,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,CAAC;AACxD,aAAO;AACP,SAAK;AACL,QACI,OAAO,GAAG,CAAC;AACf,KAAG;AACH;AACO;AAAyB;AAA2B;AAAmB;AAAQ,IAApF,iBAAiB,CAAC,MAA6C,EAAE,OAAyD;AAC5H;AAAyB,cAAf,aAAa,iBAAQ,EAAE,iBAAiB,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,EAAK,OAAO,CAAE;AACtF,QAAI,aAAa,CAAC,iBAAiB,IAAI,oBAAoB,CAAC,IAAI,CAAC,CAAC;AAClE;AACwB,YAAhB,gBAAgB,GAAG,MAAM;AACjC,QACI,IAAI,QAAQ,CAAC,MAAM,CAAC,EAAE;AAC1B,YAAM,gBAAgB,GAAG,IAAI,CAAC,KAAK,oBAAC,gBAAgB,GAAW,CAAC;AAChE,SAAK;AACL;AACwB,cAAd,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,MAAM;AACrD,QACI,IAAI,aAAa,CAAC,IAAI,EAAE;AAC5B,YAAM,UAAU;AAChB,iBAAS,IAAI,CACH,MAAM;AAAM;AAA+B;AACtC;AAEf,YAHiB,IAAI,IAAI,gBAAgB,CAAC,cAAc,CAAC,IAAI,CAAC,EAAC,EACrD,IAAI,CAAC,IAAI,CAAC,CACX;AACT,iBAAS,SAAS;AAAM;AAA+B;AAA2B;AACtE,YADO,IAAI,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,SAAS;AAAM;AAC3D;AACG,YAFmD,MAAM,gBAAgB,CAAC,IAAI,CAAC,EAAC,EAAC,CAAC;AACrF,SAAK;AAAC,aAAK;AACX,YAAM,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAClF;AAAiC,sBAAnB,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC;AACjC,gBAAQ,IAAI,UAAU,CAAC,SAAS,CAAC,EAAE;AACnC,oBAAU,UAAU,CAAC,SAAS,CAAC,CAAC,SAAS;AAAM;AAC3C;AAID,oBALuC,MAAM,gBAAgB,CAAC,SAAS,CAAC,EAAC,CAAC;AAC7E,iBAAS;AACT,aAAO;AACP,SAAK;AACL,QACI,aAAa,CAAC,iBAAiB,IAAI,oBAAoB,CAAC,KAAK,CAAC,CAAC;AACnE,KAAG;AACH,CAAC;AACD;AACA,MAAa,eAAe,GAAG,IAAI,eAAe,EAAE;AACpD;AAAC;AAAI;AAAkC;AAAqH;ACxD5J;AAAI;AAAa;AAAmB;AAQpC,MAAsB,WAAW;AAAG;AAAQ;AAC/B;AAAwB;AAA0B;AAAQ,IAArE,YAAgC,KAAqB,EAAE,MAA+B;AACxF,QADkC,UAAK,GAAL,KAAK,CAAgB;AAAC,QACpD,IAAI,MAAM,IAAI,MAAM,CAAC,OAAO,EAAE;AAClC,YAAM,IAAI,cAAc,EAAE,CAAC,UAAU,EAAE;AACvC,gBAAQ,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACrC,aAAO;AACP,SAAK;AACL,KAAG;AACH;AACO;AACF;AAAkB;AACN;AACf,IAFU,QAAQ;AACpB,QAAI,OAAO,IAAI,CAAC,KAAK,CAAC;AACtB,KAAG;AACH;AACO;AACF;AAAkB;AACN;AAAQ,IADb,QAAQ;AACpB,QAAI,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC;AACrC,KAAG;AACH;AACO;AAGE;AAAkB;AAA2B;AAAmB;AAAQ,IACrE,aAAa,CAAC,QAAa;AACvC,QAAI,OAAO,SAAS,CAAC,QAAQ,CAAC,CAAC;AAC/B,KAAG;AACH;AACO;AACF;AAAkB;AAA2B;AACjC;AAAmB;AAChC,IAFQ,YAAY,CAAC,QAAa,EAAE,QAAiB;AACzD,QAAI,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;AACtC,YAAM,OAAO,oBAAC,IAAI,CAAC,QAAQ,EAAE,IAAwB,YAAY,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAC5F,SAAK;AACL,QACI,IAAI,QAAQ,EAAE;AAClB,YAAM,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM;AAAM;AAAgC;AAGzE;AAAgB,YAHoB,KAAK,IAAI,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,EAAC,CAAC;AAC5F,SAAK;AACL,QACI,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE,CAAC;AACpC,KAAG;AACH;AACO;AAAkB;AAA2B;AACnC;AAAmB;AAChC,IAFQ,SAAS,CAAC,QAAa,EAAE,QAAiB;AAAI,QACtD,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;AACtC,YAAM,OAAO,oBAAC,IAAI,CAAC,QAAQ,EAAE,IAAwB,SAAS,CAAC,QAAQ,CAAC,CAAC;AACzE,SAAK;AACL;AACwB,cAAd,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE;AAC5C,QACI,IAAI,QAAQ,EAAE;AAClB,YAAM,OAAO,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3D,SAAK;AACL,QACI,OAAO,KAAK,CAAC;AACjB,KAAG;AACH;AACO;AAAkB;AACnB;AAAmB;AAAQ,IADrB,aAAa,CAAC,IAAY;AACtC,QAAI,OAAO,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,EAAE,CAAC;AACvC,KAAG;AACH;AACO;AAAkB;AACX;AAAQ,IADpB,IAAc,SAAS;AACzB,QAAI,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC;AACrC,KAAG;AACH;AACO;AACF;AAAkB;AAA2B;AACtC;AACZ;AAAmB;AAAQ,IAFf,WAAW,CAAC,QAAQ,EAAE,QAAS,EAAE,QAAiB;AAC9D,QAAI,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;AACtC,YAAM,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;AACjD,SAAK;AAAC,aAAK;AACX,YAAM,IAAI,QAAQ,EAAE;AACpB,gBAAQ,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS;AAAM;AACT;AAA+B;AACtD,gBAF2B,KAAK;AACvC,oBAAU,OAAO,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,QAAQ,CAAC,CAAC;AACzE,iBAAS,EAAC,CAAC;AACX,gBAAQ,OAAO;AACf,aAAO;AACP,YAAM,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS;AAAM;AAAgC;AAK7D;AAAgB,YALQ,KAAK,uBAAU,KAAK,EAAK,QAAQ,EAAG,EAAC,CAAC;AACtE,SAAK;AACL,KAAG;AACH;AAEC;AACE;AACU;AACb;AAAmB;AAAQ,IADjB,OAAO,CAAC,EAAY;AAC9B;AAAyB,cAAf,QAAQ,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,KAAK;AAC1C,QAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,KAAK;AAAQ;AACb;AAAuB;AAAY,QAD3B,CAAC,GAAG,MAAM;AACtC;AACM,YAAA,UAAU;AAAM;AACE;AAAgB,YADvB;AACjB,gBAAQ,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,MAAM,CAAC,CAAC;AAChD,gBAAQ,EAAE,EAAE,CAAC;AACb,aAAO,EAAC,CAAC;AACT,SAAK,CAAA,CAAC;AACN,KAAG;AACH,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAiB,MCxE3K,iBAAiB,GAAoB;AAC3C,IAAE,aAAa,EAAE,KAAK;AACtB,IAAE,KAAK,EAAE,KAAK;AACd,IAAE,SAAS,EAAE,CAAC;AACd,IAAE,YAAY,EAAE,SAAS;AACzB,IAAE,mBAAmB,EAAE,IAAI;AAC3B,CAAC;AACD;AACG;AAAmB;AAAtB,MAAa,eAA2C,SAAQ,WAAkB;AAClF;AAAQ;AAAwB;AAC5B;AAAQ,IAoBV,YAAsB,KAAyB,EAAS,SAA0B,EAAE;AACtF,QAAI,KAAK,CAAC,KAAK,EAAE;AACjB,YAAM,OAAO;AAAO;AACI;AACd,YAFK;AACf,gBAAQ,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;AAC7B,gBAAQ,IAAI,CAAC,OAAO,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC;AAC3D,aAAO,CAAA;AACP,SAAK,CAAC,CAAC;AACP,QAPwB,UAAK,GAAL,KAAK,CAAoB;AAAC,QAAQ,WAAM,GAAN,MAAM,CAAsB;AAAC;AAC9E;AAEc;AAClB,QAxBH,aAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;AACvB,QAEU,UAAK,GAAG,IAAI,GAAG,EAAyB,CAAC;AACnD,QAEU,eAAU,GAA6C;AACjE,YAAI,WAAW,EAAE,CAAC;AAClB,YAAI,OAAO,EAAE,CAAC;AACd,YAAI,KAAK,EAAE,CAAC;AACZ,YAAI,QAAQ,EAAE,CAAC;AACf,YAAI,IAAI,EAAE,EAAE;AACZ,SAAG,CAAC;AACJ;AAEK;AACM;AAEA;AAAY,QAAb,YAAO,GAAG,IAAI,CAAC;AACzB;AACW;AAAsC;AAAY,QAkB3D,eAAU,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,QAZI,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC;AAC3D,cAAU,EAAE,SAAS,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,MAAM;AACnD,QAAI,IAAI,CAAC,IAAI,GAAG,IAAI,eAAe,CAAC,SAAS,CAAC,CAAC;AAC/C,QAAI,IAAI,YAAY,CAAC,YAAY,CAAC,EAAE;AACpC,YAAM,IAAI,CAAC,sBAAsB,GAAG,YAAY,CAAC,SAAS;AAAM;AAEhE;AAGK,YALsD,MAAM,IAAI,CAAC,UAAU,EAAE,EAAC,CAAC;AACpF,SAAK;AACL,KAAG;AACH;AAEC;AAA8B;AAEnB;AAAQ,IAKlB,IAAI,WAAW;AACjB,QAAI,OAAO,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;AACpC,KAAG;AACH;AAEC;AACE;AACa;AACd,IADA,IAAI,WAAW;AACjB,QAAI,OAAO,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;AACvC,KAAG;AACH;AAEC;AACE;AACa;AACV,IADJ,IAAI,OAAO;AACb,QAAI,OAAO,IAAI,CAAC,WAAW,KAAK,CAAC,CAAC;AAClC,KAAG;AACH;AAEC;AACE;AACa;AACT,IADL,IAAI,MAAM;AACZ,QAAI,OAAO,IAAI,CAAC,WAAW,KAAK,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;AACzD,KAAG;AACH;AAEC;AACE;AACE;AAEH;AAAoB;AAChB;AAAQ,IAFZ,YAAY;AACd,QAAI,mBAAA,IAAI,GAAC,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC;AACrC,QAAI,0BAAO,IAAI,GAAC;AAChB,KAAG;AACH;AAEC;AACE;AACE;AAEA;AAAoB;AAEzB;AAEG,IALD,SAAS;AACX,QAAI,mBAAA,IAAI,GAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;AAC7B,QAAI,0BAAO,IAAI,GAAC;AAChB,KAAG;AACH;AAEC;AACE;AACmB;AACV;AAAQ,IADlB,UAAU,CAAC,KAAK,GAAG,IAAI;AACzB,QAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AACtC,KAAG;AACH;AAEC;AACE;AACqB;AACjB;AAAQ,IAAb,MAAM,CAAC,QAAkD;AAC3D,QAAI,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC;AAC/B,QAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AAChC,KAAG;AACH;AAEC;AACE;AACE;AACiB;AAAmB;AAClC,IADL,OAAO,CAAC,IAA4B;AACtC,QAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG;AAAM;AAAiC;AACvE;AAGpB,YAJqD,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,EAAC,EAAE,CAAC,CAAC;AACjG,QAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC9B,KAAG;AACH;AAEC;AACE;AACqB;AAAmB;AAAQ,IAAjD,UAAU,CAAC,UAAoC,EAAE;AACnD,QAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;AACvB,YAAM,SAAS,CAAC,2BAA2B,CAAC,CAAC;AAC7C,YACM,IAAI,OAAO,CAAC,UAAU,KAAK,KAAK,KAAK,IAAI,CAAC,MAAM,CAAC,mBAAmB,IAAI,OAAO,CAAC,UAAU,CAAC,EAAE;AACnG,gBAAQ,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE,CAAC;AACjC,aAAO;AACP,YACM,IAAI,CAAC,KAAK,GAAG,IAAI,GAAG,EAAE,CAAC;AAC7B,YAAM,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;AAChC,SAAK;AACL,QAAI,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;AACzB,KAAG;AACH;AACO;AACL;AAAmB;AACrB,IAFE,SAAS,CAAC,IAAY;AACxB,QAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC5B,KAAG;AACH;AAEC;AACE;AACiB;AAAmB;AAAQ,IAA7C,OAAO,CAAC,EAAE,UAAU,EAAE,WAAW,KAAqD,EAAE;AAC1F,QAAI,IAAI,IAAI,CAAC,sBAAsB,EAAE;AACrC,YAAM,IAAI,CAAC,sBAAsB,CAAC,WAAW,EAAE,CAAC;AAChD,SAAK;AACL,QAAI,IAAI,UAAU,EAAE;AACpB,YAAM,IAAI,CAAC,UAAU,EAAE,CAAC;AACxB,SAAK;AACL,QAAI,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,EAAE;AACnC,YAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;AAChC,SAAK;AACL,QAAI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AACxB,KAAG;AACH;AAEC;AACE;AACiB;AACZ;AAAQ,IADd,YAAY,CAAC,IAAY;AAC3B,QAAI,OAAO,IAAI,CAAC,WAAW,KAAK,IAAI,CAAC;AACrC,KAAG;AACH;AAEC;AACE;AACiB;AACP;AAAQ,IADnB,OAAO,CAAC,IAAY;AACtB,QAAI,IAAI,IAAI,KAAK,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;AAC1D,YAAM,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,IAAI,EAAE,CAAC;AAC3D,SAAK;AACL,KAAG;AACH;AAEC;AACE;AAEF;AAAQ,IADP,QAAQ;AACV,QAAI,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE;AACvD,YAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;AACpD,SAAK;AACL,KAAG;AACH;AAEC;AACE;AAEF;AAAQ,IADP,QAAQ;AACV,QAAI,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,CAAC,EAAE;AACzC,YAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;AACpD,SAAK;AACL,KAAG;AACH;AAEC;AACE;AACa;AACV,IADJ,WAAW;AACb,QAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;AAC3C,KAAG;AACH;AAEC;AACE;AACa;AACX,IADH,YAAY;AACd,QAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACpB,KAAG;AACH;AAEC;AACE;AACiB;AACP;AAAQ,IADnB,OAAO,CAAC,IAAY;AACtB,QAAI,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAChC,KAAG;AACH;AAEC;AACE;AACgB;AAAmB;AAAQ,IAA5C,OAAO,CAAC,GAA+D;AACzE;AAAyB,YAAjB,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW;AAC1C,QAAI,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;AAC5B,YAAM,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AACnC,SAAK;AAAC,aAAK;AACX,YAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AAC5B,YAAM,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CACrB,SAAS;AAAM;AAAiC;AAC/C;AAAgB,YADP,CAAC,MAAgD;AACnE,gBAAU,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC;AACpC,gBAAU,gBAAgB;AAAM;AACJ;AAChB,gBAFe;AAC3B,oBAAY,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AACnC,oBAAY,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAChC,iBAAW,EAAC,CAAC;AACb,gBAAU,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AACvC,aAAS,EAAC,CACH,CAAC;AACR,SAAK;AACL,KAAG;AACH;AACO;AAAmB;AAAQ,IAAhC,QAAQ;AAAK,QACX,OAAO,IAAI,CAAC,KAAK,CAAC;AACtB,KAAG;AACH;AACO;AACN;AAAQ,IADP,kBAAkB;AACpB,QAAI,IAAI,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,KAAK,EAAE;AAC3C,YAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACvC,YAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACrC,SAAK;AACL,KAAG;AACH;AACO;AACN;AAAmB;AAChB,IAFM,OAAO;AACjB,QAAI,IAAI,IAAI,CAAC,OAAO,EAAE;AACtB,YAAM,OAAO,CAAC,CAAC;AACf,SAAK;AACL,QAAI,OAAO,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,GAAG,CAAC,CAAC;AAChE,KAAG;AACH;AACO;AACJ;AAAmB;AACf,IAFG,KAAK;AACf,QAAI,IAAI,IAAI,CAAC,MAAM,EAAE;AACrB,YAAM,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;AACnC,SAAK;AACL,QAAI,OAAO,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;AACtD,KAAG;AACH;AAEC;AACE;AACU;AAAuB;AAAmB;AAAQ,IAArD,UAAU,CAAC,IAAY;AAAI,QACjC,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAClD,IAAI,CAAC,CAAC,CAAC,EACP,GAAG;AAAM;AACO;AAAuB;AAAY,QAD/C,QAAQ;AAClB;AAA6B,gBAAjB,QAAQ,qBACP,IAAI,CAAC,UAAU,IAClB,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG;AAAM;AAG5C;AAA+B;AAEnC,gBAL2C,EAAE,IAAI,QAAQ,CAAC,EAAE,CAAC,EAAC,GACvD;AACT,kBACc,EAAE,KAAK,EAAE,aAAa,EAAE,GAAG,IAAI,CAAC,MAAM;AACpD;AAEG,YAAK,IAAI,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;AAC1C,gBAAU,IAAI,QAAQ,CAAC,QAAQ,KAAK,CAAC,EAAE;AACvC,oBAAY,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;AACtE,iBAAW;AAAC,qBAAK;AACjB,oBAAY,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC,OAAO,GAAG,QAAQ,CAAC,QAAQ,CAAC;AAClE,iBAAW;AACX,gBAAU,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;AACjD,aAAS;AACT,YACQ,IAAI,KAAK,EAAE;AACnB,gBAAU,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;AACzC,gBAAU,QAAQ,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;AACrC,aAAS;AACT,YACQ,IAAI,aAAa,EAAE;AAC3B,gBAAU,QAAQ,CAAC,YAAY,GAAG,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AAChG,aAAS;AACT,YACQ,OAAO,QAAQ,CAAC;AACxB,SAAO,EAAC,CACH,CAAC;AACN,KAAG;AACH,CAAC;AA9LCG;AAAaA,IADZ,MAAM,CAAC,wBAAwB,CAAC;AAClC;AAAyC;AAChB;AAI1B,6CAFG;AACH;AACA;AAAI;AAIQ;AAAoB;AACpB;AAAe;AAyL3B,SAAS,aAAa,CAAC,KAAa,EAAE,OAAe;AACrD;AAAqB,UAAb,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;AACxC;AACK,QADC,GAAG,GAAG,EAAE;AACd,IAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AAChC,QAAI,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AACpB,KAAG;AACH,IAAE,OAAO,GAAG,CAAC;AACb,CAAC;AACD;AACG;AAA0B;AACjB;AAAZ,MAAa,SAAS,GAAG,eAAe;AACxC;AAAC;AAAI;AAAkC;AAAqH;ACtV5J;AACE;AAAI;AAAe;AA+BrB,MAAa,mBAA6B,SAAQ,WAAW;AAC7D;AAAQ;AACL;AACI;AACL;AAAQ,IAIR,YAAsB,KAAiB,EAAU,eAAmC,EAAU,SAA4B,EAAE;AAC9H,QAAI,KAAK,CAAC,KAAK,CAAC,CAAC;AACjB,QAFwB,UAAK,GAAL,KAAK,CAAY;AAAC,QAAS,oBAAe,GAAf,eAAe,CAAoB;AAAC,QAAS,WAAM,GAAN,MAAM,CAAwB;AAAC,QAE3H,IAAI,CAAC,MAAM,iBAAQ,EAAE,YAAY,EAAE,GAAG,EAAE,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,KAAK,EAAE,iBAAiB;AAAO;AAA4B;AACzH;AAAgB,YADwE,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA,EAAE,EAAK,MAAM,CAAE,CAAC;AACnJ,QAAI,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,eAAe,CAAC,KAAK,KAAK,CAAC;AAC3D,QAAI,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,eAAe,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC;AACnE,KAAG;AACH;AACO;AAAsB;AACvB;AACC;AACD;AACC;AAAQ,IAJb,OAAO,CAAC,IAAmB,EAAE,OAAQ;AACvC,QAAI,mBAAA,IAAI,GAAC,IAAI,GAAG,IAAI,CAAC;AACrB,QAAI,mBAAA,IAAI,GAAC,OAAO,GAAG,OAAO,CAAC;AAC3B,QAAI,mBAAA,IAAI,GAAC,QAAQ,EAAE,CAAC;AACpB,QAAI,0BAAO,IAAI,GAAC;AAChB,KAAG;AACH;AACO;AACI;AACI;AAAQ,IAFrB,KAAK,CAAC,YAAgB;AACxB;AACU,YADF,KAAK;AACb,QAAI,IAAI,YAAY,EAAE;AACtB,YAAM,KAAK,GAAG,YAAY,CAAC;AAC3B,SAAK;AAAC,aAAK;AACX,YAAM,KAAK,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,GAAG,oBAAC,IAAI,IAAS,eAAe,EAAE,CAAC;AACpF,SAAK;AACL,QACI,IAAI,IAAI,CAAC,UAAU,EAAE;AACzB,YAAM,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO;AAAM;AACxB;AACxB;AAAgB,YAF2B,QAAQ;AACrD;AAAiC,sBAAnB,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;AACjD,gBAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE;AAClD;AAAqC,0BAArB,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;AACxD,oBAAU,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;AACrC,oBAAU,KAAK,CAAC,OAAO;AAAM;AACA;AAAoC;AAC5D;AAEA,oBAJmB,CAAC,CAAC,EAAE,CAAC;AAC7B,wBAAY,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,oBAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,IAAc,CAAC,CAAC,CAAC,CAAC;AAC9F,qBAAW,EAAC,CAAC;AACb,iBAAS;AACT,aAAO,EAAC,CAAC;AACT,SAAK;AACL,QAAI,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;AACtE;AACwB,cAAd,UAAU,GAAG,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,EAAE,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS,IAAI,IAAI,CAAC,eAAe,EAAE,EAAE,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,KAAK,EAAE;AAC/K,QAAI,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;AACjC,KAAG;AACH;AACO;AAAgB;AACN;AAChB;AAAQ,IAFC,UAAU,CAAC,OAAO;AAC5B,QAAI,OAAO,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;AACjC,YAAM,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC1B,SAAK;AACL,KAAG;AACH;AACO;AAAgB;AACrB;AAAuB;AACT;AAAQ,IAFd,mBAAmB,CAAC,SAAS,EAAE,IAAI;AAC7C,QAAI,IAAI,CAAC,SAAS;AAAE,YAAA,OAAO;AAC3B,QAAI,OAAO,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM;AAAM;AACpC;AACL;AAAuB;AAAY,QAFC,CAAC,GAAG,EAAE,QAAQ;AACvD;AAA6B,kBAAjB,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;AAClC,YAAM,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE;AAChD;AAAiC,sBAAnB,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB;AACrD,gBAAQ,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;AACjD,gBAAQ,KAAK,CAAC,OAAO;AAAM;AACF;AAAgC;AAEpD;AACY,gBAJK,CAAC,CAAC,EAAE,CAAC;AAC3B,oBAAU,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,oBAAC,OAAO,IAAc,CAAC,CAAC,CAAC,CAAC;AACtE,iBAAS,EAAC,CAAC;AACX,aAAO;AACP,YAAM,GAAG,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;AACrC,YAAM,OAAO,GAAG,CAAC;AACjB,SAAK,GAAE,EAAE,CAAC,CAAC;AACX,KAAG;AACH;AACO;AACP;AAEI;AAAQ,IAHF,QAAQ;AAClB;AAEU,YAFF,IAAI;AACZ,QACI,IAAI,IAAI,CAAC,UAAU,EAAE;AACzB,YAAM,IAAI,IAAI,CAAC,UAAU,EAAE;AAC3B,gBAAQ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;AAClG,gBAAQ,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;AACtF,aAAO;AAAC,iBAAK;AACb,gBAAQ,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC;AACtE;AAAiC,sBAAnB,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC;AAC/D,gBAAQ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AACjE,gBAAQ,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;AACtF,aAAO;AACP,SAAK;AAAC,aAAK;AACX,YAAM,IAAI,CAAC,oBAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,IAAsB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;AAClF,gBAAQ,SAAS,CAAC,+BAA+B,CAAC,CAAC;AACnD,gBAAQ,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,oBAAC,IAAI,IAAS,eAAe,EAAE,EAAE,CAAC,CAAC;AACrF,aAAO;AACP;AAC4B,kBAAhB,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;AACnE,YAAM,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAClC,SAAK;AACL,QACI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS;AAAM;AACpF;AACnB;AAAY,QAFsF,KAAK;AAC1G,YAAM,SAAS,CAAC,uBAAuB,CAAC,CAAC;AACzC;AACS,gBADC,QAAQ;AAClB,YAAM,IAAI,IAAI,CAAC,UAAU,EAAE;AAC3B,gBAAQ,IAAI,IAAI,CAAC,UAAU,EAAE;AAC7B,oBAAU,QAAQ;AAAQ;AAChB;AACkB;AAAwB,oBAF/B,KAAK,uBAAU,KAAK,EAAK,KAAK,EAAG,CAAA,CAAC;AACvD,iBAAS;AAAC,qBAAK;AACf,oBAAU,QAAQ;AAAQ;AACpB;AAEU;AAAwB,oBAHnB,KAAK,IAAI,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAA,CAAC;AAC3D,iBAAS;AACT,aAAO;AAAC,iBAAK;AACb,gBAAQ,QAAQ;AAAQ;AAA+B;AAEjD,gBAFa,OAAO,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,KAAK,EAAE,CAAC,CAAA,CAAC;AAC5D,aAAO;AACP,YAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;AAC7D,SAAK,EAAC,CAAC;AACP,KAAG;AACH;AACO;AACK;AAAQ,IADlB,OAAO;AACT,QAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;AACvD,QAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACrB,QAAI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AACxB,KAAG;AACH,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAa;AAAI;AAAoB;AAAe;AClJpN,SAAgB,UAAU,CAAC,KAAa;AACxC,IAAE,OAAO,KAAK,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACjE,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACJ5J;AAAiB,IAsBb,IAAI,GAAG,EAAE;AACb;AACG;AAA+B;AAEjB;AAAe;AAEhC,SAAgB,aAAa,CAAC,eAAuD,EAAE,UAAoC,EAAE;AAC7H,IAAE,IAAI,YAAY;AAAE,QAAA,OAAO;AAC3B,IACE,IAAI,CAAC,oBAAC,MAAM,IAAS,4BAA4B,EAAE;AACrD,QAAI,OAAO;AACX,KAAG;AACH,IACE,IAAI,CAAC,MAAM;AACb,QAAI,IAAI,CAAC,OAAO;AAAM;AACA;AACJ;AACb,QAHY,CAAC;AAClB,YAAM,IAAI,CAAC,CAAC,WAAW,EAAE;AACzB,gBAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;AACxB,aAAO;AAAC,iBAAK;AACb,gBAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;AACjB,aAAO;AACP,SAAK,EAAC,CAAC;AACP;AACoB,UAAZ,SAAS,GAAG,eAAe,IAAI,eAAe,CAAC,KAAK,CAAC;AAC7D,IACE,IAAI,CAAC,SAAS,EAAE;AAClB,QAAI,eAAe,GAAG,eAAe,IAAI,EAAE,CAAC;AAC5C,QAAI,oBAAC,eAAe,IAAS,GAAG;AAAQ;AACtB;AAAuB;AAAY,QADlB,EAAE,IAAI,EAAE,EAAE,CAAA,CAAC;AAC9C,QAAI,OAAO,sBAAG,eAAe,EAA4B,CAAC;AAC1D,KAAG;AACH;AACoB,UAAZ,cAAc,GAAgD,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE,EAAE,EAAE;AAC3H;AAAqB,UAAb,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,cAAc,EAAE,OAAO,CAAC;AAC3D;AAAqB,UAAb,eAAe,GAAG,MAAM,CAAC,eAAe;AAChD;AAAqB,UAAb,QAAQ,GAAG,oBAAC,MAAM,IAAS,4BAA4B,CAAC,OAAO,CAAC,MAAM,CAAC;AAC/E;AACA,QADM,QAAQ,GAAG,EAAE;AACnB;AACoB,UAAZ,SAAS;AAAQ;AACP;AAChB;AAAQ,IAFU,SAAS;AAC7B,QAAI,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE;AACjC,YAAM,OAAO,IAAI,CAAC;AAClB,SAAK;AACL,QACI,OAAO,eAAe,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;AACnD,KAAG,CAAA;AACH,IACE,IAAI,CAAC,IAAI,CACP,UAAU,CAAC,SAAS;AAAM;AACZ;AAAmB;AAAQ,IADpB,SAAS;AAClC,QAAM,IAAI,SAAS,CAAC,SAAS,CAAC,KAAK,KAAK;AAAE,YAAA,OAAO;AACjD,QAAM,QAAQ,qBACH,QAAQ,IACX,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,GAC5C,CAAC;AACR,QAAM,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,UAAU,CAAC,SAAS,CAAC,YAAY,EAAE,EAAE,QAAQ,CAAC,CAAC;AAC/E,KAAK,EAAC,CACH,CAAC;AACJ,IACE,IAAI,CAAC,IAAI,CACP,aAAa,CAAC,SAAS;AAAM;AACf;AAAmB;AAAQ,IADjB,SAAS;AACrC,QAAM,IAAI,SAAS,CAAC,SAAS,CAAC,KAAK,KAAK;AAAE,YAAA,OAAO;AACjD,QAAM,OAAO,QAAQ,CAAC,SAAS,CAAC,CAAC;AACjC,QAAM,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,SAAS,kBAAkB,EAAE,EAAE,QAAQ,CAAC,CAAC;AACzE,KAAK,EAAC,CACH,CAAC;AACJ,IACE,IAAI,CAAC,IAAI,CACP,aAAa,CAAC,SAAS;AAAM;AACf;AAAmB;AAAQ,IADjB,SAAS;AACrC,QAAM,IAAI,SAAS,CAAC,SAAS,CAAC,KAAK,KAAK;AAAE,YAAA,OAAO;AACjD,cAAY,EAAE,IAAI,EAAE,SAAS,QAAEH,OAAI,EAAE,GAAG,aAAa;AACrD,QACM,IAAIA,OAAI,EAAE;AAChB,YAAQ,aAAa,CAAC,KAAK,CAAC,CAAC;AAC7B,YAAQ,OAAO;AACf,SAAO;AACP;AACwB,cAAZ,KAAK,GAAG,UAAU,CAAC,SAAS,CAAC;AACzC,QAAM,IAAI,CAAC,KAAK,EAAE;AAClB,YAAQ,OAAO;AACf,SAAO;AACP,QACM,IAAI,OAAO,CAAC,OAAO,KAAK,KAAK,IAAI,QAAQ,CAAC,SAAS,CAAC,EAAE;AAC5D;AAA6B,kBAAf,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;AAC9F,YAAQ,IAAI,OAAO;AAAE,gBAAA,OAAO;AAC5B,SAAO;AACP,QACM,QAAQ,qBACH,QAAQ,IACX,CAAC,SAAS,GAAG,KAAK,CAAC,MAAM,EAAE,GAC5B,CAAC;AACR;AACwB,cAAZ,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;AAC7C;AAAyB,YAAf,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC,GAAG,IAAI,SAAS,OAAO,IAAI,UAAU,SAAS,GAAG,GAAG,IAAI,SAAS,OAAO,IAAI,EAAE;AAClH,QACM,IAAI,OAAO,CAAC,QAAQ,EAAE;AAC5B,YAAQ,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC3B,YAAQ,OAAO,CAAC,KAAK,EAAE,CAAC;AACxB,YAAQ,OAAO,CAAC,QAAQ,EAAE,CAAC;AAC3B,SAAO;AACP,QACM,IAAI,OAAO,CAAC,kBAAkB,EAAE;AACtC;AAA6B,kBAAf,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;AACpD,iBAAW,IAAI,EAAE;AACjB,iBAAW,MAAM;AAAM;AACV;AAAoC;AAE/C;AACF,YAJkB,CAAC,GAAG,EAAE,SAAS;AACjC,gBAAY,GAAG,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC;AACjD,gBAAY,OAAO,GAAG,CAAC;AACvB,aAAW,GAAE,EAAE,CAAC;AAChB,YACQ,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,cAAc,CAAC,CAAC;AACrD,YAAQ,OAAO;AACf,SAAO;AACP,QACM,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,QAAQ,CAAC,CAAC;AAC7C,KAAK,EAAC,CACH,CAAC;AACJ,IACE,IAAI,CAAC,IAAI,CACP,QAAQ,CAAC,SAAS;AAAM;AACV;AAAmB;AACjC,IAFmB,OAAO;AAC9B,QAAM,IAAI,OAAO,CAAC,IAAI,KAAK,UAAU,EAAE;AACvC;AAA6B,kBAAf,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI;AAChD,YACQ,IAAI,WAAW,KAAK,QAAQ,EAAE;AACtC,gBAAU,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAClC,gBAAU,OAAO;AACjB,aAAS;AACT,YACQ,IAAI,OAAO,CAAC,KAAK,EAAE;AAC3B;AAAiC,sBAAjB,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;AACrD,gBAAU,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC/E;AAAqC,0BAAnB,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC;AACrC,oBAAY,IAAI,UAAU,CAAC,SAAS,CAAC,EAAE;AACvC,wBAAc,oBAAC,eAAe,IAAgB,GAAG;AAAM;AACnB;AAA4B,wBADd;AAClD,4BAAgB,UAAU,CAAC,SAAS,CAAC,CAAC,SAAS;AAAM;AACzC;AAGZ,4BAJgD,MAAM,SAAS,CAAC,SAAS,CAAC,GAAE,KAAK,CAAC,CAAC;AACnF,yBAAe,EAAC,CAAC;AACjB,qBAAa;AACb,iBAAW;AACX,aAAS;AACT,SAAO;AACP,KAAK,EAAC,CACH,CAAC;AACJ,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AC7J5J;AAAI;AACsC;AACjC;AAAsB;AAU/B,MAAsB,sBAAsB;AAAG;AAAQ;AAAkB;AACrD;AAA4B;AAEhD,IAAE,YAAgC,KAAyB,EAAU,SAAoC;AAAI,QAA3E,UAAK,GAAL,KAAK,CAAoB;AAAC,QAAS,cAAS,GAAT,SAAS,CAA2B;AAAC,QAF9F,aAAQ,GAAG,IAAI,GAAG,EAAuB,CAAC;AACtD,KAC6G;AAC7G;AAEC;AACE;AACY;AAAqB;AAC9B;AAAQ,IADF,SAAS,CAAC,EAAoB;AAAI,QAC1C,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;AACjC,KAAG;AACH;AAEC;AACE;AACY;AAAqB;AACpC;AAAQ,IADI,SAAS,CAAC,EAAoB;AAAI,QAC1C,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;AACjC,KAAG;AACH;AAEC;AACE;AACY;AAAqB;AAC9B;AAAQ,IADF,YAAY,CAAC,EAAoB;AAC7C,QAAI,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;AACrB,QAAI,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AACpC,KAAG;AACH;AAEC;AACE;AACY;AAAqB;AACnC;AAAmB;AAAQ,IADhB,YAAY,CAAC,EAAoB,EAAE,MAAS;AACxD,QAAI,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;AACzC,KAAG;AACH;AAEC;AACE;AACY;AACT;AAAQ,IADF,MAAM;AAAK,QACnB,OAAO,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,GAAG,GAAG,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACjG,KAAG;AACH;AAEC;AACE;AACY;AAAuB;AACjC;AAAQ,IADD,WAAW,CAAC,GAAI;AAAI,QAC5B,OAAO,WAAW,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;AAC/D,KAAG;AACH;AAEC;AACE;AACE;AAEH;AAAO;AAEJ;AAAkB;AAAsB;AAA2B;AAEnE;AACC,IAHM,MAAM,CAAC,GAAuB,EAAE,UAA4B,EAAE;AAC1E;AACI;AACI;AAEH;AAAW;AAEJ;AAAY,QAApB,IAAI,SAAS,CAAC,GAAG,CAAC,EAAE;AACxB;AACM;AAEJ;AAAgB,YAAZ,IAAI,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;AACvC,gBAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AACxD;AACE,0BADc,QAAQ,GAAG,GAAG,CAAC,CAAC,CAAC;AACjC,oBAAU,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,KAAK,EAAE;AAClD,wBAAY,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;AACzE;AAAyC,8BAAvB,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC;AAC3D,wBAAY,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AAChD,wBAAY,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AACrE,qBAAW;AACX,iBAAS;AACT,gBACQ,IAAI,CAAC,QAAQ,CAAC,OAAO;AAAM;AACjB;AACP;AAA+B;AAAoB,gBAFhC,CAAC,MAAM,EAAE,QAAQ;AAC/C,oBAAU,IAAI,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;AAC5C,wBAAY,UAAU,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;AAC7E,wBAAY,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;AACxC,qBAAW;AACX,iBAAS,EAAC,CAAC;AACX,aAAO;AAAC,iBAAK;AACb;AACQ;AAEJ;AAA6B;AAC9B,sBADW,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC;AAChD,gBAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AACzD;AACC,0BADe,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC;AAClC;AACU,oBAAA,IAAI,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,KAAK,EAAE;AAChF,wBAAY,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;AACzE;AAAyC,8BAAvB,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC;AAC3D,wBAAY,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AAChD,wBAAY,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AACrE,qBAAW;AAAC,yBAAK;AACjB,wBAAY,IAAI,CAAC,QAAQ,CAAC,OAAO;AAAM;AACb;AAA+C;AACnC;AAA4B,wBAFhC,CAAC,MAAM,EAAE,QAAQ;AACnD;AACc,4BAAA,IAAI,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAE;AACrF,gCAAgB,UAAU,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;AACjF,gCAAgB,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;AAC5C,6BAAe;AACf,yBAAa,EAAC,CAAC;AACf,qBAAW;AACX,iBAAS;AACT,aAAO;AACP,SAAK;AAAC,aAAK;AACX;AACM;AAEJ;AAAgB,YAAZ,IAAI,CAAC,MAAM,EAAE,CAAC,OAAO;AAAM;AACP;AAA2B;AAAgB,YADzC,EAAE;AAC9B,gBAAQ,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;AAAE,oBAAA,IAAI,CAAC,YAAY,CAAC,EAAE,EAAE,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC;AACnF,aAAO,EAAC,CAAC;AACT,SAAK;AACL,KAAG;AACH;AAEC;AACE;AACY;AAAmB;AAAQ,IAA9B,SAAS;AAAK,QACtB,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM;AAAM;AAIjC;AAAuB;AAAY,QAJP,KAAK,IAAI,KAAK,CAAC,GAAG,EAAC,CAAC;AACjD,KAAG;AACH;AAEC;AACE;AACY;AACb;AAAmB;AAGnB,IAJU,QAAQ,CAAC,GAAW;AAChC,QAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AACrB,KAAG;AACH;AAEC;AAAuD;AAE7C;AACI;AAAqB;AAAmB;AAAQ,IAYnD,SAAS,CAAC,GAA8B,EAAE,EAAsB;AAC5E;AAAyB,cAAf,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC;AACtC,QACI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AACrD;AACG,kBADS,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;AACxB,YAAM,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE;AAC9B,gBAAQ,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/B,aAAO;AACP,SAAK;AACL,KAAG;AACH,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AC7K5J;AAAI;AAAmB;AAkBvB,MAAa,kBAAgC,SAAQ,WAAkB;AACvE;AAAQ;AAAwB;AACrB;AAEI;AACd,IAeC,YAAsB,KAAqB,EAAU,SAA6B,EAAE,EAAU,SAAe;AAC/G,QAAI,KAAK,CAAC,KAAK,EAAE;AACjB,YAAM,OAAO;AAAO;AAEf;AAAgB,YAFN,MAAM,IAAI,CAAC,KAAK,EAAE,CAAA;AACjC,SAAK,CAAC,CAAC;AACP,QAJwB,UAAK,GAAL,KAAK,CAAgB;AAAC,QAAS,WAAM,GAAN,MAAM,CAAyB;AAAC,QAAS,cAAS,GAAT,SAAS,CAAM;AAAC;AACvG;AAEJ;AACI,QAtBC,SAAI,GAAG,KAAK,CAAC;AACvB,QACU,YAAO,GAAG;AACpB,YAAI,IAAI,EAAE,EAAE;AACZ,YAAI,OAAO,EAAE,IAAI;AACjB,YAAI,MAAM,EAAE,EAAE;AACd,SAAG,CAAC;AACJ;AACW;AACE;AAAY,QAAf,eAAU,GAAG,KAAK,CAAC;AAC7B,QAYI,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC;AACzD,QAAI,MAAM,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU;AAAU;AAErC;AAGd,QAL8C,MAAM,IAAI,EAAC,CAAC;AAC1D,QACI,IAAI,CAAC,QAAQ,EAAE,CAAC;AACpB,KAAG;AACH;AAEC;AACE;AACE;AACa;AAAQ,IAAxB,IAAI,QAAQ;AAAK,QACf,OAAO,IAAI,CAAC,SAAS,CAAC;AAC1B,KAAG;AACH;AAEC;AACE;AACE;AACa;AAAQ,IAAxB,IAAI,UAAU;AAAK,QACjB,OAAO,IAAI,CAAC,WAAW,CAAC;AAC5B,KAAG;AACH;AACO;AACC;AAAQ,IADd,IAAI,OAAO;AACb,QAAI,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;AACxC,KAAG;AACH;AACO;AACD;AAAQ,IADZ,IAAI,SAAS;AACf,QAAI,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;AAC1C,KAAG;AACH;AACO;AAAgB;AACR;AAAQ,IADrB,IAAY,QAAQ;AACtB,QAAI,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;AACrC,KAAG;AACH;AAEC;AAAQ;AAAgB;AACZ;AAAQ,IADX,gBAAgB;AAC1B,QAAI,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAC/C,QAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC3C,KAAG;AACH;AACO;AACI;AAAQ,IADjB,QAAQ;AACV,QAAI,IAAI,CAAC,cAAc,GAAG,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC;AACrD,QAAI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;AACrF,QAAI,IAAI,CAAC,gBAAgB,GAAG,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC;AACvD,QAAI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;AACzF,QACI,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AACzE,QAAI,IAAI,CAAC,YAAY,GAAG,oBAAC,IAAI;AAAI,aAC1B,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC;AAClD,aAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvB,aAAO,SAAS;AAAM;AACd;AACF;AAAY,QAFD,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC;AACjC,YAAQ,IAAI,IAAI,CAAC,IAAI,EAAE;AACvB,gBAAU,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;AAC5B,gBAAU,OAAO;AACjB,aAAS;AACT;AACI;AACI;AACa;AAAgB,kBAAvB,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC;AAClE,YACQ,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,YAAY,EAAE;AAC9C,gBAAU,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;AAC/D,oBAAY,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAC3D,iBAAW;AACX,gBAAU,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAC3D,gBAAU,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;AACzC,gBAAU,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAClC,aAAS;AACT,SAAO,EAAC,CAAC;AACT,KAAG;AACH;AACO;AACQ;AAAQ,IADrB,IAAI;AACN,QAAI,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;AACtC,kBAAY,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,OAAO;AAC5C;AAA6B,kBAAjB,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;AAC5C,YAAM,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACzD,YAAM,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;AACtC,YAAM,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AAC9D,YAAM,IAAI,CAAC,MAAM,EAAE,CAAC;AACpB,SAAK;AACL,KAAG;AACH;AACO;AACQ;AAAQ,IADrB,IAAI;AACN,QAAI,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;AACxC,kBAAY,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,OAAO;AAC5C;AAA6B,kBAAjB,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;AACzC;AAA6B,kBAAjB,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;AACpD,YAAM,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,GAAG,IAAI,EAAE,OAAO,CAAC,CAAC;AAC7C,YAAM,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;AAClC,YAAM,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,SAAS,CAAC;AACtC,YAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAC1B,SAAK;AACL,KAAG;AACH;AACO;AACN;AAAmB;AAAQ,IAD1B,UAAU,CAAC,KAAa;AAC1B,QAAI,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM;AAAE,YAAA,OAAO;AAC/D,cACU,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,OAAO;AAClD;AACI;AACI;AACI;AACI;AACI;AAEH;AAAW;AACI;AACI;AAGX;AAAW;AACrB;AAAY,cADjB,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC;AACxC;AAAyB,cAAf,SAAS,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,GAAG,MAAM,CAAC;AACpE;AAAyB,cAAf,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC;AAClC,QAAI,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC;AAChC,QAAI,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,UAAU,CAAC;AACtC,QAAI,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,SAAS,CAAC;AACpC,QAAI,IAAI,CAAC,MAAM,EAAE,CAAC;AAClB,KAAG;AACH;AACO;AAAwB;AACb;AAAQ,IADxB,YAAY,CAAC,KAAa;AAC5B,QAAI,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM;AAAE,YAAA,OAAO;AACjE,cACU,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,OAAO;AAClD;AACI;AACI;AACI;AACI;AACI;AAEH;AAAW;AACI;AACI;AAIZ;AAAW;AAAqB;AACvD,cADS,OAAO,GAAG,CAAC,GAAG,IAAI,EAAE,OAAO,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;AACjE;AAAyB,cAAf,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC;AACpC;AAAyB,cAAf,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;AAC7C,QAAI,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC;AAChC,QAAI,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,UAAU,CAAC;AACtC,QAAI,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,SAAS,CAAC;AACpC,QAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AACxB,KAAG;AACH;AAEC;AACE;AAEH;AACC;AACA;AAAmB;AAAQ,IAD1B,IAAI,CAAC,CAAS;AAChB,QAAI,IAAI,CAAC,GAAG,CAAC;AAAE,YAAA,OAAO,IAAI,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAC/C,QAAI,IAAI,CAAC,GAAG,CAAC;AAAE,YAAA,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACpE,KAAG;AACH;AAEC;AACE;AACE;AAAiB;AAAO;AAAyC;AAClE;AAGM;AACH;AACM;AAAW;AACjB;AAKa;AAAO;AAAmB;AAAQ,IAApD,KAAK,CAAC,cAA4D;AACpE,QAAI,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,cAAc,CAAC;AAC7C,cAAQ,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC;AACpC,cAAQ;AACR,gBAAU,IAAI,EAAE,EAAE;AAClB,gBAAU,OAAO,EAAE,IAAI;AACvB,gBAAU,MAAM,EAAE,EAAE;AACpB,aAAS,CAAC;AACV,QAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC5B,KAAG;AACH;AACO;AACF;AACL;AAAQ,IAFN,OAAO,CAAC,YAAY,GAAG,KAAK;AAC9B,QAAI,IAAI,YAAY,EAAE;AACtB,YAAM,IAAI,CAAC,KAAK,EAAE,CAAC;AACnB,SAAK;AACL,QAAI,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;AACpC,KAAG;AACH;AACO;AACE;AAAQ,IADf,UAAU;AACZ,QAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACrB,KAAG;AACH;AACO;AAAgB;AACV;AACT;AAAQ,IAFF,MAAM,CAACC,SAAM,GAAG,MAAM;AAChC,QAAI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;AAC3B,QAAI,SAAS,CAAC,mBAAmBA,SAAM,EAAE,CAAC,CAAC;AAC3C,QAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC1E,QAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC5B,QAAI,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;AAC5B,KAAG;AACH,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AChP5J;AAAI;AAAsB;AAS1B,MAAa,wBAA2H,SAAQ,sBAAgC;AAChL;AAAQ;AAAwB;AAA0B;AAAQ,IAAhE,YAAsB,KAAyB,EAAqB,SAAqD,EAAE;AAC7H,QAAI,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC;AACnC,QAFwB,UAAK,GAAL,KAAK,CAAoB;AAAC,QAAoB,WAAM,GAAN,MAAM,CAAiD;AAAC,QAE1H,MAAM,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC;AAClE,QAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;AACpB,QAAI,IAAI,CAAC,SAAS,EAAE;AACpB,aAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACpB,aAAO,SAAS;AAAM;AACnB;AAEkB;AAAY,QAHhB,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAC,CAAC;AAC5C,KAAG;AACH;AACO;AAAuB;AACvB;AAAQ,IADb,IAAI,CAAC,GAA+B;AACtC,QAAI,IAAI,CAAC,SAAS,CAAC,GAAG;AAAO;AAGrB;AAAuB;AAC9B,QAJuB,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAC,CAAC;AACvC,KAAG;AACH;AACO;AAAuB;AACvB;AAAQ,IADb,IAAI,CAAC,GAA+B;AACtC,QAAI,IAAI,CAAC,SAAS,CAAC,GAAG;AAAO;AAGrB;AAAuB;AACtB,QAJe,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAC,CAAC;AACvC,KAAG;AACH;AACO;AAAqB;AACf;AAAQ,IADnB,OAAO,CAAC,EAAoB;AAC9B,QAAI,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE;AAC5B,YAAM,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC;AACxC,SAAK;AACL,KAAG;AACH;AACO;AAAqB;AACjB;AAAQ,IADjB,SAAS,CAAC,EAAoB;AAChC,QAAI,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE;AAC5B,YAAM,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC;AAC1C,SAAK;AACL,KAAG;AACH;AACO;AAAsB;AAAwB;AAC7C;AAAQ,IADd,YAAY,CAAC,GAA8B,EAAE,KAAa;AAC5D,QAAI,IAAI,CAAC,SAAS,CAAC,GAAG;AAAO;AAC7B;AAEkB;AAAY,QAHN,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,EAAC,CAAC;AACpD,KAAG;AACH;AACO;AAAsB;AAAwB;AAC3C;AAAQ,IADhB,UAAU,CAAC,GAA8B,EAAE,KAAa;AAC1D,QAAI,IAAI,CAAC,SAAS,CAAC,GAAG;AAAO;AAC3B;AAEkB;AAAY,QAHR,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,EAAC,CAAC;AAClD,KAAG;AACH;AACO;AAAuB;AACxB;AAAQ,IADZ,KAAK,CAAC,GAA+B;AACvC,QAAI,IAAI,CAAC,SAAS,CAAC,GAAG;AAAO;AAGtB;AAAuB;AAAY,QAHlB,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAC,CAAC;AACxC,KAAG;AACH;AACO;AAAuB;AAAgC;AAChD;AAAQ,IADpB,OAAO,CAAC,GAA+B,EAAE,YAAY,GAAG,KAAK;AAC/D,QAAI,IAAI,CAAC,SAAS,CAAC,GAAG;AAAO;AAAwB;AAGrC;AAAY,QAHJ,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC,CAAC;AACtD,KAAG;AACH;AACO;AAAuB;AAC7B;AAAQ,IADP,UAAU,CAAC,GAA+B;AAC5C,QAAI,IAAI,CAAC,SAAS,CAAC,GAAG;AAAO;AAG3B;AAAuB;AAAY,QAHb,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAC,CAAC;AAC7C,KAAG;AACH;AACO;AAAkB;AAAqB;AACnC;AAAQ,IADP,iBAAiB,CAAC,EAAoB;AAClD,QAAI,0BAAO,IAAI,kBAAkB,CAAQ,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,GAAM;AAC3E,KAAG;AACH,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACjE5J;AAmBA,MAAa,uBAAuB,GAAG;AACvC,IAAE,UAAU;AAAO;AAAuB;AAA0B;AAGnE;AAAQ,IAHK,CAAC,IAAI,EAAE,OAAO,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAA;AACjF,CAAC;AACD;AACG;AAAwB;AAAmB;AAC1C;AADJ,SAAgB,aAAa,CAAC,SAAS,EAAE,IAAY;AACrD;AAAqB,UAAb,WAAW,GAAa,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;AAC/C,IAAE,OAAO,WAAW,CAAC,MAAM;AAAM;AAAsB;AAAsB;AAAmB;AAAQ,IAA5E,CAAC,GAAG,EAAE,GAAG,MAAM,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,KAAK,WAAW,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,GAAE,SAAS,CAAC,CAAC;AAC/G,CAAC;AACD;AACG;AAAmB;AAItB,MAAa,gBAA8B,SAAQ,WAAkB;AACrE;AAAQ;AACL;AAA0B;AACjB;AAAQ,IAOlB,YAAsB,KAAqB,EAAU,MAAgC,EAAU,SAAe;AAChH,QAAI,KAAK,CAAC,KAAK,CAAC,CAAC;AACjB,QAFwB,UAAK,GAAL,KAAK,CAAgB;AAAC,QAAS,WAAM,GAAN,MAAM,CAA0B;AAAC,QAAS,cAAS,GAAT,SAAS,CAAM;AAAC,QARvG,UAAK,GAAG,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC;AAC7C,QACU,WAAM,GAAG,KAAK,CAAC;AACzB,QAAU,WAAM,GAAG,IAAI,OAAO,EAAE,CAAC;AACjC,QACE,aAAQ,GAAwB,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;AACzF,QAAE,WAAM,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;AACtC,QAGI,IAAI,CAAC,MAAM,qBAAQ,uBAAuB,EAAK,MAAM,CAAE,CAAC;AAC5D,QAAI,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE;AACnC;AAA6B,gBAAnB,SAAS,sBAAG,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,EAAS;AACrE,YAAM,IAAI,KAAK,YAAY,WAAW,IAAI,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;AACxG,gBAAQ,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC9B,aAAO;AACP,YAAM,IAAI,CAAC,MAAM,CAAC,aAAa,GAAG,SAAS,CAAC;AAC5C,SAAK;AACL,KAAG;AACH;AACO;AAA0B;AAC3B;AAAQ,IADZ,KAAK,CAAC,SAAgC,EAAE;AAC1C;AAAyB,YAAjB,YAAY,GAAG,IAAI,CAAC,IAAI;AAChC,QAAI,IAAI,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;AACrC,YAAM,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;AAC9C,gBAAQ,YAAY,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,oBAAC,IAAI,CAAC,QAAQ,EAAE,IAAwB,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;AACrH,aAAO;AAAC,iBAAK;AACb,gBAAQ,YAAY,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,oBAAC,IAAI,CAAC,QAAQ,EAAE,IAAkB,QAAQ,EAAE,CAAC,CAAC;AAChG,aAAO;AACP,SAAK;AACL,QAAI,SAAS,CAAC,sBAAsB,CAAC,CAAC;AACtC,QAAI,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;AACnD,QAAI,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;AACvB,KAAG;AACH;AACO;AACQ;AACJ;AACD;AAAQ,IAHhB,OAAO;AACT,QAAI,IAAI,CAAC,mBAAA,IAAI,GAAC,MAAM,EAAE;AACtB,YAAM,mBAAA,IAAI,GAAC,QAAQ,EAAE,CAAC;AACtB,YAAM,mBAAA,IAAI,GAAC,MAAM,GAAG,IAAI,CAAC;AACzB,SAAK;AAAC,aAAK;AACX,YAAM,mBAAA,IAAI,GAAC,IAAI,GAAG,mBAAA,IAAI,GAAC,QAAQ,EAAE,CAAC;AAClC,SAAK;AACL,QAAI,mBAAA,IAAI,GAAC,eAAe,CAAC,KAAK,CAAC,CAAC;AAChC,QAAI,0BAAO,IAAI,GAAC;AAChB,KAAG;AACH;AACO;AACJ;AAAQ,IADT,OAAO;AAAK,QACV,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;AAC9B,KAAG;AACH;AACO;AACK;AAAQ,IADlB,OAAO;AACT,QAAI,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;AAC5B,KAAG;AACH;AACO;AACK;AAAQ,IADlB,OAAO;AACT,QAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACrB,QAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;AACzD,QAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;AAC1C,KAAG;AACH;AACO;AACP;AAAmB;AAAQ,IADzB,WAAW,CAAC,IAAY;AAC1B;AAAyB,cAAf,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE;AAC/B;AAAyB,cAAf,OAAO,GAAG,oBAAC,IAAI,CAAC,QAAQ,EAAE,IAAkB,QAAQ,EAAE;AAChE;AAAyB,cAAf,gBAAgB,GAAG,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC;AACzD;AAAyB,cAAf,aAAa,GAAG,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC;AACnD,QACI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,gBAAgB,EAAE,aAAa,CAAC,CAAC;AACnE,KAAG;AACH;AACO;AACN;AAAmB;AAGnB,IAJW,OAAO;AACnB,QAAI,OAAO,IAAI,CAAC,IAAI,CAAC;AACrB,KAAG;AACH;AACO;AACP;AAAmB;AAAQ,IADjB,QAAQ;AAClB,QAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;AAChC;AAAY;AACA;AAAqB;AACjC,cADU,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa;AAC5C,cAAQ,oBAAC,IAAI,CAAC,MAAM,CAAC,aAAa,IAAqB,GAAG;AAAM;AAEzD;AAA2B;AAC1B,YAHmD,IAAI,IACrD,IAAI,CAAC,KAAK;AACpB,iBAAa,MAAM;AAAM;AACV;AACQ;AACZ,YAHS,KAAK,IAAI,KAAK,CAAC,IAAI,CAAC,EAAC;AACzC,iBAAa,IAAI,CACH,GAAG;AAAM;AAEnB;AAA2B;AACjB,YAHI,GAAG,KAAK;AAC1B,gBAAgB,GAAG;AACnB,gBAAgB,UAAU,EAAE,IAAI;AAChC,aAAe,CAAC,EAAC,CACJ,EACJ;AACT,cAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAC3C,QAAI,IAAI,CAAC,YAAY,GAAG,aAAa,CAAC,GAAG,MAAM,CAAC;AAChD,aAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACpB,aAAO,SAAS;AAAM;AACT;AAAuB;AAChC,QAFa,CAAC,YAAmB;AACrC,YAAQ,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;AAAE,gBAAA,OAAO;AAC3C;AAAgB;AACA;AAAyB;AACtC,kBADW,QAAQ,GAAG,YAAY,CAAC,IAAI;AAAM;AACtB;AAA2B;AAAgB,YAD1B,KAAK;AAChD;AAAiC,sBAAjB,IAAI,GAAG,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC,IAAI,oBAAC,KAAK,CAAC,UAAU,GAAQ,GAAG,IAAI,CAAC,IAAI;AACxF;AAAiC,sBAAjB,SAAS,GAAG,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC,GAAG,GAAG,KAAK;AAChE,gBACU,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AACzD,aAAS,EAAC;AACV,YACQ,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;AACvC,SAAO,EAAC,CAAC;AACT,KAAG;AACH;AACO;AAAgB;AACpB;AAAmB;AACtB,IAFU,eAAe,CAAC,OAAgB;AAC1C,QAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC7B,KAAG;AACH;AACO;AAAgB;AACjB;AAAQ,IADJ,QAAQ;AAAK;AACX,YAAJ,IAAI,GAAgB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC;AAC1D,QAAI,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE;AACnC,YAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,oBAAC,IAAI,GAAU,CAAC;AAClD,SAAK;AACL,QAAI,OAAO,IAAI,CAAC;AAChB,KAAG;AACH;AACO;AAAgB;AAAyB;AACzC;AAAQ,IADL,gBAAgB,CAAC,MAAa;AAAI,QACxC,OAAO,oBAAC,IAAI,CAAC,MAAM,CAAC,aAAa,IAAqB,MAAM;AAC5D;AACG;AAA2B;AACf;AACZ,QAHD,CAAC,OAAO,EAAE,IAAI;AACpB,YAAQ,OAAO,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;AACrC,YAAQ,OAAO,OAAO,CAAC;AACvB,SAAO,sBACD,EAAE,GACH,CAAC;AACN,KAAG;AACH,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AC/J5J;AAAI;AAAsB;AAa1B,MAAa,sBAAqH,SAAQ,sBAAgC;AAC1K;AAAQ;AAAwB;AACZ;AAAQ,IAK1B,YAAsB,KAAyB,EAAmB,SAA4C,EAAE;AAClH,QAAI,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC;AACnC,QAFwB,UAAK,GAAL,KAAK,CAAoB;AAAC,QAAkB,WAAM,GAAN,MAAM,CAAwC;AAAC,QANzG,eAAU,GAAG,IAAI,OAAO,EAAE,CAAC;AACrC,QAAE,eAAU,GAAwB,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM;AAAM;AAA4B;AAAuB;AAChH,QADwD,KAAK,IAAI,KAAK,CAAC,QAAQ,EAAC,EAAE,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC,CAAC,IAAI,CACtH,SAAS,CAAC,CAAC,CAAC,EACZ,GAAG;AAAM;AAAuB;AAG/B,QAHG,MAAM,IAAI,CAAC,cAAc,EAAE,EAAC,CACjC,CAAC;AACJ,QAGI,IAAI,CAAC,MAAM,qBAAQ,uBAAuB,EAAK,MAAM,CAAE,CAAC;AAC5D;AACI,QAAA,IAAI,CAAC,QAAQ,EAAE,CAAC;AACpB,QAAI,IAAI,CAAC,SAAS,EAAE;AACpB,aAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACpB,aAAO,SAAS;AAAM;AACA;AAAuB;AAAY,QADxC,GAAG;AACpB,YAAQ,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,QAAQ;AAAO;AAE1C;AAE0B;AACzB,gBALoC,MAAM,IAAI,MAAM,CAAC,OAAO,EAAE,CAAA,EAAE,CAAC,CAAC;AACpE,SAAO,EAAC,CAAC;AACT,KAAG;AACH;AACO;AAAsB;AACzB;AAAuB;AAClB;AAAQ,IAFf,OAAO,CAAC,GAA+B;AACzC,QAAI,IAAI,mBAAA,IAAI,GAAC,MAAM,CAAC,SAAS,IAAI,GAAG,EAAE;AACtC;AAA6B,kBAAjB,OAAO,sBAAG,WAAW,CAAC,GAAG,CAAC,EAAsB;AAC5D;AAA6B,kBAAjB,cAAc,GAAG,WAAW,CAAC,mBAAA,IAAI,GAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI;AAAM;AACzE;AAA2B;AACtB,YAF+D,EAAE,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAC;AACpG,YAAM,IAAI,cAAc,KAAK,KAAK,EAAE;AACpC,gBAAQ,0BAAO,IAAI,GAAC;AACpB,aAAO;AACP,SAAK;AACL,QAAI,mBAAA,IAAI,GAAC,SAAS,CAAC,GAAG;AAAO;AACnB;AACL;AACL,QAHwB,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAC,CAAC;AAC1C,QAAI,mBAAA,IAAI,GAAC,UAAU,CAAC,IAAI,EAAE,CAAC;AAC3B,QAAI,0BAAO,IAAI,GAAC;AAChB,KAAG;AACH;AACO;AAAqB;AACxB;AAAQ,IADV,OAAO,CAAC,EAAoB;AAAI,QAC9B,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;AAC/B;AAA6B,kBAAjB,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;AACvC,YAAM,OAAO,MAAM,CAAC,OAAO,EAAE,CAAC;AAC9B,SAAK;AACL,QACI,OAAO,KAAK,CAAC;AACjB,KAAG;AACH;AACO;AAAuB;AAA0B;AAAmB;AACvE,IADF,KAAK,CAAC,GAA+B,EAAE,SAAgC,EAAE;AAC3E,QAAI,IAAI,CAAC,SAAS,CAAC,GAAG;AAAO;AAG5B;AAAuB;AAAY,QAHZ,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,EAAC,CAAC;AAC9C,KAAG;AACH;AACO;AAAqB;AACtB;AAAmB;AAAQ,IAE/B,OAAO,CAAC,EAAoB,EAAE,YAAY,GAAG,IAAI;AAAI,QACnD,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;AAC/B;AAA6B,kBAAjB,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;AACvC,YAAM,OAAO,YAAY,GAAG,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;AAC/D,SAAK;AACL,QACI,OAAO,KAAK,CAAC;AACjB,KAAG;AACH;AACO;AACN;AAAQ,IADP,SAAS;AAAK,QACZ,OAAO,IAAI,CAAC,cAAc,EAAE,CAAC;AACjC,KAAG;AACH;AACO;AAAqB;AAAuB;AACjC;AAAQ,IADxB,WAAW,CAAC,EAAoB,EAAE,IAAY;AAChD,QAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;AAC/B;AAA6B,kBAAjB,IAAI,GAAG,oBAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,IAAS,OAAO,EAAE;AACxD;AAA6B,kBAAjB,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,CAAC;AAC9C;AAA6B,kBAAjB,gBAAgB,GAAG,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC;AAC3D;AAA6B,kBAAjB,aAAa,GAAG,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC;AACrD,YACM,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,gBAAgB,EAAE,aAAa,CAAC,CAAC;AACrE,SAAK;AACL,QACI,OAAO,IAAI,CAAC;AAChB,KAAG;AACH;AACO;AAAuB;AAC1B;AAAQ,IADV,OAAO,CAAC,GAA+B;AACzC,QAAI,IAAI,CAAC,SAAS,CAAC,GAAG;AAAO;AACnB;AAAuB;AAAY,QADrB,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAC,CAAC;AAC1C;AACI,QAAA,IAAI,CAAC,GAAG,EAAE;AACd,YAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;AACjC,SAAK;AACL,KAAG;AACH;AACO;AAAkB;AAAqB;AACtC;AAAQ,IADJ,iBAAiB,CAAC,EAAoB;AAAI,QAClD,0BAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,GAAM;AAClE,KAAG;AACH;AACO;AAAgB;AACnB;AAAQ,IADF,cAAc;AAAK;AACb,cAAN,WAAW,GAAG,IAAI,CAAC,WAAW,EAAE;AAC1C,QAAI,KAAK,MAAM,EAAE,IAAI,WAAW,EAAE;AAClC,YAAM,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,EAAE;AACxC,gBAAQ,OAAO,IAAI,CAAC;AACpB,aAAO;AACP,SAAK;AACL,QAAI,OAAO,KAAK,CAAC;AACjB,KAAG;AACH,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAI;AAAwB;AAAG;AAAa;AAAG;AAAK;AAAgB;AAAK;AAAG;AAAe;ACnG3P,SAAgB,IAAI;AACpB,IAAE,OAAO,YAAY,CAAC,OAAO,CAAC,OAAO;AAAO;AAC1B;AAAmB;AAChC,IAFkC,CAAC;AACxC;AAAyB,cAAf,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC;AACtC;AAAyB,cAAnB,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG;AACxC,QAAI,OAAO,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AAC1B,KAAG,EAAC,CAAC;AACL,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACjB5J;AAAa;AAAI;AAAe;AAE3B;AACQ;AAAe;AAA5B,SAAgB,aAAa,CAAI,QAAa,EAAE,KAAK,GAAG,cAAc;AACtE;AACG,UADK,GAAG,GAAG,EAAE;AAChB,IAAE,KAAK,MAAM,MAAM,IAAI,QAAQ,EAAE;AACjC,QAAI,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;AAC5B,KAAG;AACH,IAAE,OAAO,GAAG,CAAC;AACb,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACV5J;AAAI;AACK;AAAG;AAAa;AAAG;AAAiB;AAElC;AAAuB;AAC/B;AAGD;AACW;AASb,SAAgB,WAAW,CAAC,OAAoC;AAChE;AAAqB,UAAb,QAAQ,GAAsB;AACtC,QAAI,OAAO,EAAE,EAAE;AACf,KAAG;AACH,IACE,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;AACjD;AAAqB,UAAb,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;AACxC,IACE,gBAAgB;AAAM;AACR;AAAQ,IADL;AACnB,QAAI,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;AAChC;AAA6B,kBAAjB,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC;AACjC,YAAM,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;AAC5B,gBAAQ,CAAC,CAAC,KAAK,EAAE,CAAC;AAClB,aAAO;AAAC,iBAAK;AACb,gBAAQ,IAAI,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE;AACzD,oBAAU,CAAC,CAAC,KAAK,EAAE,CAAC;AACpB,iBAAS;AACT,aAAO;AACP,SAAK;AACL,KAAG,EAAC,CAAC;AACL,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACtC5J;AAAa;AAAI;AACjB;AAEC;AAAD,SAAgB,QAAQ,CAAC,KAAU;AAAI,IACrC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC/D,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACN5J;AAAsB;AAChB,IAQJ,SAAM;AACR,IAAE,cAAW;AACb,IAAE,cAAW;AACb,IAAE,iBAAc;AAChB,IAAE,iBAAc;AAChB,IAAE,iBAAc;AACf;AAEA;AAA8C;AAK/C;AAEG;AAEoB;AAIqB;AAGjC;AAAI;AAID;AAAwB;AAClC;AACQ;AAGZ;AAiFA,SAAgB,cAAc,CAC5B,SAAiB,EACjB,MAAoB,EACpB,MAK+C;AAC9C;AACiB,UAAZ,KAAK,GAAG,UAAU,CAAC,SAAS,CAAC;AACrC,IACE,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE;AACpB,QAAI,MAAM,IAAI,UAAU,CAAC,GAAG,SAAS,gBAAgB,CAAC,CAAC;AACvD,KAAG;AACH,IACE,QAAQ,MAAM;AAChB,QAAI,KAAK,YAAY,CAAC,WAAW,EAAE;AACnC,kBAAY,EAAE,OAAO,EAAE,sBAAG,MAAM,EAA6B;AAC7D,YAAM,oBAAC,KAAK,IAAiB,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC/C,YAAM,OAAO;AACb,SAAK;AACL,QAAI,KAAK,YAAY,CAAC,WAAW,EAAE;AACnC,kBAAY,EAAE,OAAO,EAAE,sBAAG,MAAM,EAA6B;AAC7D,YAAM,oBAAC,KAAK,IAAiB,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;AAC/D,YAAM,OAAO;AACb,SAAK;AACL,QACI,KAAK,YAAY,CAAC,cAAc,EAAE;AACtC,kBAAY,EAAE,OAAO,EAAE,sBAAG,MAAM,EAAgC;AAChE,YAAM,oBAAC,KAAK,IAAiB,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;AACrE,YAAM,OAAO;AACb,SAAK;AACL,QACI,KAAK,YAAY,CAAC,cAAc,EAAE;AACtC,kBAAY,EAAE,OAAO,EAAE,sBAAG,MAAM,EAAgC;AAChE,YAAM,oBAAC,KAAK,IAAiB,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;AACvD,YAAM,OAAO;AACb,SAAK;AACL,QACI,KAAK,YAAY,CAAC,cAAc,EAAE;AACtC,kBAAY,EAAE,OAAO,EAAE,sBAAG,MAAM,EAAgC;AAChE,YAAM,IAAI,OAAO,CAAC,SAAS,EAAE;AAC7B,gBAAQ,oBAAC,KAAK,IAAiB,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;AACvE,aAAO;AAAC,iBAAK,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;AAC9C,gBAAQ,oBAAC,KAAK,IAAiB,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACxD,aAAO;AAAC,iBAAK;AACb,gBAAQ,oBAAC,KAAK,IAAiB,UAAU,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;AAC1D,aAAO;AACP,YAAM,OAAO;AACb,SAAK;AACL,QACI,KAAK,YAAY,CAAC,MAAM,EAAE;AAC9B,kBAAY,EAAE,OAAO,EAAE,sBAAG,MAAM,EAAwB;AACxD,YAAM,oBAAC,KAAK,IAAiB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAClD,YAAM,OAAO;AACb,SAAK;AACL,KAAG;AACH,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACrL5J;AAAI;AAA0B;AACzB;AAA6B;AAC3B;AAAqB;AAC5B;AAkBA,SAAgB,WAAW,CAAqB,SAAuC,EAAE,cAA2C,EAAE,GAAoB,EAAE,KAAK,GAAG,cAAc;AAClL;AAAqB,QAAf,SAAgC;AACtC,IACE,IAAI,UAAU,CAAC,cAAc,CAAC,EAAE;AAClC,QAAI,SAAS,GAAG,cAAc,CAAC;AAC/B,KAAG;AAAC,SAAK;AACT;AAAyB,cAAf,GAAG,GAAG,WAAW,CAAC,cAAc,CAAC;AAC3C,QAAI,SAAS;AAAQ;AAA2B;AAAuB;AAAY,QAAnE,IAAI,IAAI,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,IAAI,CAAA,CAAC;AACnF,KAAG;AACH;AACoB,UAAZ,QAAQ;AAAQ;AACJ;AACP;AAAQ,IAFF,KAAK,IACpB,KAAK,CAAC,GAAG;AAAM;AACD;AAAmB;AAChC,IAFS,MAAM;AACpB,QAAM,IAAI,SAAS,CAAC,MAAM,CAAC,KAAK,IAAI,EAAE;AACtC,YAAQ,OAAO,QAAQ,CAAC,MAAM,CAAC;AAC/B,oCACiB,MAAM,EACN,GAAG,IAER,GAAG,CAAC;AAChB,SAAO;AACP,QACM,OAAO,MAAM,CAAC;AACpB,KAAK,EAAC,CAAA;AACN,IACE,IAAI,OAAO,CAAC,SAAS,CAAC,EAAE;AAC1B,QAAI,OAAO,QAAQ,CAAC,SAAS,CAAC,CAAC;AAC/B,KAAG;AACH,IACE;AAAY;AAET;AAAmB;AAAQ,IAFvB,IAAI;AACb,QAAI,OAAO;AACX,YAAM,oBAAC,SAAS,KAAa,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACtD,SAAK,CAAC;AACN,KAAG,EAAC;AACJ,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACvD5J;AAAI;AAA0B;AACrB;AAAwB;AAC7B;AAAe;AAkBnB,SAAgB,QAAQ,CAAqB,SAAuC,EAAE,SAA0B,EAAE,UAA8B,EAAE;AAClJ;AAAqB,UAAb,WAAW,GAAG,WAAW,CAAC,SAAS,CAAC;AAC5C;AACoB,UAAZ,KAAK;AAAQ;AAAwB;AAAmB;AAAQ,IAAxD,KAAK,KAAK,OAAO,CAAC,OAAO,GAAG,CAAC,GAAG,WAAW,EAAE,IAAI,KAAK,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,EAAE,GAAG,WAAW,CAAC,CAAC,CAAA;AACpH,IACE,IAAI,OAAO,CAAC,SAAS,CAAC,EAAE;AAC1B,QAAI,OAAO,KAAK,CAAC,SAAS,CAAC,CAAC;AAC5B,KAAG;AACH,IACE;AAAY;AAET;AAAmB;AAAQ,IAFvB,KAAK;AACd,QAAI,OAAO;AACX,YAAM,oBAAC,SAAS,KAA4B,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;AACnE,SAAK,CAAC;AACN,KAAG,EAAC;AACJ,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACnC5J;AAAI;AAA+B;AAAG;AACpC;AAAG;AAAG;AACP;AAC0B;AAAO;AAG1B;AAAkB;AAEjB;AAGA;AAAqB;AACjB;AAGb,SAAgB,WAAW,CAAqB,GAAS,EAAE,EAAM,EAAE,GAAqB,EAAE,KAAK,GAAG,cAAc;AAAI;AAC1G,UAAF,cAAc,GAAG,QAAQ,CAAC,GAAG,CAAC;AACtC;AAAqB,UAAb,YAAY,GAAG,GAAG,CAAC,IAAI;AAAM;AAAyB;AAAmB;AAAQ,IAAzD,MAAM,KAAK,cAAc,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,MAAM,KAAK,EAAE,CAAC,EAAC;AAClG,IAAE,IAAI,YAAY,EAAE;AACpB,QAAI,OAAO,WAAW,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;AAC5C,KAAG;AAAC,SAAK;AACT,QAAI,OAAO,QAAQ,CAAC,GAAG,EAAE,cAAc,qBAAQ,GAAG,IAAE,CAAC,KAAK,GAAG,EAAE,MAAK,GAAG,CAAC,CAAC;AACzE,KAAG;AACH,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAa;AAAI;AAAmB;AAAe;ACxBnN,SAAgB,GAAG,CAAC,IAAc;AAAI,IACpC;AAAY;AACH;AACR;AAEC,IAJK,UAAS,GAAG,IAAI;AACzB,QAAI,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AAC1B,KAAG,EAAC;AACJ,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACL5J;AAAI;AAA0B;AACzB;AAAyB;AACxB;AAAe;AAmBrB,SAAgB,WAAW,CAAqB,SAAuC,EAAE,UAAuC,EAAE,KAAK,GAAG,cAAc;AACxJ;AACE,QADI,WAAW;AACjB;AAEI,QAFE,QAAQ;AACd,IACE,IAAI,UAAU,CAAC,UAAU,CAAC,EAAE;AAC9B,QAAI,QAAQ,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC;AAC/B,KAAG;AAAC,SAAK;AACT,QAAI,WAAW,GAAG,WAAW,oBAAC,UAAU,GAAQ,CAAC;AACjD,QAAI,QAAQ;AAAQ;AACE;AAAuB;AAAY,QAD1C,OAAO;AACtB,YAAM,OAAO,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,KAAK,KAAK,CAAC;AAC1F,SAAK,CAAA,CAAC;AACN,KAAG;AACH,IACE,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;AAChC,QAAI,OAAO,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AACtC,KAAG;AACH,IACE;AAAY;AAET;AAAmB;AAAQ,IAFvB,KAAK;AACd,QAAI,OAAO;AACX,YAAM,oBAAC,SAAS,KAAa,KAAK,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;AAC9D,SAAK,CAAC;AACN,KAAG,EAAC;AACJ,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AC7C5J;AAAI;AAAmB;AACN;AACX;AAAe;AAMrB,SAAgB,WAAW,CAAQ,YAA4B,EAAE,OAAoC;AACrG,IAAE,OAAO,IAAI,KAAK,CAAQ,YAAY,EAAE,OAAO,CAAC,CAAC;AACjD,CAAC;AACD;AACG;AAAmB;AAAoB;AAAe;AAAzD,SAAgB,WAAW,CAAQ,KAAmB;AACtD,IAAE,OAAO,IAAI,KAAK,CAAQ,KAAK,CAAC,CAAC;AACjC,CAAC;AACD;AACG;AAAmB;AAA2B;AAAsB;AAAe;AAAtF,SAAgB,iBAAiB,CAA4B,YAA4B,EAAE,OAAoC;AAC/H,IAAE,OAAO,IAAI,WAAW,CAAQ,YAAY,EAAE,OAAO,CAAC,CAAC;AACvD,CAAC;AACD;AACG;AAAmB;AAAoB;AAAuB;AAAe;AAAhF,SAAgB,iBAAiB,CAA4B,KAAyB,EAAE,UAA8B,EAAE;AACxH,IAAE,OAAO,IAAI,WAAW,CAAQ,KAAK,EAAE,OAAO,CAAC,CAAC;AAChD,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACvB5J;AAAI;AAAG;AACW;AAAG;AAIR;AAEH;AACH;AAA6C;AAG3C;AAAU;AAAG;AACS;AAAO;AAAK;AAE1C;AACiB;AAAuB;AAEtC;AAEM;AAAT,SAAgB,SAAS,CAAI,KAAY,EAAE,QAAuB,EAAE,UAAiC,EAAE,QAAQ,EAAE,KAAK,EAAE;AACxH,IAAE,IAAI,KAAK,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE;AAC5B,QAAI,OAAO,OAAO,CAAC,QAAQ,GAAG,EAAE,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;AACpD,KAAG;AACH,IAAE,OAAO,QAAQ,CAAC;AAClB,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACzB5J;AAAI;AAAe;AAA0B;AAAe;AAM5D,SAAgB,cAAc,CAAwB,WAAc;AAAI,IACtE,0BAAO,aAAa,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAQ;AAC9D,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAI;AAAa;AAAe;ACNhM,MAAsB,aAAa;AAAG,CAKrC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACR5J;AAAI;AAAoB;AAAe;AAGvC,SAAgB,UAAU,CAAC,KAAY;AACvC,IAAE;AAAY;AAAmB;AACrB;AACN;AAAQ,IAFL,UAAY,MAAqB;AAC1C,QAAI,OAAO,KAAK;AAAM;AACF;AAClB,QAFe;AACjB,YAAM,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AAC7B,YAAM,OAAO,MAAM,CAAC,IAAI,CAAC,QAAQ;AAAM;AAA2B;AAIlE,YAJkC,MAAM,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,EAAC,CAAC,CAAC;AAClE,SAAK,EAAC,CAAC;AACP,KAAG,EAAC;AACJ,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAC;AAAI;AAAkC;AAAqdnCA,AAezpBA,AAGA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAGA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAGA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,ACtdcA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AAAA,AACA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AACA,AAiBA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAEA,AAAA,AAAA,AAAA,AACA,AAAA,AACA,AAiBA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AACA,ACxHA,AA0CA,AAAA,AAAA,AAUA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAPA,AAAA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AAAA,AAGA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAUA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AACA,AAaojCA,AAavzFA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,ACFA,AAAA,AACA,AAAA,AACA,AAAA,AACA,AAAA,ACJA,AAAA,AAAA,AAAA,AAAA,ACwCA,AAAA,AAAA,AAAA,AAAA,AAIA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AADA,AAAA,AAAA,AAAA,AAAA,AAFA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIA,AAGA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAGA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAaaA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AACA,AAAA,AAEA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AACA,AA4BA,AAAA,AACA,AAAA,AACA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AACA,AACA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AACA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AACA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAcA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AACA,AAAA,AAAA,AAAA,AACA,AAAA,AAGA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAcikBA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAWA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AACA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAUA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AACA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AACA,AAAA,AAAA,AACA,AAUA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AACA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AACA,AAAA,AAAA,AACA,AAWA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AA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AA,AAAA,AAAA,AACA,AAYA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AACA,AAAA,AACA,AAiaA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAaA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAgBA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AACA,AAgmBA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AACA,AACA,AAGA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAA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AAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AAKA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAMA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAMA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAKA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAEA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAKA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AACA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAKA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAKA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AACA,AAKA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AACA,AAKA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AACA,AAKA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAKA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAKA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAKA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AACA,AAAA,AACA,AACA,AAEA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAEA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AACA,AAEA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAEA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAKA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAEA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAEA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAEA,AAAA,AAAA,AAAA,AACA,AAAA,AACA,AAAA,AACA,AACA,AA9LAG,AADA,AAAA,AAAA,AAAA,AAAA,AAIA,AAgMA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AACA,AAAA,AAAA,AAAA,AACA,AAGA,AAAA,AAAA,AAAA,AAAA,ACrVA,AAgjJA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,ACHA,AAskBA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AACA,AACA,AACA,AC5KA,AAkBA,AAAA,AAAA,AAAA,AAAA,AAoBA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAHA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAlBA,AAAA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AAAA,AAGA,AAAA,AAAA,AAAA,AAAA,AAaacihEA,AAmalGA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AACA,AChBA,AAGA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AACA,AAAA,AAAA,AAAA,AACA,ACTA,AAiBA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AACA,AACA,AACA,AAAA,AAAA,AACA,ACrpLA,AAqtDA,AAoBA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAEA,AAAA,AAAA,AACA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AACA,AAAA,AACA,AClCA,AAeA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AACA,ACvBA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AACA,ACJA,AAqtBA,AAmBA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AACA,AAAA,AAAA,AAAA,AACA,ACxBA,AAMA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,ACLA,AAAA,AAAA,AAKA,ACPA,AAGA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AACA,AAAA,AACA","sourcesContent":["// @internal\nexport function isArray<T>(value: any): value is T[] {\n  return Array.isArray(value);\n}\n","import { isArray } from './isArray';\n\n// @internal\nexport function isEmpty<T>(arr: T) {\n  if (isArray(arr)) {\n    return arr.length === 0;\n  }\n  return false;\n}\n","import { PreAddEntity } from './types';\n\n// @internal\nexport function toEntitiesObject<E>(entities: E[], idKey: string, preAddEntity: PreAddEntity<E>) {\n  const acc = {\n    entities: {},\n    ids: []\n  };\n\n  for (const entity of entities) {\n    // evaluate the middleware first to support dynamic ids\n    const current = preAddEntity(entity);\n    acc.entities[current[idKey]] = current;\n    acc.ids.push(current[idKey]);\n  }\n\n  return acc;\n}\n","import { EntityState, ID } from './index';\n\n// @internal\nexport function hasEntity<E>(entities: EntityState<E>, id: ID) {\n  return entities.hasOwnProperty(id);\n}\n","import { ActiveState, EntityState, ID, IDS, MultiActiveState } from './types';\nimport { hasEntity } from './hasEntity';\nimport { isArray } from './isArray';\n\n// @internal\nexport function hasActiveState<E>(state: EntityState<E>): state is EntityState<E> & (ActiveState | MultiActiveState) {\n  return state.hasOwnProperty('active');\n}\n\n// @internal\nexport function isMultiActiveState(active: IDS): active is ID[] {\n  return isArray(active);\n}\n\n// @internal\nexport function resolveActiveEntity<E>({ active, ids, entities }: EntityState<E> & (ActiveState | MultiActiveState)) {\n  if (isMultiActiveState(active)) {\n    return getExitingActives(active, ids);\n  }\n\n  if (hasEntity(entities, active) === false) {\n    return null;\n  }\n\n  return active;\n}\n\n// @internal\nexport function getExitingActives(currentActivesIds: ID[], newIds: ID[]) {\n  const filtered = currentActivesIds.filter(id => newIds.indexOf(id) > -1);\n  /** Return the same reference if nothing has changed */\n  if (filtered.length === currentActivesIds.length) {\n    return currentActivesIds;\n  }\n\n  return filtered;\n}\n","import { Entities, EntityState, HashMap, ID, PreAddEntity } from './types';\nimport { toEntitiesObject } from './toEntitiesObject';\nimport { isArray } from './isArray';\nimport { hasActiveState, resolveActiveEntity } from './activeState';\n\nexport type SetEntities<Entity> = Entity[] | Entities<Entity> | HashMap<Entity>;\n\nexport type SetEntitiesParams<State, Entity> = {\n  state: State;\n  entities: SetEntities<Entity>;\n  idKey: string;\n  preAddEntity: PreAddEntity<Entity>;\n  isNativePreAdd?: boolean;\n};\n\n// @internal\nexport function isEntityState<Entity>(state): state is Entities<Entity> {\n  return state.entities && state.ids;\n}\n\n// @internal\nfunction applyMiddleware<E>(entities: HashMap<E>, preAddEntity: PreAddEntity<E>) {\n  let mapped = {};\n  for (const id of Object.keys(entities)) {\n    mapped[id] = preAddEntity(entities[id]);\n  }\n\n  return mapped;\n}\n\n// @internal\nexport function setEntities<S extends EntityState<E>, E>({ state, entities, idKey, preAddEntity, isNativePreAdd }: SetEntitiesParams<S, E>): S {\n  let newEntities: HashMap<E>;\n  let newIds: ID[];\n\n  if (isArray(entities)) {\n    const resolve = toEntitiesObject(entities, idKey, preAddEntity);\n    newEntities = resolve.entities;\n    newIds = resolve.ids;\n  } else if (isEntityState(entities)) {\n    newEntities = isNativePreAdd ? entities.entities : applyMiddleware(entities.entities, preAddEntity);\n    newIds = entities.ids;\n  } else {\n    // it's an object\n    newEntities = isNativePreAdd ? entities : applyMiddleware(entities, preAddEntity);\n    newIds = Object.keys(newEntities).map(id => (isNaN(id as any) ? id : Number(id)));\n  }\n\n  const newState = {\n    ...state,\n    entities: newEntities,\n    ids: newIds,\n    loading: false\n  };\n\n  if (hasActiveState(state)) {\n    newState.active = resolveActiveEntity(newState as any);\n  }\n\n  return newState;\n}\n","export const currentAction = {\n  type: null,\n  entityIds: null,\n  skip: false\n};\n\nlet customActionActive = false;\n\nexport function resetCustomAction() {\n  customActionActive = false;\n}\n\n// public API for custom actions. Custom action always wins\nexport function logAction(type: string, entityIds?) {\n  setAction(type, entityIds);\n  customActionActive = true;\n}\n\nexport function setAction(type: string, entityIds?) {\n  if (customActionActive === false) {\n    currentAction.type = type;\n    currentAction.entityIds = entityIds;\n  }\n}\n\nexport function setSkipAction(skip = true) {\n  currentAction.skip = skip;\n}\n\nexport function action(action: string, entityIds?) {\n  return function(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function(...args) {\n      logAction(action, entityIds);\n      return originalMethod.apply(this, args);\n    };\n\n    return descriptor;\n  };\n}\n","export interface AkitaConfig {\n  /**\n   * Whether to allowed the reset() stores functionality\n   */\n  resettable?: boolean;\n  ttl?: number;\n  producerFn?: (state: any, fn: any) => any;\n}\n\nlet CONFIG: AkitaConfig = {\n  resettable: false,\n  ttl: null,\n  producerFn: undefined\n};\n\nexport function akitaConfig(config: AkitaConfig) {\n  CONFIG = { ...CONFIG, ...config };\n}\n\n// @internal\nexport function getAkitaConfig() {\n  return CONFIG;\n}\n\nexport function getGlobalProducerFn() {\n  return CONFIG.producerFn;\n}\n","// @internal\nexport function deepFreeze(o) {\n  Object.freeze(o);\n\n  const oIsFunction = typeof o === 'function';\n  const hasOwnProp = Object.prototype.hasOwnProperty;\n\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\n    if (\n      hasOwnProp.call(o, prop) &&\n      (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&\n      o[prop] !== null &&\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n      !Object.isFrozen(o[prop])\n    ) {\n      deepFreeze(o[prop]);\n    }\n  });\n\n  return o;\n}\n","import { ReplaySubject, Subject } from 'rxjs';\n\n// @internal\nexport const $$deleteStore = new Subject<string>();\n// @internal\nexport const $$addStore = new ReplaySubject<string>(50, 5000);\n// @internal\nexport const $$updateStore = new Subject<string>();\n\n// @internal\nexport function dispatchDeleted(storeName: string) {\n  $$deleteStore.next(storeName);\n}\n\n// @internal\nexport function dispatchAdded(storeName: string) {\n  $$addStore.next(storeName);\n}\n\n// @internal\nexport function dispatchUpdate(storeName: string) {\n  $$updateStore.next(storeName);\n}\n","export let __DEV__ = true;\n\nexport function enableAkitaProdMode() {\n  __DEV__ = false;\n}\n\n// @internal\nexport function isDev() {\n  return __DEV__;\n}\n","// @internal\nexport class AkitaError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n// @internal\nexport function assertStoreHasName(name: string, className: string) {\n  if (!name) {\n    console.error(`@StoreConfig({ name }) is missing in ${className}`);\n  }\n}\n","// @internal\nexport function isNil(v) {\n  return v === null || v === undefined;\n}\n","import { isNil } from './isNil';\n\n// @internal\nexport function isDefined(val: any) {\n  return isNil(val) === false;\n}\n","// @internal\nexport function isFunction(value: any): value is Function {\n  return typeof value === 'function';\n}\n","// @internal\nexport function toBoolean(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n","import { toBoolean } from './toBoolean';\n\n// @internal\nexport function isPlainObject(value) {\n  return toBoolean(value) && value.constructor.name === 'Object';\n}\n","export const isBrowser = typeof window !== 'undefined';\nexport const isNotBrowser = !isBrowser;\nexport const isNativeScript = typeof global !== 'undefined' && (<any>global).__runtimeVersion !== 'undefined';\nexport const hasLocalStorage = () => {\n  try {\n    return typeof localStorage !== 'undefined';\n  } catch {\n    return false;\n  }\n}\nexport const hasSessionStorage = () => {\n  try {\n    return typeof sessionStorage !== 'undefined';\n  } catch {\n    return false;\n  }\n}\n","import { AkitaConfig } from './config';\n\nexport type StoreConfigOptions = {\n  name: string;\n  resettable?: AkitaConfig['resettable'];\n  cache?: { ttl: number };\n  deepFreezeFn?: (o: any) => any;\n  idKey?: string;\n  producerFn?: AkitaConfig['producerFn'];\n};\n\nexport type UpdatableStoreConfigOptions = {\n  cache?: { ttl: number };\n};\n\nexport const configKey = 'akitaConfig';\n\nexport function StoreConfig(metadata: StoreConfigOptions) {\n  return function(constructor: Function) {\n    constructor[configKey] = { idKey: 'id' };\n\n    for (let i = 0, keys = Object.keys(metadata); i < keys.length; i++) {\n      const key = keys[i];\n      /* name is preserved read only key */\n      if (key === 'name') {\n        constructor[configKey]['storeName'] = metadata[key];\n      } else {\n        constructor[configKey][key] = metadata[key];\n      }\n    }\n  };\n}\n","import { Store } from './store';\nimport { isDev } from './env';\nimport { isBrowser } from './root';\nimport { Query } from './query';\n\n// @internal\nexport const __stores__: { [storeName: string]: Store<any> } = {};\n\n// @internal\nexport const __queries__: { [storeName: string]: Query<any> } = {};\n\nif (isBrowser && isDev()) {\n  (window as any).$$stores = __stores__;\n  (window as any).$$queries = __queries__;\n}\n","import { BehaviorSubject, Observable, of, Subject } from 'rxjs';\nimport { logAction } from './actions';\nimport { tap } from 'rxjs/operators';\n\n// @internal\nconst transactionFinished = new Subject();\n\n// @internal\nconst transactionInProcess = new BehaviorSubject(false);\n\nexport type TransactionManager = {\n  activeTransactions: number;\n  batchTransaction: Subject<boolean> | null;\n};\n\n// @internal\nexport const transactionManager: TransactionManager = {\n  activeTransactions: 0,\n  batchTransaction: null\n};\n\n// @internal\nexport function startBatch() {\n  if (!isTransactionInProcess()) {\n    transactionManager.batchTransaction = new Subject();\n  }\n  transactionManager.activeTransactions++;\n  transactionInProcess.next(true);\n}\n\n// @internal\nexport function endBatch() {\n  if (--transactionManager.activeTransactions === 0) {\n    transactionManager.batchTransaction.next(true);\n    transactionManager.batchTransaction.complete();\n    transactionInProcess.next(false);\n    transactionFinished.next(true);\n  }\n}\n\n// @internal\nexport function isTransactionInProcess() {\n  return transactionManager.activeTransactions > 0;\n}\n\n// @internal\nexport function commit(): Observable<boolean> {\n  return transactionManager.batchTransaction ? transactionManager.batchTransaction.asObservable() : of(true);\n}\n\n/**\n *  A logical transaction.\n *  Use this transaction to optimize the dispatch of all the stores.\n *  The following code will update the store, BUT  emits only once\n *\n *  @example\n *  applyTransaction(() => {\n *    this.todosStore.add(new Todo(1, title));\n *    this.todosStore.add(new Todo(2, title));\n *  });\n *\n */\nexport function applyTransaction<T>(action: () => T, thisArg = undefined): T {\n  startBatch();\n  try {\n    return action.apply(thisArg);\n  } finally {\n    logAction('@Transaction');\n    endBatch();\n  }\n}\n\n/**\n *  A logical transaction.\n *  Use this transaction to optimize the dispatch of all the stores.\n *\n *  The following code will update the store, BUT  emits only once.\n *\n *  @example\n *  @transaction\n *  addTodos() {\n *    this.todosStore.add(new Todo(1, title));\n *    this.todosStore.add(new Todo(2, title));\n *  }\n *\n *\n */\nexport function transaction() {\n  return function(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = function(...args) {\n      return applyTransaction(() => {\n        return originalMethod.apply(this, args);\n      }, this);\n    };\n\n    return descriptor;\n  };\n}\n\n/**\n *\n * RxJS custom operator that wraps the callback inside transaction\n *\n * @example\n *\n * return http.get().pipe(\n *    withTransaction(response > {\n *      store.setActive(1);\n *      store.update();\n *      store.updateEntity(1, {});\n *    })\n * )\n *\n */\nexport function withTransaction<T>(next: (value: T) => void) {\n  return function(source: Observable<T>): Observable<T> {\n    return source.pipe(tap(value => applyTransaction(() => next(value))));\n  };\n}\n","import { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { resetCustomAction, setAction } from './actions';\nimport { getAkitaConfig, getGlobalProducerFn } from './config';\nimport { deepFreeze } from './deepFreeze';\nimport { dispatchAdded, dispatchDeleted, dispatchUpdate } from './dispatchers';\nimport { __DEV__, isDev } from './env';\nimport { assertStoreHasName } from './errors';\nimport { isDefined } from './isDefined';\nimport { isFunction } from './isFunction';\nimport { isPlainObject } from './isPlainObject';\nimport { isBrowser } from './root';\nimport { configKey, StoreConfigOptions, UpdatableStoreConfigOptions } from './storeConfig';\nimport { __stores__ } from './stores';\nimport { commit, isTransactionInProcess } from './transaction';\nimport { StoreCache, UpdateStateCallback } from './types';\n\n/**\n *\n * Store for managing any type of data\n *\n * @example\n *\n * export interface SessionState {\n *   token: string;\n *   userDetails: UserDetails\n * }\n *\n * export function createInitialState(): SessionState {\n *  return {\n *    token: '',\n *    userDetails: null\n *  };\n * }\n *\n * @StoreConfig({ name: 'session' })\n * export class SessionStore extends Store<SessionState> {\n *   constructor() {\n *    super(createInitialState());\n *   }\n * }\n */\nexport class Store<S = any> {\n  private store: BehaviorSubject<Readonly<S>>;\n  private storeValue: S;\n  private inTransaction = false;\n  private _initialState: S;\n  protected cache: StoreCache = {\n    active: new BehaviorSubject<boolean>(false),\n    ttl: null\n  };\n\n  constructor(initialState: Partial<S>, protected options: Partial<StoreConfigOptions> = {}) {\n    this.onInit(initialState as S);\n  }\n\n  /**\n   *  Set the loading state\n   *\n   *  @example\n   *\n   *  store.setLoading(true)\n   *\n   */\n  setLoading(loading = false) {\n    if (loading !== (this._value() as S & { loading: boolean }).loading) {\n      isDev() && setAction('Set Loading');\n      this._setState(state => ({ ...state, loading } as S & { loading: boolean }));\n    }\n  }\n\n  /**\n   *\n   * Set whether the data is cached\n   *\n   * @example\n   *\n   * store.setHasCache(true)\n   * store.setHasCache(false)\n   * store.setHasCache(true, { restartTTL: true })\n   *\n   */\n  setHasCache(hasCache: boolean, options: { restartTTL: boolean } = { restartTTL: false }) {\n    if (hasCache !== this.cache.active.value) {\n      this.cache.active.next(hasCache);\n    }\n\n    if (options.restartTTL) {\n      const ttlConfig = this.getCacheTTL();\n      if (ttlConfig) {\n        if (this.cache.ttl !== null) {\n          clearTimeout(this.cache.ttl);\n        }\n        this.cache.ttl = <any>setTimeout(() => this.setHasCache(false), ttlConfig);\n      }\n    }\n  }\n\n  /**\n   *\n   * Sometimes we need to access the store value from a store\n   *\n   * @example middleware\n   *\n   */\n  getValue() {\n    return this.storeValue;\n  }\n\n  /**\n   *  Set the error state\n   *\n   *  @example\n   *\n   *  store.setError({text: 'unable to load data' })\n   *\n   */\n  setError<T>(error: T) {\n    if (error !== (this._value() as S & { error: any }).error) {\n      isDev() && setAction('Set Error');\n      this._setState(state => ({ ...state, error } as S & { error: any }));\n    }\n  }\n\n  // @internal\n  _select<R>(project: (store: S) => R): Observable<R> {\n    return this.store.asObservable().pipe(\n      map(project),\n      distinctUntilChanged()\n    );\n  }\n\n  // @internal\n  _value(): S {\n    return this.storeValue;\n  }\n\n  // @internal\n  _cache(): BehaviorSubject<boolean> {\n    return this.cache.active;\n  }\n\n  // @internal\n  get config(): StoreConfigOptions {\n    return this.constructor[configKey] || {};\n  }\n\n  // @internal\n  get storeName() {\n    return (this.config as StoreConfigOptions & { storeName: string }).storeName || (this.options as StoreConfigOptions & { storeName: string }).storeName || this.options.name;\n  }\n\n  // @internal\n  get deepFreeze() {\n    return this.config.deepFreezeFn || this.options.deepFreezeFn || deepFreeze;\n  }\n\n  // @internal\n  get cacheConfig() {\n    return this.config.cache || this.options.cache;\n  }\n\n  get _producerFn() {\n    return this.config.producerFn || this.options.producerFn || getGlobalProducerFn();\n  }\n\n  // @internal\n  get resettable() {\n    return isDefined(this.config.resettable) ? this.config.resettable : this.options.resettable;\n  }\n\n  // @internal\n  _setState(newState: ((state: Readonly<S>) => S) | S, _dispatchAction = true) {\n    if (isFunction(newState)) {\n      const _newState = newState(this._value());\n      this.storeValue = __DEV__ ? this.deepFreeze(_newState) : _newState;\n    } else {\n      this.storeValue = newState;\n    }\n\n    if (!this.store) {\n      this.store = new BehaviorSubject(this.storeValue);\n      return;\n    }\n\n    if (isTransactionInProcess()) {\n      this.handleTransaction();\n      return;\n    }\n\n    this.dispatch(this.storeValue, _dispatchAction);\n  }\n\n  /**\n   *\n   * Reset the current store back to the initial value\n   *\n   * @example\n   *\n   * store.reset()\n   *\n   */\n  reset() {\n    if (this.isResettable()) {\n      isDev() && setAction('Reset');\n      this._setState(() => Object.assign({}, this._initialState));\n      this.setHasCache(false);\n    } else {\n      isDev() && console.warn(`You need to enable the reset functionality`);\n    }\n  }\n\n  /**\n   *\n   * Update the store's value\n   *\n   * @example\n   *\n   * this.store.update(state => {\n   *   return {...}\n   * })\n   */\n  update(stateCallback: UpdateStateCallback<S>);\n  /**\n   *\n   * @example\n   *\n   *  this.store.update({ token: token })\n   */\n  update(state: Partial<S>);\n  update(stateOrCallback: Partial<S> | UpdateStateCallback<S>) {\n    isDev() && setAction('Update');\n\n    let newState;\n    const currentState = this._value();\n    if (isFunction(stateOrCallback)) {\n      newState = isFunction(this._producerFn) ? this._producerFn(currentState, stateOrCallback) : stateOrCallback(currentState);\n    } else {\n      newState = stateOrCallback;\n    }\n\n    const withHook = this.akitaPreUpdate(currentState, { ...currentState, ...newState } as S);\n    const resolved = isPlainObject(currentState) ? withHook : new (currentState as any).constructor(withHook);\n    this._setState(resolved);\n  }\n\n  updateStoreConfig(newOptions: UpdatableStoreConfigOptions) {\n    this.options = { ...this.options, ...newOptions };\n  }\n\n  // @internal\n  akitaPreUpdate(_: Readonly<S>, nextState: Readonly<S>): S {\n    return nextState;\n  }\n\n  ngOnDestroy() {\n    this.destroy();\n  }\n\n  /**\n   *\n   * Destroy the store\n   *\n   * @example\n   *\n   * store.destroy()\n   *\n   */\n  destroy() {\n    const hmrEnabled = isBrowser ? (window as any).hmrEnabled : false;\n    if (!hmrEnabled && this === __stores__[this.storeName]) {\n      delete __stores__[this.storeName];\n      dispatchDeleted(this.storeName);\n      this.setHasCache(false);\n      this.cache.active.complete();\n    }\n  }\n\n  private onInit(initialState: S) {\n    __stores__[this.storeName] = this;\n    this._setState(() => initialState);\n    dispatchAdded(this.storeName);\n    if (this.isResettable()) {\n      this._initialState = initialState;\n    }\n    isDev() && assertStoreHasName(this.storeName, this.constructor.name);\n  }\n\n  private dispatch(state: S, _dispatchAction = true) {\n    this.store.next(state);\n    if (_dispatchAction) {\n      dispatchUpdate(this.storeName);\n      resetCustomAction();\n    }\n  }\n\n  private watchTransaction() {\n    commit().subscribe(() => {\n      this.inTransaction = false;\n      this.dispatch(this._value());\n    });\n  }\n\n  private isResettable() {\n    if (this.resettable === false) {\n      return false;\n    }\n    return this.resettable || getAkitaConfig().resettable;\n  }\n\n  private handleTransaction() {\n    if (!this.inTransaction) {\n      this.watchTransaction();\n      this.inTransaction = true;\n    }\n  }\n\n  private getCacheTTL() {\n    return (this.cacheConfig && this.cacheConfig.ttl) || getAkitaConfig().ttl;\n  }\n}\n","// @internal\nexport function isObject(value: any) {\n  const type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n","import { ID, IDS } from './types';\nimport { isNil } from './isNil';\nimport { isObject } from './isObject';\nimport { isArray } from './isArray';\n\nexport type SetActiveOptions = { prev?: boolean; next?: boolean; wrap?: boolean };\n\n// @internal\nexport function getActiveEntities(idOrOptions: IDS | SetActiveOptions | null, ids: ID[], currentActive: IDS | null) {\n  let result;\n\n  if (isArray(idOrOptions)) {\n    result = idOrOptions;\n  } else {\n    if (isObject(idOrOptions)) {\n      if (isNil(currentActive)) return;\n      (idOrOptions as SetActiveOptions) = Object.assign({ wrap: true }, idOrOptions);\n      const currentIdIndex = ids.indexOf(currentActive as ID);\n      if ((idOrOptions as SetActiveOptions).prev) {\n        const isFirst = currentIdIndex === 0;\n        if (isFirst && !(idOrOptions as SetActiveOptions).wrap) return;\n        result = isFirst ? ids[ids.length - 1] : (ids[currentIdIndex - 1] as any);\n      } else if ((idOrOptions as SetActiveOptions).next) {\n        const isLast = ids.length === currentIdIndex + 1;\n        if (isLast && !(idOrOptions as SetActiveOptions).wrap) return;\n        result = isLast ? ids[0] : (ids[currentIdIndex + 1] as any);\n      }\n    } else {\n      if (idOrOptions === currentActive) return;\n      result = idOrOptions as ID;\n    }\n  }\n\n  return result;\n}\n","import { EntityState, PreAddEntity } from './types';\nimport { hasEntity } from './hasEntity';\n\nexport type AddEntitiesParams<State, Entity> = {\n  state: State;\n  entities: Entity[];\n  idKey: string;\n  options: AddEntitiesOptions;\n  preAddEntity: PreAddEntity<Entity>;\n};\n\nexport type AddEntitiesOptions = { prepend?: boolean; loading?: boolean };\n\n// @internal\nexport function addEntities<S extends EntityState<E>, E>({ state, entities, idKey, options = {}, preAddEntity }: AddEntitiesParams<S, E>) {\n  let newEntities = {};\n  let newIds = [];\n  let hasNewEntities = false;\n\n  for (const entity of entities) {\n    if (hasEntity(state.entities, entity[idKey]) === false) {\n      // evaluate the middleware first to support dynamic ids\n      const current = preAddEntity(entity);\n      const entityId = current[idKey];\n      newEntities[entityId] = current;\n      if (options.prepend) newIds.unshift(entityId);\n      else newIds.push(entityId);\n\n      hasNewEntities = true;\n    }\n  }\n\n  return hasNewEntities\n    ? {\n        newState: {\n          ...state,\n          entities: {\n            ...state.entities,\n            ...newEntities\n          },\n          ids: options.prepend ? [...newIds, ...state.ids] : [...state.ids, ...newIds]\n        },\n        newIds\n      }\n    : null;\n}\n","import { isNil } from './isNil';\n\n// @internal\nexport function coerceArray<T>(value: T | T[]): T[] {\n  if (isNil(value)) {\n    return [];\n  }\n  return Array.isArray(value) ? value : [value];\n}\n","import { EntityState, ID, StateWithActive } from './types';\nimport { isNil } from './isNil';\nimport { hasActiveState, isMultiActiveState, resolveActiveEntity } from './activeState';\n\nexport type RemoveEntitiesParams<State, Entity> = {\n  state: StateWithActive<State>;\n  ids: any[];\n};\n\n// @internal\nexport function removeEntities<S extends EntityState<E>, E>({ state, ids }: RemoveEntitiesParams<S, E>): S {\n  if (isNil(ids)) return removeAllEntities(state);\n  const entities = state.entities;\n  let newEntities = {};\n\n  for (const id of state.ids) {\n    if (ids.includes(id) === false) {\n      newEntities[id] = entities[id];\n    }\n  }\n\n  const newState = {\n    ...state,\n    entities: newEntities,\n    ids: state.ids.filter(current => ids.includes(current) === false)\n  };\n\n  if (hasActiveState(state)) {\n    newState.active = resolveActiveEntity(newState);\n  }\n\n  return newState;\n}\n\n// @internal\nexport function removeAllEntities<S>(state: StateWithActive<S>): S {\n  return {\n    ...state,\n    entities: {},\n    ids: [],\n    active: isMultiActiveState(state.active) ? [] : null\n  };\n}\n","import { EntityState } from './index';\n\n// @internal\nexport const getInitialEntitiesState = () =>\n  ({\n    entities: {},\n    ids: [],\n    loading: true,\n    error: null\n  } as EntityState);\n","import { EntityState, ID, PreUpdateEntity, UpdateStateCallback } from './types';\nimport { isFunction } from './isFunction';\nimport { hasEntity } from './hasEntity';\nimport { isPlainObject } from './isPlainObject';\n\nexport type UpdateEntitiesParams<State, Entity> = {\n  state: State;\n  ids: any[];\n  idKey: string;\n  newStateOrFn: UpdateStateCallback<Entity> | Partial<Entity> | Partial<State>;\n  preUpdateEntity: PreUpdateEntity<Entity>;\n  producerFn;\n};\n\n// @internal\nexport function updateEntities<S extends EntityState<E>, E>({ state, ids, idKey, newStateOrFn, preUpdateEntity, producerFn }: UpdateEntitiesParams<S, E>) {\n  const updatedEntities = {};\n\n  let isUpdatingIdKey = false;\n  let idToUpdate: ID;\n\n  for (const id of ids) {\n    // if the entity doesn't exist don't do anything\n    if (hasEntity(state.entities, id) === false) {\n      continue;\n    }\n\n    const oldEntity = state.entities[id];\n    let newState;\n    if (isFunction(newStateOrFn)) {\n      newState = isFunction(producerFn) ? producerFn(oldEntity, newStateOrFn) : newStateOrFn(oldEntity);\n    } else {\n      newState = newStateOrFn;\n    }\n\n    const isIdChanged = newState.hasOwnProperty(idKey) && newState[idKey] !== oldEntity[idKey];\n    let newEntity: E;\n    idToUpdate = id;\n\n    if (isIdChanged) {\n      isUpdatingIdKey = true;\n      idToUpdate = newState[idKey];\n    }\n\n    const merged = {\n      ...oldEntity,\n      ...newState\n    };\n\n    if (isPlainObject(oldEntity)) {\n      newEntity = merged;\n    } else {\n      /**\n       * In case that new state is class of it's own, there's\n       * a possibility that it will be different than the old\n       * class.\n       * For example, Old state is an instance of animal class\n       * and new state is instance of person class.\n       * To avoid run over new person class with the old animal\n       * class we check if the new state is a class of it's own.\n       * If so, use it. Otherwise, use the old state class\n       */\n      if (isPlainObject(newState)) {\n        newEntity = new (oldEntity as any).constructor(merged);\n      } else {\n        newEntity = new (newState as any).constructor(merged);\n      }\n    }\n\n    updatedEntities[idToUpdate] = preUpdateEntity(oldEntity, newEntity);\n  }\n\n  let updatedIds = state.ids;\n  let stateEntities = state.entities;\n\n  if (isUpdatingIdKey) {\n    const [id] = ids;\n    const { [id]: deletedEntity, ...rest } = state.entities;\n    stateEntities = rest;\n    updatedIds = state.ids.map(current => (current === id ? idToUpdate : current));\n  }\n\n  return {\n    ...state,\n    entities: {\n      ...stateEntities,\n      ...updatedEntities\n    },\n    ids: updatedIds\n  };\n}\n","// @internal\nexport function isUndefined(value: any): value is undefined {\n  return value === undefined;\n}\n","export enum EntityActions {\n  Set,\n  Add,\n  Update,\n  Remove\n}\n\nexport interface EntityAction<IDType> {\n  type: EntityActions;\n  ids: IDType[];\n}\n","export const DEFAULT_ID_KEY = 'id';\n","import { isEmpty } from './isEmpty';\nimport { SetEntities, setEntities } from './setEntities';\nimport { Store } from './store';\nimport { Constructor, EntityState, EntityUICreateFn, IDS, OrArray, StateWithActive, UpdateEntityPredicate, UpdateStateCallback, getEntityType, getIDType } from './types';\nimport { getActiveEntities, SetActiveOptions } from './getActiveEntities';\nimport { addEntities, AddEntitiesOptions } from './addEntities';\nimport { coerceArray } from './coerceArray';\nimport { removeEntities } from './removeEntities';\nimport { getInitialEntitiesState } from './getInitialEntitiesState';\nimport { isDefined } from './isDefined';\nimport { updateEntities } from './updateEntities';\nimport { transaction } from './transaction';\nimport { isNil } from './isNil';\nimport { isFunction } from './isFunction';\nimport { isUndefined } from './isUndefined';\nimport { StoreConfigOptions } from './storeConfig';\nimport { logAction, setAction } from './actions';\nimport { isDev } from './env';\nimport { hasEntity } from './hasEntity';\nimport { Observable, Subject } from 'rxjs';\nimport { EntityAction, EntityActions } from './entityActions';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\n\n/**\n *\n * Store for managing a collection of entities\n *\n * @example\n *\n * export interface WidgetsState extends EntityState<Widget> { }\n *\n * @StoreConfig({ name: 'widgets' })\n *  export class WidgetsStore extends EntityStore<WidgetsState> {\n *   constructor() {\n *     super();\n *   }\n * }\n *\n *\n */\nexport class EntityStore<S extends EntityState = any, EntityType = getEntityType<S>, IDType = getIDType<S>> extends Store<S> {\n  ui: EntityUIStore<any, EntityType>;\n  private entityActions = new Subject<EntityAction<IDType>>();\n\n  constructor(initialState: Partial<S> = {}, protected options: Partial<StoreConfigOptions> = {}) {\n    super({ ...getInitialEntitiesState(), ...initialState }, options);\n  }\n\n  // @internal\n  get selectEntityAction$(): Observable<EntityAction<IDType>> {\n    return this.entityActions.asObservable();\n  }\n\n  // @internal\n  get idKey() {\n    return (this.config as StoreConfigOptions).idKey || this.options.idKey || DEFAULT_ID_KEY;\n  }\n\n  /**\n   *\n   * Replace current collection with provided collection\n   *\n   * @example\n   *\n   * this.store.set([Entity, Entity])\n   * this.store.set({ids: [], entities: {}})\n   * this.store.set({ 1: {}, 2: {}})\n   *\n   */\n  set(entities: SetEntities<EntityType>, options: { activeId?: IDType | null } = {}) {\n    if (isNil(entities)) return;\n\n    isDev() && setAction('Set Entity');\n\n    const isNativePreAdd = this.akitaPreAddEntity === EntityStore.prototype.akitaPreAddEntity;\n\n    this._setState(state => {\n      const newState = setEntities({\n        state,\n        entities,\n        idKey: this.idKey,\n        preAddEntity: this.akitaPreAddEntity,\n        isNativePreAdd\n      });\n\n      if (isUndefined(options.activeId) === false) {\n        (newState as any).active = options.activeId;\n      }\n\n      return newState;\n    });\n\n    this.setHasCache(true, { restartTTL: true });\n\n    if (this.hasInitialUIState()) {\n      this.handleUICreation();\n    }\n\n    this.entityActions.next({ type: EntityActions.Set, ids: this.ids });\n  }\n\n  /**\n   * Add entities\n   *\n   * @example\n   *\n   * this.store.add([Entity, Entity])\n   * this.store.add(Entity)\n   * this.store.add(Entity, { prepend: true })\n   *\n   * this.store.add(Entity, { loading: false })\n   */\n  add(entities: OrArray<EntityType>, options: AddEntitiesOptions = { loading: false }) {\n    const collection = coerceArray(entities);\n\n    if (isEmpty(collection)) return;\n\n    const data = addEntities({\n      state: this._value(),\n      preAddEntity: this.akitaPreAddEntity,\n      entities: collection,\n      idKey: this.idKey,\n      options\n    });\n\n    if (data) {\n      isDev() && setAction('Add Entity');\n      data.newState.loading = options.loading;\n\n      this._setState(() => data.newState);\n\n      if (this.hasInitialUIState()) {\n        this.handleUICreation(true);\n      }\n\n      this.entityActions.next({ type: EntityActions.Add, ids: data.newIds });\n    }\n  }\n\n  /**\n   *\n   * Update entities\n   *\n   * @example\n   *\n   * store.update(1, entity => ...)\n   * store.update([1, 2, 3], entity => ...)\n   * store.update(null, entity => ...)\n   */\n  update(id: OrArray<IDType> | null, newStateFn: UpdateStateCallback<EntityType>);\n  /**\n   * store.update(1, { name: newName })\n   */\n  update(id: OrArray<IDType> | null, newState: Partial<EntityType>);\n  /**\n   * store.update(entity => entity.price > 3, entity => ({ name: newName }))\n   */\n  update(predicate: UpdateEntityPredicate<EntityType>, newStateFn: UpdateStateCallback<EntityType>);\n  /**\n   * store.update(entity => entity.price > 3, { name: newName })\n   */\n  update(predicate: UpdateEntityPredicate<EntityType>, newState: Partial<EntityType>);\n  /** Support non-entity updates */\n  update(newState: UpdateStateCallback<S>);\n  update(newState: Partial<S>);\n  update(\n    idsOrFnOrState: OrArray<IDType> | null | Partial<S> | UpdateStateCallback<S> | UpdateEntityPredicate<EntityType>,\n    newStateOrFn?: UpdateStateCallback<EntityType> | Partial<EntityType> | Partial<S>\n  ) {\n    if (isUndefined(newStateOrFn)) {\n      super.update(idsOrFnOrState as Partial<S>);\n      return;\n    }\n    let ids: IDType[] = [];\n\n    if (isFunction(idsOrFnOrState)) {\n      // We need to filter according the predicate function\n      ids = this.ids.filter(id => (idsOrFnOrState as UpdateEntityPredicate<EntityType>)(this.entities[id]));\n    } else {\n      // If it's nil we want all of them\n      ids = isNil(idsOrFnOrState) ? this.ids : coerceArray(idsOrFnOrState as OrArray<IDType>);\n    }\n\n    if (isEmpty(ids)) return;\n\n    isDev() && setAction('Update Entity', ids);\n    this._setState(state =>\n      updateEntities({\n        idKey: this.idKey,\n        ids,\n        preUpdateEntity: this.akitaPreUpdateEntity,\n        state,\n        newStateOrFn,\n        producerFn: this._producerFn\n      })\n    );\n\n    this.entityActions.next({ type: EntityActions.Update, ids });\n  }\n\n  /**\n   *\n   * Create or update\n   *\n   * @example\n   *\n   * store.upsert(1, { active: true })\n   * store.upsert([2, 3], { active: true })\n   * store.upsert([2, 3], entity => ({ isOpen: !entity.isOpen}))\n   *\n   */\n  @transaction()\n  upsert(ids: OrArray<IDType>, newState: Partial<EntityType> | EntityType | UpdateStateCallback<EntityType> | EntityType[], options: { baseClass?: Constructor } = {}) {\n    const toArray = coerceArray(ids);\n    const predicate = isUpdate => id => hasEntity(this.entities, id) === isUpdate;\n    const isClassBased = isFunction(options.baseClass);\n    const updateIds = toArray.filter(predicate(true));\n    const newEntities = toArray.filter(predicate(false)).map(id => {\n      let entity = isFunction(newState) ? newState({} as EntityType) : newState;\n      const withId = { ...(entity as EntityType), [this.idKey]: id };\n      if (isClassBased) {\n        return new options.baseClass(withId);\n      }\n      return withId;\n    });\n\n    // it can be any of the three types\n    this.update(updateIds as any, newState as any);\n    this.add(newEntities);\n    isDev() && logAction('Upsert Entity');\n  }\n\n  /**\n   *\n   * Upsert entity collection (idKey must be present)\n   *\n   * @example\n   *\n   * store.upsertMany([ { id: 1 }, { id: 2 }]);\n   *\n   * store.upsertMany([ { id: 1 }, { id: 2 }], { loading: true  });\n   * store.upsertMany([ { id: 1 }, { id: 2 }], { baseClass: Todo  });\n   *\n   */\n  upsertMany(entities: EntityType[], options: { baseClass?: Constructor; loading?: boolean } = {}) {\n    const addedIds = [];\n    const updatedIds = [];\n    const updatedEntities = {};\n\n    // Update the state directly to optimize performance\n    for (const entity of entities) {\n      const withPreCheckHook = this.akitaPreCheckEntity(entity);\n      const id = withPreCheckHook[this.idKey];\n      if (hasEntity(this.entities, id)) {\n        const prev = this._value().entities[id];\n        const merged = { ...this._value().entities[id], ...withPreCheckHook };\n        const next = options.baseClass ? new options.baseClass(merged) : merged;\n        const withHook = this.akitaPreUpdateEntity(prev, next);\n        const nextId = withHook[this.idKey];\n        updatedEntities[nextId] = withHook;\n        updatedIds.push(nextId);\n      } else {\n        const newEntity = options.baseClass ? new options.baseClass(withPreCheckHook) : withPreCheckHook;\n        const withHook = this.akitaPreAddEntity(newEntity);\n        const nextId = withHook[this.idKey];\n        addedIds.push(nextId);\n        updatedEntities[nextId] = withHook;\n      }\n    }\n\n    isDev() && logAction('Upsert Many');\n\n    this._setState(state => ({\n      ...state,\n      ids: addedIds.length ? [...state.ids, ...addedIds] : state.ids,\n      entities: {\n        ...state.entities,\n        ...updatedEntities\n      },\n      loading: !!options.loading\n    }));\n\n    updatedIds.length && this.entityActions.next({ type: EntityActions.Update, ids: updatedIds });\n    addedIds.length && this.entityActions.next({ type: EntityActions.Add, ids: addedIds });\n    if (addedIds.length && this.hasUIStore()) {\n      this.handleUICreation(true);\n    }\n  }\n\n  /**\n   *\n   * Replace one or more entities (except the id property)\n   *\n   *\n   * @example\n   *\n   * this.store.replace(5, newEntity)\n   * this.store.replace([1,2,3], newEntity)\n   */\n  replace(ids: IDS, newState: Partial<EntityType>) {\n    const toArray = coerceArray(ids);\n    if (isEmpty(toArray)) return;\n    let replaced = {};\n    for (const id of toArray) {\n      newState[this.idKey] = id;\n      replaced[id] = newState;\n    }\n    isDev() && setAction('Replace Entity', ids);\n    this._setState(state => ({\n      ...state,\n      entities: {\n        ...state.entities,\n        ...replaced\n      }\n    }));\n  }\n\n  /**\n   *\n   * Move entity inside the collection\n   *\n   *\n   * @example\n   *\n   * this.store.move(fromIndex, toIndex)\n   */\n  move(from: number, to: number) {\n    const ids = this.ids.slice();\n    ids.splice(to < 0 ? ids.length + to : to, 0, ids.splice(from, 1)[0]);\n\n    isDev() && setAction('Move Entity');\n    this._setState(state => ({\n      ...state,\n      // Change the entities reference so that selectAll emit\n      entities: {\n        ...state.entities\n      },\n      ids\n    }));\n  }\n\n  /**\n   *\n   * Remove one or more entities\n   *\n   * @example\n   *\n   * this.store.remove(5)\n   * this.store.remove([1,2,3])\n   * this.store.remove()\n   */\n  remove(id?: OrArray<IDType>);\n  /**\n   * this.store.remove(entity => entity.id === 1)\n   */\n  remove(predicate: (entity: Readonly<EntityType>) => boolean);\n  remove(idsOrFn?: OrArray<IDType> | ((entity: Readonly<EntityType>) => boolean)) {\n    if (isEmpty(this.ids)) return;\n\n    const idPassed = isDefined(idsOrFn);\n\n    // null means remove all\n    let ids: IDType[] | null = [];\n\n    if (isFunction(idsOrFn)) {\n      ids = this.ids.filter(entityId => idsOrFn(this.entities[entityId]));\n    } else {\n      ids = idPassed ? coerceArray(idsOrFn) : null;\n    }\n\n    if (isEmpty(ids)) return;\n\n    isDev() && setAction('Remove Entity', ids);\n    this._setState((state: StateWithActive<S>) => removeEntities({ state, ids }));\n    if (ids === null) {\n      this.setHasCache(false);\n    }\n\n    this.handleUIRemove(ids);\n    this.entityActions.next({ type: EntityActions.Remove, ids });\n  }\n\n  /**\n   *\n   * Update the active entity\n   *\n   * @example\n   *\n   * this.store.updateActive({ completed: true })\n   * this.store.updateActive(active => {\n   *   return {\n   *     config: {\n   *      ..active.config,\n   *      date\n   *     }\n   *   }\n   * })\n   */\n  updateActive(newStateOrCallback: UpdateStateCallback<EntityType> | Partial<EntityType>) {\n    const ids = coerceArray(this.active);\n    isDev() && setAction('Update Active', ids);\n    this.update(ids, newStateOrCallback as Partial<EntityType>);\n  }\n\n  /**\n   * Set the given entity as active\n   *\n   * @example\n   *\n   * store.setActive(1)\n   * store.setActive([1, 2, 3])\n   */\n  setActive(idOrOptions: S['active'] extends any[] ? S['active'] : (SetActiveOptions | S['active']));\n  setActive(idOrOptions: IDType | SetActiveOptions | null) {\n    const active = getActiveEntities(idOrOptions, this.ids, this.active);\n\n    if (active === undefined) {\n      return;\n    }\n\n    isDev() && setAction('Set Active', active);\n    this._setActive(active);\n  }\n\n  /**\n   * Add active entities\n   *\n   * @example\n   *\n   * store.addActive(2);\n   * store.addActive([3, 4, 5]);\n   */\n  addActive<T = OrArray<IDType>>(ids: T) {\n    const toArray = coerceArray(ids);\n    if (isEmpty(toArray)) return;\n    const everyExist = toArray.every(id => this.active.indexOf(id) > -1);\n    if (everyExist) return;\n\n    isDev() && setAction('Add Active', ids);\n    this._setState(state => {\n      /** Protect against case that one of the items in the array exist */\n      const uniques = Array.from(new Set([...(state.active as IDType[]), ...toArray]));\n      return {\n        ...state,\n        active: uniques\n      };\n    });\n  }\n\n  /**\n   * Remove active entities\n   *\n   * @example\n   *\n   * store.removeActive(2)\n   * store.removeActive([3, 4, 5])\n   */\n  removeActive<T = OrArray<IDType>>(ids: T) {\n    const toArray = coerceArray(ids);\n    if (isEmpty(toArray)) return;\n    const someExist = toArray.some(id => this.active.indexOf(id) > -1);\n    if (!someExist) return;\n\n    isDev() && setAction('Remove Active', ids);\n    this._setState(state => {\n      return {\n        ...state,\n        active: Array.isArray(state.active) ? state.active.filter(currentId => toArray.indexOf(currentId) === -1) : null\n      };\n    });\n  }\n\n  /**\n   * Toggle active entities\n   *\n   * @example\n   *\n   * store.toggle(2)\n   * store.toggle([3, 4, 5])\n   */\n  @transaction()\n  toggleActive<T = OrArray<IDType>>(ids: T) {\n    const toArray = coerceArray(ids);\n    const filterExists = remove => id => this.active.includes(id) === remove;\n    const remove = toArray.filter(filterExists(true));\n    const add = toArray.filter(filterExists(false));\n    this.removeActive(remove);\n    this.addActive(add);\n    isDev() && logAction('Toggle Active');\n  }\n\n  /**\n   *\n   * Create sub UI store for managing Entity's UI state\n   *\n   * @example\n   *\n   * export type ProductUI = {\n   *   isLoading: boolean;\n   *   isOpen: boolean\n   * }\n   *\n   * interface ProductsUIState extends EntityState<ProductUI> {}\n   *\n   * export class ProductsStore EntityStore<ProductsState, Product> {\n   *   ui: EntityUIStore<ProductsUIState, ProductUI>;\n   *\n   *   constructor() {\n   *     super();\n   *     this.createUIStore();\n   *   }\n   *\n   * }\n   */\n  createUIStore(initialState = {}, storeConfig: Partial<StoreConfigOptions> = {}) {\n    const defaults: Partial<StoreConfigOptions> = { name: `UI/${this.storeName}`, idKey: this.idKey };\n    this.ui = new EntityUIStore(initialState, { ...defaults, ...storeConfig });\n    return this.ui;\n  }\n\n  // @internal\n  destroy() {\n    super.destroy();\n    if (this.ui instanceof EntityStore) {\n      this.ui.destroy();\n    }\n    this.entityActions.complete();\n  }\n\n  // @internal\n  akitaPreUpdateEntity(_: Readonly<EntityType>, nextEntity: any): EntityType {\n    return nextEntity as EntityType;\n  }\n\n  // @internal\n  akitaPreAddEntity(newEntity: any): EntityType {\n    return newEntity as EntityType;\n  }\n\n  // @internal\n  akitaPreCheckEntity(newEntity: Readonly<EntityType>): EntityType {\n    return newEntity;\n  }\n\n  private get ids() {\n    return this._value().ids;\n  }\n\n  private get entities() {\n    return this._value().entities;\n  }\n\n  private get active() {\n    return this._value().active;\n  }\n\n  private _setActive(ids: OrArray<IDType>) {\n    this._setState(state => {\n      return {\n        ...state,\n        active: ids\n      };\n    });\n  }\n\n  private handleUICreation(add = false) {\n    const ids = this.ids;\n    const isFunc = isFunction(this.ui._akitaCreateEntityFn);\n    let uiEntities;\n    const createFn = id => {\n      const current = this.entities[id];\n      const ui = isFunc ? this.ui._akitaCreateEntityFn(current) : this.ui._akitaCreateEntityFn;\n      return {\n        [this.idKey]: current[this.idKey],\n        ...ui\n      };\n    };\n\n    if (add) {\n      uiEntities = this.ids.filter(id => isUndefined(this.ui.entities[id])).map(createFn);\n    } else {\n      uiEntities = ids.map(createFn);\n    }\n\n    add ? this.ui.add(uiEntities) : this.ui.set(uiEntities);\n  }\n\n  private hasInitialUIState() {\n    return this.hasUIStore() && isUndefined(this.ui._akitaCreateEntityFn) === false;\n  }\n\n  private handleUIRemove(ids: IDType[]) {\n    if (this.hasUIStore()) {\n      this.ui.remove(ids);\n    }\n  }\n\n  private hasUIStore() {\n    return this.ui instanceof EntityUIStore;\n  }\n}\n\n// @internal\nexport class EntityUIStore<UIState, DEPRECATED = any> extends EntityStore<UIState> {\n  _akitaCreateEntityFn: EntityUICreateFn;\n\n  constructor(initialState = {}, storeConfig: Partial<StoreConfigOptions> = {}) {\n    super(initialState, storeConfig);\n  }\n\n  /**\n   *\n   * Set the initial UI entity state. This function will determine the entity's\n   * initial state when we call `set()` or `add()`.\n   *\n   * @example\n   *\n   * constructor() {\n   *   super();\n   *   this.createUIStore().setInitialEntityState(entity => ({ isLoading: false, isOpen: true }));\n   *   this.createUIStore().setInitialEntityState({ isLoading: false, isOpen: true });\n   * }\n   *\n   */\n  setInitialEntityState<EntityUI = any, Entity = any>(createFn: EntityUICreateFn<EntityUI, Entity>) {\n    this._akitaCreateEntityFn = createFn;\n  }\n}\n","import { ID, IDS, ItemPredicate } from './types';\nimport { coerceArray } from './coerceArray';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { MonoTypeOperatorFunction, Observable } from 'rxjs';\nimport { isArray } from './isArray';\nimport { isFunction } from './isFunction';\nimport { isEmpty } from './isEmpty';\n\n// @internal\nexport function find<T>(collection: T[], idsOrPredicate: IDS | ItemPredicate, idKey: string) {\n  const result = [];\n  if (isFunction(idsOrPredicate)) {\n    for (const entity of collection) {\n      if (idsOrPredicate(entity) === true) {\n        result.push(entity);\n      }\n    }\n  } else {\n    const toSet = coerceArray(idsOrPredicate).reduce((acc, current) => acc.add(current), new Set());\n\n    for (const entity of collection) {\n      if (toSet.has(entity[idKey])) {\n        result.push(entity);\n      }\n    }\n  }\n\n  return result;\n}\n\n// @internal\nexport function distinctUntilArrayItemChanged<T>(): MonoTypeOperatorFunction<T[]> {\n  return distinctUntilChanged((prevCollection: T[], currentCollection: T[]) => {\n    if (prevCollection === currentCollection) {\n      return true;\n    }\n\n    if (isArray(prevCollection) === false || isArray(currentCollection) === false) {\n      return false;\n    }\n\n    if (isEmpty(prevCollection) && isEmpty(currentCollection)) {\n      return true;\n    }\n\n    // if item is new in the current collection but not exist in the prev collection\n    const hasNewItem = hasChange(currentCollection, prevCollection);\n\n    if (hasNewItem) {\n      return false;\n    }\n\n    const isOneOfItemReferenceChanged = hasChange(prevCollection, currentCollection);\n\n    // return false means there is a change and we want to call next()\n    return isOneOfItemReferenceChanged === false;\n  });\n}\n\n// @internal\nfunction hasChange<T>(first: T[], second: T[]) {\n  const hasChange = second.some(currentItem => {\n    const oldItem = first.find(prevItem => prevItem === currentItem);\n    return oldItem === undefined;\n  });\n\n  return hasChange;\n}\n\n/**\n * Find items in a collection\n *\n * @example\n *\n *  selectEntity(1, 'comments').pipe(\n *   arrayFind(comment => comment.text = 'text')\n * )\n */\nexport function arrayFind<T>(ids: ItemPredicate<T>, idKey?: never): (source: Observable<T[]>) => Observable<T[]>;\n/**\n * @example\n *\n * selectEntity(1, 'comments').pipe(\n *   arrayFind(3)\n * )\n */\nexport function arrayFind<T>(ids: ID, idKey?: string): (source: Observable<T[]>) => Observable<T>;\n/**\n * @example\n *\n * selectEntity(1, 'comments').pipe(\n *   arrayFind([1, 2, 3])\n * )\n */\nexport function arrayFind<T>(ids: ID[], idKey?: string): (source: Observable<T[]>) => Observable<T[]>;\nexport function arrayFind<T>(idsOrPredicate: ID[] | ID | ItemPredicate<T>, idKey?: string): (source: Observable<T[]>) => Observable<T[] | T> {\n  return function(source: Observable<T[]>) {\n    return source.pipe(\n      map((collection: T[] | undefined | null) => {\n        // which means the user deleted the root entity or set the collection to nil\n        if (isArray(collection) === false) {\n          return collection;\n        }\n        return find(collection, idsOrPredicate, idKey || DEFAULT_ID_KEY);\n      }),\n      distinctUntilArrayItemChanged(),\n      map(value => {\n        if (isArray(value) === false) {\n          return value;\n        }\n\n        if (isArray(idsOrPredicate) || isFunction(idsOrPredicate)) {\n          return value;\n        }\n\n        return value[0];\n      })\n    );\n  };\n}\n","export enum Order {\n  ASC = 'asc',\n  DESC = 'desc'\n}\n\n// @internal\nexport function compareValues(key, order: Order = Order.ASC) {\n  return function(a, b) {\n    if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n      return 0;\n    }\n\n    const varA = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key];\n    const varB = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key];\n\n    let comparison = 0;\n    if (varA > varB) {\n      comparison = 1;\n    } else if (varA < varB) {\n      comparison = -1;\n    }\n    return order == Order.DESC ? comparison * -1 : comparison;\n  };\n}\n","import { EntityState, SelectOptions } from './types';\nimport { isFunction } from './isFunction';\nimport { compareValues } from './sort';\nimport { coerceArray } from './coerceArray';\n\n// @internal\nexport function entitiesToArray<E, S extends EntityState>(state: S, options: SelectOptions<E>): E[] {\n  let arr = [];\n  const { ids, entities } = state;\n  const { filterBy, limitTo, sortBy, sortByOrder } = options;\n\n  for (let i = 0; i < ids.length; i++) {\n    const entity = entities[ids[i]];\n    if (!filterBy) {\n      arr.push(entity);\n      continue;\n    }\n\n    const toArray = coerceArray(filterBy);\n    const allPass = toArray.every(fn => fn(entity, i));\n    if (allPass) {\n      arr.push(entity);\n    }\n  }\n\n  if (sortBy) {\n    let _sortBy: any = isFunction(sortBy) ? sortBy : compareValues(sortBy, sortByOrder);\n    arr = arr.sort((a, b) => _sortBy(a, b, state));\n  }\n\n  const length = Math.min(limitTo || arr.length, arr.length);\n\n  return length === arr.length ? arr : arr.slice(0, length);\n}\n","import { EntityState } from './types';\nimport { isNil } from './isNil';\nimport { coerceArray } from './coerceArray';\n\n// @internal\nexport function entitiesToMap<S extends EntityState<E>, E>(state: S, options) {\n  const map = {};\n  const { filterBy, limitTo } = options;\n  const { ids, entities } = state;\n\n  if (!filterBy && !limitTo) {\n    return entities;\n  }\n  const hasLimit = isNil(limitTo) === false;\n\n  if (filterBy && hasLimit) {\n    let count = 0;\n    for (let i = 0, length = ids.length; i < length; i++) {\n      if (count === limitTo) break;\n      const id = ids[i];\n      const entity = entities[id];\n      const allPass = coerceArray(filterBy).every(fn => fn(entity, i));\n      if (allPass) {\n        map[id] = entity;\n        count++;\n      }\n    }\n  } else {\n    const finalLength = Math.min(limitTo || ids.length, ids.length);\n\n    for (let i = 0; i < finalLength; i++) {\n      const id = ids[i];\n      const entity = entities[id];\n\n      if (!filterBy) {\n        map[id] = entity;\n        continue;\n      }\n\n      const allPass = coerceArray(filterBy).every(fn => fn(entity, i));\n      if (allPass) {\n        map[id] = entity;\n      }\n    }\n  }\n\n  return map;\n}\n","// @internal\nexport function isString(value: any): value is string {\n  return typeof value === 'string';\n}\n","import { isUndefined } from './isUndefined';\nimport { isString } from './isString';\nimport { ItemPredicate } from './types';\n\n// @internal\nexport function findEntityByPredicate<E>(predicate: ItemPredicate<E>, entities) {\n    for(const entityId of Object.keys(entities)) {\n      if(predicate(entities[entityId]) === true) {\n        return entityId;\n      }\n    }\n\n    return undefined;\n}\n\n// @internal\nexport function getEntity( id, project ) {\n  return function(entities) {\n    const entity = entities[id];\n\n    if(isUndefined(entity)) {\n      return undefined;\n    }\n\n    if(!project) {\n      return entity;\n    }\n\n    if(isString(project)) {\n      return entity[project];\n    }\n\n    return (project as Function)(entity);\n  };\n\n}\n","// @internal\nexport function mapSkipUndefined<T, V>(arr: T[], callbackFn: (value: T, index: number, array: T[]) => V) {\n  return arr.reduce((result, value, index, array) => {\n    const val = callbackFn(value, index, array);\n    if (val !== undefined) {\n      result.push(val);\n    }\n    return result;\n  }, []);\n}\n","import { Order } from './sort';\n\nexport type SortBy<E, S = any> = ((a: E, b: E, state?: S) => number) | keyof E;\n\nexport interface SortByOptions<E> {\n  sortBy?: SortBy<E>;\n  sortByOrder?: Order;\n}\n\nexport interface QueryConfigOptions<E = any> extends SortByOptions<E> {}\n\nexport const queryConfigKey = 'akitaQueryConfig';\n\nexport function QueryConfig<E>(metadata: QueryConfigOptions<E>) {\n  return function(constructor: Function) {\n    constructor[queryConfigKey] = {};\n    for (let i = 0, keys = Object.keys(metadata); i < keys.length; i++) {\n      const key = keys[i];\n      constructor[queryConfigKey][key] = metadata[key];\n    }\n  };\n}\n","import { isFunction } from './isFunction';\n\nexport function compareKeys<T>(keysOrFuncs: any[]) {\n  return function <T>(prevState, currState) {\n    const isFns = isFunction(keysOrFuncs[0]);\n    // Return when they are NOT changed\n    return keysOrFuncs.some(keyOrFunc => {\n      if(isFns) {\n        return keyOrFunc(prevState) !== keyOrFunc(currState);\n      }\n      return prevState[keyOrFunc] !== currState[keyOrFunc];\n    }) === false;\n  };\n}\n","import { Store } from './store';\nimport { Observable } from 'rxjs';\nimport { queryConfigKey, QueryConfigOptions } from './queryConfig';\nimport { isString } from './isString';\nimport { isFunction } from './isFunction';\nimport { isDev } from './env';\nimport { __queries__ } from './stores';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { compareKeys } from './compareKeys';\nimport { ReturnTypes } from './types';\n\nexport class Query<S> {\n  // @internal\n  __store__: Store<S>;\n\n  constructor(protected store: Store<S>) {\n    this.__store__ = store;\n    if (isDev()) {\n      // @internal\n      __queries__[store.storeName] = this;\n    }\n  }\n\n  /**\n   * Select a slice from the store\n   *\n   * @example\n   *\n   * this.query.select()\n   * this.query.select(state => state.entities)\n   * this.query.select('token');\n   * this.query.select(['name', 'email'])\n   * this.query.select([state => state.name, state => state.age])\n   *\n   */\n  select<K extends keyof S>(key: K): Observable<S[K]>;\n  select<R>(project: (store: S) => R): Observable<R>;\n  select<K extends keyof S>(stateKeys: K[]): Observable<Pick<S, K>>;\n  select<R extends [(state: S) => any] | Array<(state: S) => any>>(selectorFns: R): Observable<ReturnTypes<R>>;\n  select(): Observable<S>;\n  select<R>(project?: ((store: S) => R) | keyof S | (keyof S)[] | ((state: S) => any)[]): Observable<R | S | any[]> {\n    let mapFn;\n    if (isFunction(project)) {\n      mapFn = project;\n    } else if (isString(project)) {\n      mapFn = state => state[project];\n    } else if (Array.isArray(project)) {\n      return this.store\n        ._select(state => state)\n        .pipe(\n          distinctUntilChanged(compareKeys(project)),\n          map(state => {\n            if (isFunction(project[0])) {\n              return (project as ((state: S) => any)[]).map(func => func(state));\n            }\n\n            return (project as (keyof S)[]).reduce((acc, k) => {\n              acc[k as any] = state[k];\n              return acc;\n            }, {});\n          })\n        ) as any;\n    } else {\n      mapFn = state => state;\n    }\n\n    return this.store._select(mapFn);\n  }\n\n  /**\n   * Select the loading state\n   *\n   * @example\n   *\n   * this.query.selectLoading().subscribe(isLoading => {})\n   */\n  selectLoading() {\n    return this.select(state => (state as S & { loading: boolean }).loading);\n  }\n\n  /**\n   * Select the error state\n   *\n   * @example\n   *\n   * this.query.selectError().subscribe(error => {})\n   */\n  selectError<ErrorType = any>(): Observable<ErrorType> {\n    return this.select(state => (state as S & { error: ErrorType }).error);\n  }\n\n  /**\n   * Get the store's value\n   *\n   * @example\n   *\n   * this.query.getValue()\n   *\n   */\n  getValue(): S {\n    return this.store._value();\n  }\n\n  /**\n   * Select the cache state\n   *\n   * @example\n   *\n   * this.query.selectHasCache().pipe(\n   *   switchMap(hasCache => {\n   *     return hasCache ? of() : http().pipe(res => store.set(res))\n   *   })\n   * )\n   */\n  selectHasCache(): Observable<boolean> {\n    return this.store._cache().asObservable();\n  }\n\n  /**\n   * Whether we've cached data\n   *\n   * @example\n   *\n   * this.query.getHasCache()\n   *\n   */\n  getHasCache(): boolean {\n    return this.store._cache().value;\n  }\n\n  // @internal\n  get config(): QueryConfigOptions {\n    return this.constructor[queryConfigKey];\n  }\n}\n","// @internal\nexport function sortByOptions(options, config) {\n  options.sortBy = options.sortBy || (config && config.sortBy);\n  options.sortByOrder = options.sortByOrder || (config && config.sortByOrder);\n}\n","import { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { distinctUntilArrayItemChanged } from './arrayFind';\nimport { entitiesToArray } from './entitiesToArray';\nimport { entitiesToMap } from './entitiesToMap';\nimport { EntityAction, EntityActions } from './entityActions';\nimport { EntityStore } from './entityStore';\nimport { findEntityByPredicate, getEntity } from './getEntity';\nimport { isArray } from './isArray';\nimport { isDefined } from './isDefined';\nimport { isFunction } from './isFunction';\nimport { isNil } from './isNil';\nimport { isUndefined } from './isUndefined';\nimport { mapSkipUndefined } from './mapSkipUndefined';\nimport { Query } from './query';\nimport { QueryConfigOptions } from './queryConfig';\nimport { SelectAllOptionsA, SelectAllOptionsB, SelectAllOptionsC, SelectAllOptionsD, SelectAllOptionsE } from './selectAllOverloads';\nimport { sortByOptions } from './sortByOptions';\nimport { toBoolean } from './toBoolean';\nimport { EntityState, getEntityType, getIDType, HashMap, ItemPredicate, OrArray, SelectOptions } from './types';\n\n/**\n *\n *  The Entity Query is similar to the general Query, with additional functionality tailored for EntityStores.\n *\n *  class WidgetsQuery extends QueryEntity<WidgetsState> {\n *     constructor(protected store: WidgetsStore) {\n *       super(store);\n *     }\n *  }\n *\n *\n *\n */\nexport class QueryEntity<S extends EntityState, EntityType = getEntityType<S>, IDType = getIDType<S>> extends Query<S> {\n  ui: EntityUIQuery<any, EntityType>;\n  protected store: EntityStore<S>;\n\n  // @internal\n  __store__;\n\n  constructor(store: EntityStore<S>, private options: QueryConfigOptions = {}) {\n    super(store);\n    this.__store__ = store;\n  }\n\n  /**\n   * Select the entire store's entity collection\n   *\n   * @example\n   *\n   * this.query.selectAll()\n   *\n   * this.query.selectAll({\n   *   limitTo: 5\n   *   filterBy: entity => entity.completed === true\n   * })\n   *\n   * this.query.selectAll({\n   *   asObject: true,\n   *   limitTo: 3\n   * })\n   *\n   *  this.query.selectAll({\n   *   sortBy: 'price',\n   *   sortByOrder: Order.DESC\n   * })\n   *\n   */\n  selectAll(options: SelectAllOptionsA<EntityType>): Observable<HashMap<EntityType>>;\n  selectAll(options: SelectAllOptionsB<EntityType>): Observable<EntityType[]>;\n  selectAll(options: SelectAllOptionsC<EntityType>): Observable<HashMap<EntityType>>;\n  selectAll(options: SelectAllOptionsD<EntityType>): Observable<EntityType[]>;\n  selectAll(options: SelectAllOptionsE<EntityType>): Observable<EntityType[]>;\n  selectAll(): Observable<EntityType[]>;\n  selectAll(\n    options: SelectOptions<EntityType> = {\n      asObject: false\n    }\n  ): Observable<EntityType[] | HashMap<EntityType>> {\n    return this.select(state => state.entities).pipe(map(() => this.getAll(options)));\n  }\n\n  /**\n   * Get the entire store's entity collection\n   *\n   * @example\n   *\n   * this.query.getAll()\n   *\n   * this.query.getAll({\n   *   limitTo: 5\n   *   filterBy: entity => entity.completed === true\n   * })\n   *\n   * this.query.getAll({\n   *   asObject: true,\n   *   limitTo: 3\n   * })\n   *\n   *  this.query.getAll({\n   *   sortBy: 'price',\n   *   sortByOrder: Order.DESC\n   * })\n   */\n  getAll(options: SelectAllOptionsA<EntityType>): HashMap<EntityType>;\n  getAll(options: SelectAllOptionsB<EntityType>): EntityType[];\n  getAll(options: SelectAllOptionsC<EntityType>): HashMap<EntityType>;\n  getAll(options: SelectAllOptionsD<EntityType>): EntityType[];\n  getAll(options: SelectAllOptionsE<EntityType>): EntityType[];\n  getAll(): EntityType[];\n  getAll(options: SelectOptions<EntityType> = { asObject: false, filterBy: undefined, limitTo: undefined }): EntityType[] | HashMap<EntityType> {\n    if (options.asObject) {\n      return entitiesToMap(this.getValue(), options);\n    }\n    sortByOptions(options, this.config || this.options);\n\n    return entitiesToArray(this.getValue(), options);\n  }\n\n  /**\n   * Select multiple entities from the store\n   *\n   * @example\n   *\n   * this.query.selectMany([1,2,3])\n   * this.query.selectMany([1,2], entity => entity.title)\n   */\n  selectMany<R>(ids: IDType[]): Observable<EntityType[]>;\n  selectMany<R>(ids: IDType[], project: (entity: EntityType) => R): Observable<R[]>;\n  selectMany<R>(ids: IDType[], project?: (entity: EntityType) => R): Observable<EntityType[] | R[]> {\n    if (!ids || !ids.length) return of([]);\n\n    return this.select(state => state.entities).pipe(\n      map(entities => mapSkipUndefined(ids, id => getEntity(id, project)(entities))),\n      distinctUntilArrayItemChanged()\n    );\n  }\n\n  /**\n   * Select an entity or a slice of an entity\n   *\n   * @example\n   *\n   * this.query.selectEntity(1)\n   * this.query.selectEntity(1, entity => entity.config.date)\n   * this.query.selectEntity(1, 'comments')\n   * this.query.selectEntity(e => e.title === 'title')\n   *\n   */\n  selectEntity<R>(id: IDType): Observable<EntityType>;\n  selectEntity<K extends keyof EntityType>(id: IDType, project?: K): Observable<EntityType[K]>;\n  selectEntity<R>(id: IDType, project: (entity: EntityType) => R): Observable<R>;\n  selectEntity<R>(predicate: ItemPredicate<EntityType>): Observable<EntityType>;\n  selectEntity<R>(idOrPredicate: IDType | ItemPredicate<EntityType>, project?: ((entity: EntityType) => R) | keyof EntityType): Observable<R | EntityType> {\n    let id = idOrPredicate;\n\n    if (isFunction(idOrPredicate)) {\n      // For performance reason we expect the entity to be in the store\n      (id as any) = findEntityByPredicate(idOrPredicate, this.getValue().entities);\n    }\n\n    return this.select(state => state.entities).pipe(\n      map(getEntity(id, project)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Get an entity by id\n   *\n   * @example\n   *\n   * this.query.getEntity(1);\n   */\n  getEntity(id: IDType): EntityType {\n    return this.getValue().entities[id as any];\n  }\n\n  /**\n   * Select the active entity's id\n   *\n   * @example\n   *\n   * this.query.selectActiveId()\n   */\n  selectActiveId(): Observable<S['active']> {\n    return this.select(state => (state as S & { active: S['active'] }).active);\n  }\n\n  /**\n   * Get the active id\n   *\n   * @example\n   *\n   * this.query.getActiveId()\n   */\n  getActiveId(): S['active'] {\n    return this.getValue().active;\n  }\n\n  /**\n   * Select the active entity\n   *\n   * @example\n   *\n   * this.query.selectActive()\n   * this.query.selectActive(entity => entity.title)\n   */\n  selectActive<R>(): S['active'] extends any[] ? Observable<EntityType[]> : Observable<EntityType>;\n  selectActive<R>(project?: (entity: EntityType) => R): S['active'] extends any[] ? Observable<R[]> : Observable<R>;\n  selectActive<R>(project?: (entity: EntityType) => R): Observable<R | EntityType> | Observable<EntityType[] | R[]> {\n    if (isArray(this.getActive())) {\n      return this.selectActiveId().pipe(switchMap(ids => this.selectMany(ids, project)));\n    }\n    return this.selectActiveId().pipe(switchMap(ids => this.selectEntity(ids, project)));\n  }\n\n  /**\n   * Get the active entity\n   *\n   * @example\n   *\n   * this.query.getActive()\n   */\n  getActive(): S['active'] extends any[] ? EntityType[] : EntityType;\n  getActive(): OrArray<EntityType> {\n    const activeId = this.getActiveId();\n    if (isArray(activeId)) {\n      return activeId.map(id => this.getValue().entities[id as any]);\n    }\n    return toBoolean(activeId) ? this.getEntity(activeId) : undefined;\n  }\n\n  /**\n   * Select the store's entity collection length\n   *\n   * @example\n   *\n   * this.query.selectCount()\n   * this.query.selectCount(entity => entity.completed)\n   */\n  selectCount(predicate?: (entity: EntityType, index: number) => boolean): Observable<number> {\n    return this.select(state => state.entities).pipe(map(() => this.getCount(predicate)));\n  }\n\n  /**\n   * Get the store's entity collection length\n   *\n   * @example\n   *\n   * this.query.getCount()\n   * this.query.getCount(entity => entity.completed)\n   */\n  getCount(predicate?: (entity: EntityType, index: number) => boolean): number {\n    if (isFunction(predicate)) {\n      return this.getAll().filter(predicate).length;\n    }\n    return this.getValue().ids.length;\n  }\n\n  /**\n   *\n   * Select the last entity from the store\n   *\n   * @example\n   *\n   * this.query.selectLast()\n   * this.query.selectLast(todo => todo.title)\n   */\n  selectLast<R>(): Observable<EntityType>;\n  selectLast<R>(project: (entity: EntityType) => R): Observable<R>;\n  selectLast<R>(project?: (entity: EntityType) => R): Observable<R | EntityType> {\n    return this.selectAt(ids => ids[ids.length - 1], project);\n  }\n\n  /**\n   *\n   * Select the first entity from the store\n   *\n   * @example\n   *\n   * this.query.selectFirst()\n   * this.query.selectFirst(todo => todo.title)\n   */\n  selectFirst<R>(): Observable<EntityType>;\n  selectFirst<R>(project: (entity: EntityType) => R): Observable<R>;\n  selectFirst<R>(project?: (entity: EntityType) => R): Observable<R | EntityType> {\n    return this.selectAt(ids => ids[0], project);\n  }\n\n  /**\n   *\n   * Listen for entity actions\n   *\n   *  @example\n   *\n   *  this.query.selectEntityAction(EntityActions.Add);\n   *  this.query.selectEntityAction(EntityActions.Update);\n   *  this.query.selectEntityAction(EntityActions.Remove);\n   *\n   *  this.query.selectEntityAction();\n   */\n  selectEntityAction(action: EntityActions): Observable<IDType[]>;\n  selectEntityAction(): Observable<EntityAction<IDType>>;\n  selectEntityAction(action?: EntityActions): Observable<IDType[] | EntityAction<IDType>> {\n    if (isUndefined(action)) {\n      return this.store.selectEntityAction$;\n    }\n    return this.store.selectEntityAction$.pipe(\n      filter(ac => ac.type === action),\n      map(action => action.ids)\n    );\n  }\n\n  /**\n   * Returns whether entity exists\n   *\n   * @example\n   *\n   * this.query.hasEntity(2)\n   * this.query.hasEntity(entity => entity.completed)\n   * this.query.hasEntity([1, 2, 33])\n   *\n   */\n  hasEntity(id: IDType): boolean;\n  hasEntity(id: IDType[]): boolean;\n  hasEntity(project: (entity: EntityType) => boolean): boolean;\n  hasEntity(): boolean;\n  hasEntity(projectOrIds?: IDType | IDType[] | ((entity: EntityType) => boolean)): boolean {\n    if (isNil(projectOrIds)) {\n      return this.getValue().ids.length > 0;\n    }\n\n    if (isFunction(projectOrIds)) {\n      return this.getAll().some(projectOrIds);\n    }\n\n    if (isArray(projectOrIds)) {\n      return projectOrIds.every(id => (id as any) in this.getValue().entities);\n    }\n\n    return (projectOrIds as any) in this.getValue().entities;\n  }\n\n  /**\n   * Returns whether entity store has an active entity\n   *\n   * @example\n   *\n   * this.query.hasActive()\n   * this.query.hasActive(3)\n   *\n   */\n  hasActive(id?: IDType): boolean {\n    const active = this.getValue().active;\n    const isIdProvided = isDefined(id);\n    if (Array.isArray(active)) {\n      if (isIdProvided) {\n        return active.includes(id);\n      }\n      return active.length > 0;\n    }\n    return isIdProvided ? active === id : isDefined(active);\n  }\n\n  /**\n   *\n   * Create sub UI query for querying Entity's UI state\n   *\n   * @example\n   *\n   *\n   * export class ProductsQuery extends QueryEntity<ProductsState> {\n   *   ui: EntityUIQuery<ProductsUIState>;\n   *\n   *   constructor(protected store: ProductsStore) {\n   *     super(store);\n   *     this.createUIQuery();\n   *   }\n   *\n   * }\n   */\n  createUIQuery() {\n    this.ui = new EntityUIQuery(this.__store__.ui);\n  }\n\n  private selectAt<R>(mapFn: (ids: IDType[]) => IDType, project?: (entity: EntityType) => R) {\n    return this.select(state => state.ids as any[]).pipe(\n      map(mapFn),\n      distinctUntilChanged(),\n      switchMap((id: IDType) => this.selectEntity(id, project))\n    );\n  }\n}\n\n// @internal\nexport class EntityUIQuery<UIState, DEPRECATED = any> extends QueryEntity<UIState> {\n  constructor(store) {\n    super(store);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Diff } from './types';\n\n/**\n * @example\n *\n * query.selectEntity(2).pipe(filterNil)\n */\nexport const filterNil = <T>(source: Observable<T | undefined | null>) => source.pipe(filter((value): value is Diff<T, null | undefined> => value !== null && typeof value !== 'undefined'));\n","/**\n * @internal\n *\n * @example\n *\n * getValue(state, 'todos.ui')\n *\n */\nexport function getValue( obj: any, prop: string ) {\n  /** return the whole state  */\n  if( prop.split('.').length === 1 ) {\n    return obj;\n  }\n  const removeStoreName = prop\n    .split('.')\n    .slice(1)\n    .join('.');\n  return removeStoreName.split('.').reduce(( acc: any, part: string ) => acc && acc[part], obj);\n}\n","import { isObject } from './isObject';\n\n/**\n * @internal\n *\n * @example\n * setValue(state, 'todos.ui', { filter: {} })\n */\nexport function setValue(obj: any, prop: string, val: any) {\n  const split = prop.split('.');\n\n  if (split.length === 1) {\n    return { ...obj, ...val };\n  }\n\n  obj = { ...obj };\n\n  const lastIndex = split.length - 2;\n  const removeStoreName = prop.split('.').slice(1);\n\n  removeStoreName.reduce((acc, part, index) => {\n    if (index === lastIndex) {\n      if (isObject(acc[part])) {\n        acc[part] = { ...acc[part], ...val };\n      } else {\n        acc[part] = val;\n      }\n    } else {\n      acc[part] = { ...acc[part] };\n    }\n\n    return acc && acc[part];\n  }, obj);\n\n  return obj;\n}\n","import { filter, skip } from 'rxjs/operators';\nimport { from, isObservable, of, OperatorFunction, ReplaySubject, Subscription } from 'rxjs';\nimport { HashMap, MaybeAsync } from './types';\nimport { isFunction } from './isFunction';\nimport { AkitaError } from './errors';\nimport { __stores__ } from './stores';\nimport { getValue } from './getValueByString';\nimport { setAction } from './actions';\nimport { setValue } from './setValueByString';\nimport { $$addStore, $$deleteStore } from './dispatchers';\nimport { isNil } from './isNil';\nimport { isObject } from './isObject';\nimport { isNotBrowser, hasLocalStorage, hasSessionStorage } from './root';\n\nlet skipStorageUpdate = false;\n\nconst _persistStateInit = new ReplaySubject(1);\n\nexport function selectPersistStateInit() {\n  return _persistStateInit.asObservable();\n}\n\nexport function setSkipStorageUpdate(skip: boolean) {\n  skipStorageUpdate = skip;\n}\n\nexport function getSkipStorageUpdate() {\n  return skipStorageUpdate;\n}\n\nexport interface PersistStateStorage {\n  getItem(key: string): MaybeAsync;\n\n  setItem(key: string, value: any): MaybeAsync;\n\n  clear(): void;\n}\n\nfunction isPromise(v: any) {\n  return v && isFunction(v.then);\n}\n\nfunction observify(asyncOrValue: any) {\n  if (isPromise(asyncOrValue) || isObservable(asyncOrValue)) {\n    return from(asyncOrValue);\n  }\n\n  return of(asyncOrValue);\n}\n\nexport interface PersistStateParams {\n  /** The storage key */\n  key: string;\n  /** Whether to enable persistState in a non-browser environment */\n  enableInNonBrowser: boolean;\n  /** Storage strategy to use. This defaults to LocalStorage but you can pass SessionStorage or anything that implements the StorageEngine API. */\n  storage: PersistStateStorage;\n  /** Custom deserializer. Defaults to JSON.parse */\n  deserialize: Function;\n  /** Custom serializer, defaults to JSON.stringify */\n  serialize: Function;\n  /**\n   * By default the whole state is saved to storage, use this param to include only the stores you need.\n   * Pay attention that you can't use both include and exclude\n   */\n  include: (string | ((storeName: string) => boolean))[];\n  /**\n   *  By default the whole state is saved to storage, use this param to exclude stores that you don't need.\n   *  Pay attention that you can't use both include and exclude\n   */\n  exclude: string[];\n\n  preStorageUpdate(storeName: string, state: any): any;\n\n  preStoreUpdate(storeName: string, state: any): any;\n\n  skipStorageUpdate: () => boolean;\n  preStorageUpdateOperator: () => OperatorFunction<any, any>;\n  /** Whether to persist a dynamic store upon destroy */\n  persistOnDestroy: boolean;\n}\n\nexport function persistState(params?: Partial<PersistStateParams>) {\n  const defaults: PersistStateParams = {\n    key: 'AkitaStores',\n    enableInNonBrowser: false,\n    storage: !hasLocalStorage() ? params.storage : localStorage,\n    deserialize: JSON.parse,\n    serialize: JSON.stringify,\n    include: [],\n    /**\n     * @deprecated use include with a callback\n     */\n    exclude: [],\n    persistOnDestroy: false,\n    preStorageUpdate: function(storeName, state) {\n      return state;\n    },\n    preStoreUpdate: function(storeName, state) {\n      return state;\n    },\n    skipStorageUpdate: getSkipStorageUpdate,\n    preStorageUpdateOperator: () => source => source\n  };\n\n  const { storage, enableInNonBrowser, deserialize, serialize, include, exclude, key, preStorageUpdate, persistOnDestroy, preStorageUpdateOperator, preStoreUpdate, skipStorageUpdate } = Object.assign(\n    {},\n    defaults,\n    params\n  );\n\n  if ((isNotBrowser && !enableInNonBrowser) || !storage) return;\n\n  const hasInclude = include.length > 0;\n  const hasExclude = exclude.length > 0;\n  let includeStores: { fns: Function[]; [key: string]: Function[] | string };\n\n  if (hasInclude && hasExclude) {\n    throw new AkitaError(\"You can't use both include and exclude\");\n  }\n\n  if (hasInclude) {\n    includeStores = include.reduce(\n      (acc, path) => {\n        if (isFunction(path)) {\n          acc.fns.push(path);\n        } else {\n          const storeName = path.split('.')[0];\n          acc[storeName] = path;\n        }\n        return acc;\n      },\n      { fns: [] }\n    );\n  }\n\n  let stores: HashMap<Subscription> = {};\n  let acc = {};\n  let subscriptions: Subscription[] = [];\n\n  const buffer = [];\n\n  function _save(v: any) {\n    observify(v).subscribe(() => {\n      const next = buffer.shift();\n      next && _save(next);\n    });\n  }\n\n  // when we use the local/session storage we perform the serialize, otherwise we let the passed storage implementation to do it\n  const isLocalStorage = (hasLocalStorage() && storage === localStorage) || (hasSessionStorage() && storage === sessionStorage);\n\n  observify(storage.getItem(key)).subscribe((value: any) => {\n    let storageState = isObject(value) ? value : deserialize(value || '{}');\n\n    function save(storeCache) {\n      storageState['$cache'] = { ...(storageState['$cache'] || {}), ...storeCache };\n      storageState = Object.assign({}, storageState, acc);\n\n      buffer.push(storage.setItem(key, isLocalStorage ? serialize(storageState) : storageState));\n      _save(buffer.shift());\n    }\n\n    function subscribe(storeName, path) {\n      stores[storeName] = __stores__[storeName]\n        ._select(state => getValue(state, path))\n        .pipe(\n          skip(1),\n          filter(() => skipStorageUpdate() === false),\n          preStorageUpdateOperator()\n        )\n        .subscribe(data => {\n          acc[storeName] = preStorageUpdate(storeName, data);\n          Promise.resolve().then(() => save({ [storeName]: __stores__[storeName]._cache().getValue() }));\n        });\n    }\n\n    function setInitial(storeName, store, path) {\n      if (storeName in storageState) {\n        setAction('@PersistState');\n        store._setState(state => {\n          return setValue(state, path, preStoreUpdate(storeName, storageState[storeName]));\n        });\n        const hasCache = storageState['$cache'] ? storageState['$cache'][storeName] : false;\n        __stores__[storeName].setHasCache(hasCache, { restartTTL: true });\n      }\n    }\n\n    subscriptions.push(\n      $$deleteStore.subscribe(storeName => {\n        if (stores[storeName]) {\n          if (persistOnDestroy === false) {\n            save({ [storeName]: false });\n          }\n          stores[storeName].unsubscribe();\n          delete stores[storeName];\n        }\n      })\n    );\n\n    subscriptions.push(\n      $$addStore.subscribe(storeName => {\n        if (storeName === 'router' || (hasExclude && exclude.includes(storeName))) {\n          return;\n        }\n\n        const store = __stores__[storeName];\n        if (hasInclude) {\n          let path = includeStores[storeName];\n\n          if (!path) {\n            const passPredicate = includeStores.fns.some(fn => fn(storeName));\n            if (passPredicate) {\n              path = storeName;\n            } else {\n              return;\n            }\n          }\n          setInitial(storeName, store, path);\n          subscribe(storeName, path);\n        } else {\n          setInitial(storeName, store, storeName);\n          subscribe(storeName, storeName);\n        }\n      })\n    );\n\n    _persistStateInit.next();\n  });\n\n  return {\n    destroy() {\n      subscriptions.forEach(s => s.unsubscribe());\n      for (let i = 0, keys = Object.keys(stores); i < keys.length; i++) {\n        const storeName = keys[i];\n        stores[storeName].unsubscribe();\n      }\n      stores = {};\n    },\n    clear() {\n      storage.clear();\n    },\n    clearStore(storeName?: string) {\n      if (isNil(storeName)) {\n        const value = observify(storage.setItem(key, '{}'));\n        value.subscribe();\n        return;\n      }\n      const value = storage.getItem(key);\n      observify(value).subscribe(v => {\n        const storageState = deserialize(v || '{}');\n\n        if (storageState[storeName]) {\n          delete storageState[storeName];\n          const value = observify(storage.setItem(key, serialize(storageState)));\n          value.subscribe();\n        }\n      });\n    }\n  };\n}\n","import { __stores__ } from './stores';\nimport { isString } from './isString';\nimport { setSkipStorageUpdate } from './persistState';\nimport { $$addStore } from './dispatchers';\nimport { filter, take } from 'rxjs/operators';\n\nexport class SnapshotManager {\n  /**\n   * Get a snapshot of the whole state or a specific stores\n   * Use it ONLY for things such as saving the state in the server\n   */\n  getStoresSnapshot(stores: string[] = []) {\n    let acc = {};\n    const hasInclude = stores.length > 0;\n    const keys = hasInclude ? stores : Object.keys(__stores__);\n    for (let i = 0; i < keys.length; i++) {\n      let storeName = keys[i];\n      if (storeName !== 'router') {\n        acc[storeName] = __stores__[storeName]._value();\n      }\n    }\n\n    return acc;\n  }\n\n  setStoresSnapshot(stores: { [storeName: string]: any } | string, options?: { skipStorageUpdate?: boolean; lazy?: boolean }) {\n    const mergedOptions = { ...{ skipStorageUpdate: false, lazy: false }, ...options };\n    mergedOptions.skipStorageUpdate && setSkipStorageUpdate(true);\n\n    let normalizedStores = stores;\n\n    if (isString(stores)) {\n      normalizedStores = JSON.parse(normalizedStores as string);\n    }\n\n    const size = Object.keys(normalizedStores).length;\n\n    if (mergedOptions.lazy) {\n      $$addStore\n        .pipe(\n          filter(name => normalizedStores.hasOwnProperty(name)),\n          take(size)\n        )\n        .subscribe(name => __stores__[name]._setState(() => normalizedStores[name]));\n    } else {\n      for (let i = 0, keys = Object.keys(normalizedStores); i < keys.length; i++) {\n        const storeName = keys[i];\n        if (__stores__[storeName]) {\n          __stores__[storeName]._setState(() => normalizedStores[storeName]);\n        }\n      }\n    }\n\n    mergedOptions.skipStorageUpdate && setSkipStorageUpdate(false);\n  }\n}\n\nexport const snapshotManager = new SnapshotManager();\n","import { QueryEntity } from '../queryEntity';\nimport { Query } from '../query';\nimport { filterNil } from '../filterNil';\nimport { toBoolean } from '../toBoolean';\nimport { getAkitaConfig } from '../config';\nimport { getValue } from '../getValueByString';\nimport { setValue } from '../setValueByString';\n\nexport type Queries<State> = Query<State> | QueryEntity<State>;\n\nexport abstract class AkitaPlugin<State = any> {\n  protected constructor(protected query: Queries<State>, config?: { resetFn?: Function }) {\n    if (config && config.resetFn) {\n      if (getAkitaConfig().resettable) {\n        this.onReset(config.resetFn);\n      }\n    }\n  }\n\n  /** This method is responsible for getting access to the query. */\n  protected getQuery() {\n    return this.query;\n  }\n\n  /** This method is responsible for getting access to the store. */\n  protected getStore() {\n    return this.getQuery().__store__;\n  }\n\n  /** This method is responsible for cleaning. */\n  public abstract destroy();\n\n  /** This method is responsible tells whether the plugin is entityBased or not.  */\n  protected isEntityBased(entityId: any) {\n    return toBoolean(entityId);\n  }\n\n  /** This method is responsible for selecting the source; it can be the whole store or one entity. */\n  protected selectSource(entityId: any, property?: string) {\n    if (this.isEntityBased(entityId)) {\n      return (this.getQuery() as QueryEntity<State>).selectEntity(entityId).pipe(filterNil);\n    }\n\n    if (property) {\n      return this.getQuery().select(state => getValue(state, this.withStoreName(property)));\n    }\n\n    return this.getQuery().select();\n  }\n\n  protected getSource(entityId: any, property?: string): any {\n    if (this.isEntityBased(entityId)) {\n      return (this.getQuery() as QueryEntity<State>).getEntity(entityId);\n    }\n\n    const state = this.getQuery().getValue();\n\n    if (property) {\n      return getValue(state, this.withStoreName(property));\n    }\n\n    return state;\n  }\n\n  protected withStoreName(prop: string) {\n    return `${this.storeName}.${prop}`;\n  }\n\n  protected get storeName() {\n    return this.getStore().storeName;\n  }\n\n  /** This method is responsible for updating the store or one entity; it can be the whole store or one entity. */\n  protected updateStore(newState, entityId?, property?: string) {\n    if (this.isEntityBased(entityId)) {\n      this.getStore().update(entityId, newState);\n    } else {\n      if (property) {\n        this.getStore()._setState(state => {\n          return setValue(state, this.withStoreName(property), newState);\n        });\n        return;\n      }\n      this.getStore()._setState(state => ({ ...state, ...newState }));\n    }\n  }\n\n  /**\n   * Function to invoke upon reset\n   */\n  private onReset(fn: Function) {\n    const original = this.getStore().reset;\n    this.getStore().reset = (...params) => {\n      /** It should run after the plugin destroy method */\n      setTimeout(() => {\n        original.apply(this.getStore(), params);\n        fn();\n      });\n    };\n  }\n}\n","import { QueryEntity } from '../../queryEntity';\nimport { delay, map, switchMap, take } from 'rxjs/operators';\nimport { BehaviorSubject, from, isObservable, Observable, Subscription } from 'rxjs';\nimport { EntityState, ID, getEntityType } from '../../types';\nimport { AkitaPlugin } from '../plugin';\nimport { applyTransaction } from '../../transaction';\nimport { isUndefined } from '../../isUndefined';\nimport { action, logAction } from '../../actions';\nimport { isNil } from '../../isNil';\n\nexport interface PaginationResponse<E> {\n  currentPage: number;\n  perPage: number;\n  lastPage: number;\n  data: E[];\n  total?: number;\n  from?: number;\n  to?: number;\n  pageControls?: number[];\n}\n\nexport type PaginatorConfig = {\n  pagesControls?: boolean;\n  range?: boolean;\n  startWith?: number;\n  cacheTimeout?: Observable<number>;\n  clearStoreWithCache?: boolean;\n};\n\nconst paginatorDefaults: PaginatorConfig = {\n  pagesControls: false,\n  range: false,\n  startWith: 1,\n  cacheTimeout: undefined,\n  clearStoreWithCache: true\n};\n\nexport class PaginatorPlugin<State extends EntityState> extends AkitaPlugin<State> {\n  /** Save current filters, sorting, etc. in cache */\n  metadata = new Map();\n\n  private page: BehaviorSubject<number>;\n  private pages = new Map<number, { ids: ID[] }>();\n  private readonly clearCacheSubscription: Subscription;\n\n  private pagination: PaginationResponse<getEntityType<State>> = {\n    currentPage: 1,\n    perPage: 0,\n    total: 0,\n    lastPage: 0,\n    data: []\n  };\n\n  /**\n   * When the user navigates to a different page and return\n   * we don't want to call `clearCache` on first time.\n   */\n  private initial = true;\n\n  constructor(protected query: QueryEntity<State>, public config: PaginatorConfig = {}) {\n    super(query, {\n      resetFn: () => {\n        this.initial = false;\n        this.destroy({ clearCache: true, currentPage: 1 });\n      }\n    });\n    this.config = Object.assign(paginatorDefaults, config);\n    const { startWith, cacheTimeout } = this.config;\n    this.page = new BehaviorSubject(startWith);\n    if (isObservable(cacheTimeout)) {\n      this.clearCacheSubscription = cacheTimeout.subscribe(() => this.clearCache());\n    }\n  }\n\n  /**\n   * Proxy to the query loading\n   */\n  isLoading$ = this.query.selectLoading().pipe(delay(0));\n\n  /**\n   * Listen to page changes\n   */\n  get pageChanges() {\n    return this.page.asObservable();\n  }\n\n  /**\n   * Get the current page number\n   */\n  get currentPage() {\n    return this.pagination.currentPage;\n  }\n\n  /**\n   * Check if current page is the first one\n   */\n  get isFirst() {\n    return this.currentPage === 1;\n  }\n\n  /**\n   * Check if current page is the last one\n   */\n  get isLast() {\n    return this.currentPage === this.pagination.lastPage;\n  }\n\n  /**\n   * Whether to generate an array of pages for *ngFor\n   * [1, 2, 3, 4]\n   */\n  withControls() {\n    this.config.pagesControls = true;\n    return this;\n  }\n\n  /**\n   * Whether to generate the `from` and `to` keys\n   * [1, 2, 3, 4]\n   */\n  withRange() {\n    this.config.range = true;\n    return this;\n  }\n\n  /**\n   * Set the loading state\n   */\n  setLoading(value = true) {\n    this.getStore().setLoading(value);\n  }\n\n  /**\n   * Update the pagination object and add the page\n   */\n  @action('@Pagination - New Page')\n  update(response: PaginationResponse<getEntityType<State>>) {\n    this.pagination = response;\n    this.addPage(response.data);\n  }\n\n  /**\n   *\n   * Set the ids and add the page to store\n   */\n  addPage(data: getEntityType<State>[]) {\n    this.pages.set(this.currentPage, { ids: data.map(entity => entity[this.getStore().idKey]) });\n    this.getStore().add(data);\n  }\n\n  /**\n   * Clear the cache.\n   */\n  clearCache(options: { clearStore?: boolean } = {}) {\n    if (!this.initial) {\n      logAction('@Pagination - Clear Cache');\n\n      if (options.clearStore !== false && (this.config.clearStoreWithCache || options.clearStore)) {\n        this.getStore().remove();\n      }\n\n      this.pages = new Map();\n      this.metadata = new Map();\n    }\n    this.initial = false;\n  }\n\n  clearPage(page: number) {\n    this.pages.delete(page);\n  }\n\n  /**\n   * Clear the cache timeout and optionally the pages\n   */\n  destroy({ clearCache, currentPage }: { clearCache?: boolean; currentPage?: number } = {}) {\n    if (this.clearCacheSubscription) {\n      this.clearCacheSubscription.unsubscribe();\n    }\n    if (clearCache) {\n      this.clearCache();\n    }\n    if (!isUndefined(currentPage)) {\n      this.setPage(currentPage);\n    }\n    this.initial = true;\n  }\n\n  /**\n   * Whether the provided page is active\n   */\n  isPageActive(page: number) {\n    return this.currentPage === page;\n  }\n\n  /**\n   * Set the current page\n   */\n  setPage(page: number) {\n    if (page !== this.currentPage || !this.hasPage(page)) {\n      this.page.next((this.pagination.currentPage = page));\n    }\n  }\n\n  /**\n   * Increment current page\n   */\n  nextPage() {\n    if (this.currentPage !== this.pagination.lastPage) {\n      this.setPage(this.pagination.currentPage + 1);\n    }\n  }\n\n  /**\n   * Decrement current page\n   */\n  prevPage() {\n    if (this.pagination.currentPage > 1) {\n      this.setPage(this.pagination.currentPage - 1);\n    }\n  }\n\n  /**\n   * Set current page to last\n   */\n  setLastPage() {\n    this.setPage(this.pagination.lastPage);\n  }\n\n  /**\n   * Set current page to first\n   */\n  setFirstPage() {\n    this.setPage(1);\n  }\n\n  /**\n   * Check if page exists in cache\n   */\n  hasPage(page: number) {\n    return this.pages.has(page);\n  }\n\n  /**\n   * Get the current page if it's in cache, otherwise invoke the request\n   */\n  getPage(req: () => Observable<PaginationResponse<getEntityType<State>>>) {\n    let page = this.pagination.currentPage;\n    if (this.hasPage(page)) {\n      return this.selectPage(page);\n    } else {\n      this.setLoading(true);\n      return from(req()).pipe(\n        switchMap((config: PaginationResponse<getEntityType<State>>) => {\n          page = config.currentPage;\n          applyTransaction(() => {\n            this.setLoading(false);\n            this.update(config);\n          });\n          return this.selectPage(page);\n        })\n      );\n    }\n  }\n\n  getQuery(): QueryEntity<State> {\n    return this.query;\n  }\n\n  refreshCurrentPage() {\n    if (isNil(this.currentPage) === false) {\n      this.clearPage(this.currentPage);\n      this.setPage(this.currentPage);\n    }\n  }\n\n  private getFrom() {\n    if (this.isFirst) {\n      return 1;\n    }\n    return (this.currentPage - 1) * this.pagination.perPage + 1;\n  }\n\n  private getTo() {\n    if (this.isLast) {\n      return this.pagination.total;\n    }\n    return this.currentPage * this.pagination.perPage;\n  }\n\n  /**\n   * Select the page\n   */\n  private selectPage(page: number): Observable<PaginationResponse<getEntityType<State>>> {\n    return this.query.selectAll({ asObject: true }).pipe(\n      take(1),\n      map(entities => {\n        let response: PaginationResponse<getEntityType<State>> = {\n          ...this.pagination,\n          data: this.pages.get(page).ids.map(id => entities[id])\n        };\n\n        const { range, pagesControls } = this.config;\n\n        /** If no total - calc it */\n        if (isNaN(this.pagination.total)) {\n          if (response.lastPage === 1) {\n            response.total = response.data ? response.data.length : 0;\n          } else {\n            response.total = response.perPage * response.lastPage;\n          }\n          this.pagination.total = response.total;\n        }\n\n        if (range) {\n          response.from = this.getFrom();\n          response.to = this.getTo();\n        }\n\n        if (pagesControls) {\n          response.pageControls = generatePages(this.pagination.total, this.pagination.perPage);\n        }\n\n        return response;\n      })\n    );\n  }\n}\n\n/**\n * Generate an array so we can ngFor them to navigate between pages\n */\nfunction generatePages(total: number, perPage: number) {\n  const len = Math.ceil(total / perPage);\n  let arr = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(i + 1);\n  }\n  return arr;\n}\n\n/** backward compatibility */\nexport const Paginator = PaginatorPlugin;\n","import { AkitaPlugin } from '../plugin';\nimport { Query } from '../../query';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { getValue } from '../../getValueByString';\nimport { toBoolean } from '../../toBoolean';\nimport { isString } from '../../isString';\nimport { setValue } from '../../setValueByString';\nimport { logAction } from '../../actions';\n\nexport type FormGroupLike = {\n  patchValue: Function;\n  setValue: Function;\n  value: any;\n  get: Function;\n  valueChanges: Observable<any>;\n  controls: any;\n};\n\nexport type AkitaFormProp<T> = {\n  [key: string]: T;\n};\n\nexport type PersistFormParams = {\n  debounceTime?: number;\n  formKey?: string;\n  emitEvent?: boolean;\n  arrControlFactory?: ArrayControlFactory;\n};\n\nexport type ArrayControlFactory = (value: any) => any; // Todo: Return  AbstractControl interface\n\nexport class PersistNgFormPlugin<T = any> extends AkitaPlugin {\n  formChanges: Subscription;\n  private isRootKeys: boolean;\n  private form: FormGroupLike;\n  private isKeyBased: boolean;\n  private initialValue;\n  private builder;\n\n  constructor(protected query: Query<any>, private factoryFnOrPath?: Function | string, private params: PersistFormParams = {}) {\n    super(query);\n    this.params = { ...{ debounceTime: 300, formKey: 'akitaForm', emitEvent: false, arrControlFactory: v => this.builder.control(v) }, ...params };\n    this.isRootKeys = toBoolean(factoryFnOrPath) === false;\n    this.isKeyBased = isString(factoryFnOrPath) || this.isRootKeys;\n  }\n\n  setForm(form: FormGroupLike, builder?) {\n    this.form = form;\n    this.builder = builder;\n    this.activate();\n    return this;\n  }\n\n  reset(initialState?: T) {\n    let value;\n    if (initialState) {\n      value = initialState;\n    } else {\n      value = this.isKeyBased ? this.initialValue : (this as any).factoryFnOrPath();\n    }\n\n    if (this.isKeyBased) {\n      Object.keys(this.initialValue).forEach(stateKey => {\n        const value = this.initialValue[stateKey];\n        if (Array.isArray(value) && this.builder) {\n          const formArray = this.form.controls[stateKey];\n          this.cleanArray(formArray);\n          value.forEach((v, i) => {\n            this.form.get(stateKey).insert(i, (this.params.arrControlFactory as Function)(v));\n          });\n        }\n      });\n    }\n    this.form.patchValue(value, { emitEvent: this.params.emitEvent });\n\n    const storeValue = this.isKeyBased ? setValue(this.getQuery().getValue(), `${this.getStore().storeName}.${this.factoryFnOrPath}`, value) : { [this.params.formKey]: value };\n    this.updateStore(storeValue);\n  }\n\n  private cleanArray(control) {\n    while (control.length !== 0) {\n      control.removeAt(0);\n    }\n  }\n\n  private resolveInitialValue(formValue, root) {\n    if (!formValue) return;\n    return Object.keys(formValue).reduce((acc, stateKey) => {\n      const value = root[stateKey];\n      if (Array.isArray(value) && this.builder) {\n        const factory = this.params.arrControlFactory;\n        this.cleanArray(this.form.get(stateKey));\n        value.forEach((v, i) => {\n          this.form.get(stateKey).insert(i, (factory as Function)(v));\n        });\n      }\n      acc[stateKey] = root[stateKey];\n      return acc;\n    }, {});\n  }\n\n  private activate() {\n    let path;\n\n    if (this.isKeyBased) {\n      if (this.isRootKeys) {\n        this.initialValue = this.resolveInitialValue(this.form.value, this.getQuery().getValue());\n        this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });\n      } else {\n        path = `${this.getStore().storeName}.${this.factoryFnOrPath}`;\n        const root = getValue(this.getQuery().getValue(), path);\n        this.initialValue = this.resolveInitialValue(root, root);\n        this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });\n      }\n    } else {\n      if (!(this.getQuery().getValue() as AkitaFormProp<T>)[this.params.formKey]) {\n        logAction('@PersistNgFormPlugin activate');\n        this.updateStore({ [this.params.formKey]: (this as any).factoryFnOrPath() });\n      }\n\n      const value = this.getQuery().getValue()[this.params.formKey];\n      this.form.patchValue(value);\n    }\n\n    this.formChanges = this.form.valueChanges.pipe(debounceTime(this.params.debounceTime)).subscribe(value => {\n      logAction('@PersistForm - Update');\n      let newState;\n      if (this.isKeyBased) {\n        if (this.isRootKeys) {\n          newState = state => ({ ...state, ...value });\n        } else {\n          newState = state => setValue(state, path, value);\n        }\n      } else {\n        newState = () => ({ [this.params.formKey]: value });\n      }\n      this.updateStore(newState(this.getQuery().getValue()));\n    });\n  }\n\n  destroy() {\n    this.formChanges && this.formChanges.unsubscribe();\n    this.form = null;\n    this.builder = null;\n  }\n}\n","// @internal\nexport function capitalize(value: string) {\n  return value && value.charAt(0).toUpperCase() + value.slice(1);\n}\n","import { currentAction, setSkipAction } from './actions';\nimport { isDefined } from './isDefined';\nimport { $$addStore, $$deleteStore, $$updateStore } from './dispatchers';\nimport { __stores__ } from './stores';\nimport { capitalize } from './captialize';\nimport { isNotBrowser } from './root';\n\nexport type DevtoolsOptions = {\n  /** instance name visible in devtools */\n  name: string;\n  /**  maximum allowed actions to be stored in the history tree */\n  maxAge: number;\n  latency: number;\n  actionsBlacklist: string[];\n  actionsWhitelist: string[];\n  storesWhitelist: string[];\n  shouldCatchErrors: boolean;\n  logTrace: boolean;\n  predicate: (state: any, action: any) => boolean;\n  shallow: boolean;\n  sortAlphabetically: boolean;\n};\nlet subs = [];\n\nexport type NgZoneLike = { run: any };\n\nexport function akitaDevtools(ngZone: NgZoneLike, options?: Partial<DevtoolsOptions>);\nexport function akitaDevtools(options?: Partial<DevtoolsOptions>);\nexport function akitaDevtools(ngZoneOrOptions?: NgZoneLike | Partial<DevtoolsOptions>, options: Partial<DevtoolsOptions> = {}) {\n  if (isNotBrowser) return;\n\n  if (!(window as any).__REDUX_DEVTOOLS_EXTENSION__) {\n    return;\n  }\n\n  subs.length &&\n    subs.forEach(s => {\n      if (s.unsubscribe) {\n        s.unsubscribe();\n      } else {\n        s && s();\n      }\n    });\n\n  const isAngular = ngZoneOrOptions && ngZoneOrOptions['run'];\n\n  if (!isAngular) {\n    ngZoneOrOptions = ngZoneOrOptions || {};\n    (ngZoneOrOptions as any).run = cb => cb();\n    options = ngZoneOrOptions as Partial<DevtoolsOptions>;\n  }\n\n  const defaultOptions: Partial<DevtoolsOptions> & { name: string } = { name: 'Akita', shallow: true, storesWhitelist: [] };\n  const merged = Object.assign({}, defaultOptions, options);\n  const storesWhitelist = merged.storesWhitelist;\n  const devTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__.connect(merged);\n  let appState = {};\n\n  const isAllowed = storeName => {\n    if (!storesWhitelist.length) {\n      return true;\n    }\n\n    return storesWhitelist.indexOf(storeName) > -1;\n  };\n\n  subs.push(\n    $$addStore.subscribe(storeName => {\n      if (isAllowed(storeName) === false) return;\n      appState = {\n        ...appState,\n        [storeName]: __stores__[storeName]._value()\n      };\n      devTools.send({ type: `[${capitalize(storeName)}] - @@INIT` }, appState);\n    })\n  );\n\n  subs.push(\n    $$deleteStore.subscribe(storeName => {\n      if (isAllowed(storeName) === false) return;\n      delete appState[storeName];\n      devTools.send({ type: `[${storeName}] - Delete Store` }, appState);\n    })\n  );\n\n  subs.push(\n    $$updateStore.subscribe(storeName => {\n      if (isAllowed(storeName) === false) return;\n      const { type, entityIds, skip } = currentAction;\n\n      if (skip) {\n        setSkipAction(false);\n        return;\n      }\n\n      const store = __stores__[storeName];\n      if (!store) {\n        return;\n      }\n\n      if (options.shallow === false && appState[storeName]) {\n        const isEqual = JSON.stringify(store._value()) === JSON.stringify(appState[storeName]);\n        if (isEqual) return;\n      }\n\n      appState = {\n        ...appState,\n        [storeName]: store._value()\n      };\n\n      const normalize = capitalize(storeName);\n      let msg = isDefined(entityIds) ? `[${normalize}] - ${type} (ids: ${entityIds})` : `[${normalize}] - ${type}`;\n\n      if (options.logTrace) {\n        console.group(msg);\n        console.trace();\n        console.groupEnd();\n      }\n\n      if (options.sortAlphabetically) {\n        const sortedAppState = Object.keys(appState)\n          .sort()\n          .reduce((acc, storeName) => {\n            acc[storeName] = appState[storeName];\n            return acc;\n          }, {});\n\n        devTools.send({ type: msg }, sortedAppState);\n        return;\n      }\n\n      devTools.send({ type: msg }, appState);\n    })\n  );\n\n  subs.push(\n    devTools.subscribe(message => {\n      if (message.type === 'DISPATCH') {\n        const payloadType = message.payload.type;\n\n        if (payloadType === 'COMMIT') {\n          devTools.init(appState);\n          return;\n        }\n\n        if (message.state) {\n          const rootState = JSON.parse(message.state);\n          for (let i = 0, keys = Object.keys(rootState); i < keys.length; i++) {\n            const storeName = keys[i];\n            if (__stores__[storeName]) {\n              (ngZoneOrOptions as NgZoneLike).run(() => {\n                __stores__[storeName]._setState(() => rootState[storeName], false);\n              });\n            }\n          }\n        }\n      }\n    })\n  );\n}\n","import { Observable } from 'rxjs';\nimport { EntityState, OrArray, getIDType } from '../types';\nimport { QueryEntity } from '../queryEntity';\nimport { isUndefined } from '../isUndefined';\nimport { coerceArray } from '../coerceArray';\nimport { toBoolean } from '../toBoolean';\nimport { isFunction } from '../isFunction';\n\nexport type RebaseAction<P = any> = (plugin: P) => any;\n\nexport type RebaseActions<P = any> = { beforeRemove?: RebaseAction; beforeAdd?: RebaseAction; afterAdd?: RebaseAction };\n\n/**\n * Each plugin that wants to add support for entities should extend this interface.\n */\nexport abstract class EntityCollectionPlugin<State extends EntityState, P> {\n  protected entities = new Map<getIDType<State>, P>();\n\n  protected constructor(protected query: QueryEntity<State>, private entityIds: OrArray<getIDType<State>>) {}\n\n  /**\n   * Get the entity plugin instance.\n   */\n  protected getEntity(id: getIDType<State>): P {\n    return this.entities.get(id);\n  }\n\n  /**\n   * Whether the entity plugin exist.\n   */\n  protected hasEntity(id: getIDType<State>): boolean {\n    return this.entities.has(id);\n  }\n\n  /**\n   * Remove the entity plugin instance.\n   */\n  protected removeEntity(id: getIDType<State>) {\n    this.destroy(id);\n    return this.entities.delete(id);\n  }\n\n  /**\n   * Set the entity plugin instance.\n   */\n  protected createEntity(id: getIDType<State>, plugin: P) {\n    return this.entities.set(id, plugin);\n  }\n\n  /**\n   * If the user passes `entityIds` we take them; otherwise, we take all.\n   */\n  protected getIds(): any {\n    return isUndefined(this.entityIds) ? this.query.getValue().ids : coerceArray(this.entityIds);\n  }\n\n  /**\n   * When you call one of the plugin methods, you can pass id/ids or undefined which means all.\n   */\n  protected resolvedIds(ids?): getIDType<State>[] {\n    return isUndefined(ids) ? this.getIds() : coerceArray(ids);\n  }\n\n  /**\n   * Call this method when you want to activate the plugin on init or when you need to listen to add/remove of entities dynamically.\n   *\n   * For example in your plugin you may do the following:\n   *\n   * this.query.select(state => state.ids).pipe(skip(1)).subscribe(ids => this.activate(ids));\n   */\n  protected rebase(ids: getIDType<State>[], actions: RebaseActions<P> = {}) {\n    /**\n     *\n     * If the user passes `entityIds` & we have new ids check if we need to add/remove instances.\n     *\n     * This phase will be called only upon update.\n     */\n    if (toBoolean(ids)) {\n      /**\n       * Which means all\n       */\n      if (isUndefined(this.entityIds)) {\n        for (let i = 0, len = ids.length; i < len; i++) {\n          const entityId = ids[i];\n          if (this.hasEntity(entityId) === false) {\n            isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);\n            const plugin = this.instantiatePlugin(entityId);\n            this.entities.set(entityId, plugin);\n            isFunction(actions.afterAdd) && actions.afterAdd(plugin);\n          }\n        }\n\n        this.entities.forEach((plugin, entityId) => {\n          if (ids.indexOf(entityId) === -1) {\n            isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);\n            this.removeEntity(entityId);\n          }\n        });\n      } else {\n        /**\n         * Which means the user passes specific ids\n         */\n        const _ids = coerceArray(this.entityIds);\n        for (let i = 0, len = _ids.length; i < len; i++) {\n          const entityId = _ids[i];\n          /** The Entity in current ids and doesn't exist, add it. */\n          if (ids.indexOf(entityId) > -1 && this.hasEntity(entityId) === false) {\n            isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);\n            const plugin = this.instantiatePlugin(entityId);\n            this.entities.set(entityId, plugin);\n            isFunction(actions.afterAdd) && actions.afterAdd(plugin);\n          } else {\n            this.entities.forEach((plugin, entityId) => {\n              /** The Entity not in current ids and exists, remove it. */\n              if (ids.indexOf(entityId) === -1 && this.hasEntity(entityId) === true) {\n                isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);\n                this.removeEntity(entityId);\n              }\n            });\n          }\n        }\n      }\n    } else {\n      /**\n       * Otherwise, start with the provided ids or all.\n       */\n      this.getIds().forEach(id => {\n        if (!this.hasEntity(id)) this.createEntity(id, this.instantiatePlugin(id));\n      });\n    }\n  }\n\n  /**\n   * Listen for add/remove entities.\n   */\n  protected selectIds(): Observable<any> {\n    return this.query.select(state => state.ids);\n  }\n\n  /**\n   * Base method for activation, you can override it if you need to.\n   */\n  protected activate(ids?: any[]) {\n    this.rebase(ids);\n  }\n\n  /**\n   * This method is responsible for plugin instantiation.\n   *\n   * For example:\n   * return new StateHistory(this.query, this.params, id) as P;\n   */\n  protected abstract instantiatePlugin(id: getIDType<State>): P;\n\n  /**\n   * This method is responsible for cleaning.\n   */\n  public abstract destroy(id?: getIDType<State>);\n\n  /**\n   * Loop over each id and invoke the plugin method.\n   */\n  protected forEachId(ids: OrArray<getIDType<State>>, cb: (entity: P) => any) {\n    const _ids = this.resolvedIds(ids);\n\n    for (let i = 0, len = _ids.length; i < len; i++) {\n      const id = _ids[i];\n      if (this.hasEntity(id)) {\n        cb(this.getEntity(id));\n      }\n    }\n  }\n}\n","import { pairwise, distinctUntilChanged } from 'rxjs/operators';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AkitaPlugin, Queries } from '../plugin';\nimport { logAction } from '../../actions';\nimport { isFunction } from '../../isFunction';\n\nexport interface StateHistoryParams {\n  maxAge?: number;\n  watchProperty?: string;\n  comparator?: (prevState, currentState) => boolean;\n}\n\nexport type History<State> = {\n  past: State[];\n  present: State | null;\n  future: State[];\n};\n\nexport class StateHistoryPlugin<State = any> extends AkitaPlugin<State> {\n  /** Allow skipping an update from outside */\n  private skip = false;\n\n  private history = {\n    past: [],\n    present: null,\n    future: []\n  };\n\n  /** Skip the update when redo/undo */\n  private skipUpdate = false;\n  private subscription;\n\n  /* Subjects for supporting observable hasPast$ and hasFuture$ */\n  private hasPastSubject: BehaviorSubject<boolean>;\n  private _hasPast$: Observable<boolean>;\n  private hasFutureSubject: BehaviorSubject<boolean>;\n  private _hasFuture$: Observable<boolean>;\n\n  constructor(protected query: Queries<State>, private params: StateHistoryParams = {}, private _entityId?: any) {\n    super(query, {\n      resetFn: () => this.clear()\n    });\n    params.maxAge = !!params.maxAge ? params.maxAge : 10;\n    params.comparator = params.comparator || (() => true);\n\n    this.activate();\n  }\n\n  /**\n   * Observable stream representing whether the history plugin has an available past\n   *\n   */\n  get hasPast$(): Observable<boolean> {\n    return this._hasPast$;\n  }\n\n  /**\n   * Observable stream representing whether the history plugin has an available future\n   *\n   */\n  get hasFuture$(): Observable<boolean> {\n    return this._hasFuture$;\n  }\n\n  get hasPast() {\n    return this.history.past.length > 0;\n  }\n\n  get hasFuture() {\n    return this.history.future.length > 0;\n  }\n\n  private get property() {\n    return this.params.watchProperty;\n  }\n\n  /* Updates the hasPast$ hasFuture$ observables*/\n  private updateHasHistory() {\n    this.hasFutureSubject.next(this.hasFuture);\n    this.hasPastSubject.next(this.hasPast);\n  }\n\n  activate() {\n    this.hasPastSubject = new BehaviorSubject(false);\n    this._hasPast$ = this.hasPastSubject.asObservable().pipe(distinctUntilChanged());\n    this.hasFutureSubject = new BehaviorSubject(false);\n    this._hasFuture$ = this.hasFutureSubject.asObservable().pipe(distinctUntilChanged());\n\n    this.history.present = this.getSource(this._entityId, this.property);\n    this.subscription = (this as any)\n      .selectSource(this._entityId, this.property)\n      .pipe(pairwise())\n      .subscribe(([past, present]) => {\n        if (this.skip) {\n          this.skip = false;\n          return;\n        }\n        /**\n         *  comparator: (prev, current) => isEqual(prev, current) === false\n         */\n        const shouldUpdate = this.params.comparator(past, present);\n\n        if (!this.skipUpdate && shouldUpdate) {\n          if (this.history.past.length === this.params.maxAge) {\n            this.history.past = this.history.past.slice(1);\n          }\n          this.history.past = [...this.history.past, past];\n          this.history.present = present;\n          this.updateHasHistory();\n        }\n      });\n  }\n\n  undo() {\n    if (this.history.past.length > 0) {\n      const { past, present } = this.history;\n      const previous = past[past.length - 1];\n      this.history.past = past.slice(0, past.length - 1);\n      this.history.present = previous;\n      this.history.future = [present, ...this.history.future];\n      this.update();\n    }\n  }\n\n  redo() {\n    if (this.history.future.length > 0) {\n      const { past, present } = this.history;\n      const next = this.history.future[0];\n      const newFuture = this.history.future.slice(1);\n      this.history.past = [...past, present];\n      this.history.present = next;\n      this.history.future = newFuture;\n      this.update('Redo');\n    }\n  }\n\n  jumpToPast(index: number) {\n    if (index < 0 || index >= this.history.past.length) return;\n\n    const { past, future, present } = this.history;\n    /**\n     *\n     * const past = [1, 2, 3, 4, 5];\n     * const present = 6;\n     * const future = [7, 8, 9];\n     * const index = 2;\n     *\n     * newPast = past.slice(0, index) = [1, 2];\n     * newPresent = past[index] = 3;\n     * newFuture = [...past.slice(index + 1),present, ...future] = [4, 5, 6, 7, 8, 9];\n     *\n     */\n    const newPast = past.slice(0, index);\n    const newFuture = [...past.slice(index + 1), present, ...future];\n    const newPresent = past[index];\n    this.history.past = newPast;\n    this.history.present = newPresent;\n    this.history.future = newFuture;\n    this.update();\n  }\n\n  jumpToFuture(index: number) {\n    if (index < 0 || index >= this.history.future.length) return;\n\n    const { past, future, present } = this.history;\n    /**\n     *\n     * const past = [1, 2, 3, 4, 5];\n     * const present = 6;\n     * const future = [7, 8, 9, 10]\n     * const index = 1\n     *\n     * newPast = [...past, present, ...future.slice(0, index) = [1, 2, 3, 4, 5, 6, 7];\n     * newPresent = future[index] = 8;\n     * newFuture = futrue.slice(index+1) = [9, 10];\n     *\n     */\n\n    const newPast = [...past, present, ...future.slice(0, index)];\n    const newPresent = future[index];\n    const newFuture = future.slice(index + 1);\n    this.history.past = newPast;\n    this.history.present = newPresent;\n    this.history.future = newFuture;\n    this.update('Redo');\n  }\n\n  /**\n   *\n   * jump n steps in the past or forward\n   *\n   */\n  jump(n: number) {\n    if (n > 0) return this.jumpToFuture(n - 1);\n    if (n < 0) return this.jumpToPast(this.history.past.length + n);\n  }\n\n  /**\n   * Clear the history\n   *\n   * @param customUpdateFn Callback function for only clearing part of the history\n   *\n   * @example\n   *\n   * stateHistory.clear((history) => {\n   *  return {\n   *    past: history.past,\n   *    present: history.present,\n   *    future: []\n   *  };\n   * });\n   */\n  clear(customUpdateFn?: (history: History<State>) => History<State>) {\n    this.history = isFunction(customUpdateFn)\n      ? customUpdateFn(this.history)\n      : {\n          past: [],\n          present: null,\n          future: []\n        };\n    this.updateHasHistory();\n  }\n\n  destroy(clearHistory = false) {\n    if (clearHistory) {\n      this.clear();\n    }\n    this.subscription.unsubscribe();\n  }\n\n  ignoreNext() {\n    this.skip = true;\n  }\n\n  private update(action = 'Undo') {\n    this.skipUpdate = true;\n    logAction(`@StateHistory - ${action}`);\n    this.updateStore(this.history.present, this._entityId, this.property);\n    this.updateHasHistory();\n    this.skipUpdate = false;\n  }\n}\n","import { EntityState, OrArray, getIDType } from '../../types';\nimport { QueryEntity } from '../../queryEntity';\nimport { StateHistoryParams, StateHistoryPlugin } from './stateHistoryPlugin';\nimport { toBoolean } from '../../toBoolean';\nimport { skip } from 'rxjs/operators';\nimport { EntityCollectionPlugin } from '../entityCollectionPlugin';\n\nexport interface StateHistoryEntityParams<IDType> extends StateHistoryParams {\n  entityIds?: OrArray<IDType>;\n}\n\nexport class EntityStateHistoryPlugin<State extends EntityState = any, P extends StateHistoryPlugin<State> = StateHistoryPlugin<State>> extends EntityCollectionPlugin<State, P> {\n  constructor(protected query: QueryEntity<State>, protected readonly params: StateHistoryEntityParams<getIDType<State>> = {}) {\n    super(query, params.entityIds);\n    params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;\n    this.activate();\n    this.selectIds()\n      .pipe(skip(1))\n      .subscribe(ids => this.activate(ids));\n  }\n\n  redo(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, e => e.redo());\n  }\n\n  undo(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, e => e.undo());\n  }\n\n  hasPast(id: getIDType<State>) {\n    if (this.hasEntity(id)) {\n      return this.getEntity(id).hasPast;\n    }\n  }\n\n  hasFuture(id: getIDType<State>) {\n    if (this.hasEntity(id)) {\n      return this.getEntity(id).hasFuture;\n    }\n  }\n\n  jumpToFuture(ids: OrArray<getIDType<State>>, index: number) {\n    this.forEachId(ids, e => e.jumpToFuture(index));\n  }\n\n  jumpToPast(ids: OrArray<getIDType<State>>, index: number) {\n    this.forEachId(ids, e => e.jumpToPast(index));\n  }\n\n  clear(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, e => e.clear());\n  }\n\n  destroy(ids?: OrArray<getIDType<State>>, clearHistory = false) {\n    this.forEachId(ids, e => e.destroy(clearHistory));\n  }\n\n  ignoreNext(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, e => e.ignoreNext());\n  }\n\n  protected instantiatePlugin(id: getIDType<State>) {\n    return new StateHistoryPlugin<State>(this.query, this.params, id) as P;\n  }\n}\n","import { AkitaPlugin, Queries } from '../plugin';\nimport { QueryEntity } from '../../queryEntity';\nimport { BehaviorSubject, combineLatest, Observable, Subject, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, skip } from 'rxjs/operators';\nimport { isUndefined } from '../../isUndefined';\nimport { Query } from '../../query';\nimport { coerceArray } from '../../coerceArray';\nimport { isFunction } from '../../isFunction';\nimport { logAction } from '../../actions';\n\ntype Head<State = any> = State | Partial<State>;\n\nexport type DirtyCheckComparator<State> = (head: State, current: State) => boolean;\n\nexport type DirtyCheckParams<StoreState = any> = {\n  comparator?: DirtyCheckComparator<StoreState>;\n  watchProperty?: keyof StoreState | (keyof StoreState)[];\n};\n\nexport const dirtyCheckDefaultParams = {\n  comparator: (head, current) => JSON.stringify(head) !== JSON.stringify(current)\n};\n\nexport function getNestedPath(nestedObj, path: string) {\n  const pathAsArray: string[] = path.split('.');\n  return pathAsArray.reduce((obj, key) => (obj && obj[key] !== 'undefined' ? obj[key] : undefined), nestedObj);\n}\n\nexport type DirtyCheckResetParams<StoreState = any> = {\n  updateFn?: StoreState | ((head: StoreState, current: StoreState) => any);\n};\n\nexport class DirtyCheckPlugin<State = any> extends AkitaPlugin<State> {\n  private head: Head<State>;\n  private dirty = new BehaviorSubject(false);\n  private subscription: Subscription;\n  private active = false;\n  private _reset = new Subject();\n\n  isDirty$: Observable<boolean> = this.dirty.asObservable().pipe(distinctUntilChanged());\n  reset$ = this._reset.asObservable();\n\n  constructor(protected query: Queries<State>, private params?: DirtyCheckParams<State>, private _entityId?: any) {\n    super(query);\n    this.params = { ...dirtyCheckDefaultParams, ...params };\n    if (this.params.watchProperty) {\n      let watchProp = coerceArray(this.params.watchProperty) as any[];\n      if (query instanceof QueryEntity && watchProp.includes('entities') && !watchProp.includes('ids')) {\n        watchProp.push('ids');\n      }\n      this.params.watchProperty = watchProp;\n    }\n  }\n\n  reset(params: DirtyCheckResetParams = {}) {\n    let currentValue = this.head;\n    if (isFunction(params.updateFn)) {\n      if (this.isEntityBased(this._entityId)) {\n        currentValue = params.updateFn(this.head, (this.getQuery() as QueryEntity<State>).getEntity(this._entityId));\n      } else {\n        currentValue = params.updateFn(this.head, (this.getQuery() as Query<State>).getValue());\n      }\n    }\n    logAction(`@DirtyCheck - Revert`);\n    this.updateStore(currentValue, this._entityId);\n    this._reset.next();\n  }\n\n  setHead() {\n    if (!this.active) {\n      this.activate();\n      this.active = true;\n    } else {\n      this.head = this._getHead();\n    }\n    this.updateDirtiness(false);\n    return this;\n  }\n\n  isDirty(): boolean {\n    return !!this.dirty.value;\n  }\n\n  hasHead() {\n    return !!this.getHead();\n  }\n\n  destroy() {\n    this.head = null;\n    this.subscription && this.subscription.unsubscribe();\n    this._reset && this._reset.complete();\n  }\n\n  isPathDirty(path: string) {\n    const head = this.getHead();\n    const current = (this.getQuery() as Query<State>).getValue();\n    const currentPathValue = getNestedPath(current, path);\n    const headPathValue = getNestedPath(head, path);\n\n    return this.params.comparator(currentPathValue, headPathValue);\n  }\n\n  protected getHead() {\n    return this.head;\n  }\n\n  private activate() {\n    this.head = this._getHead();\n    /** if we are tracking specific properties select only the relevant ones */\n    const source = this.params.watchProperty\n      ? (this.params.watchProperty as (keyof State)[]).map(prop =>\n          this.query\n            .select(state => state[prop])\n            .pipe(\n              map(val => ({\n                val,\n                __akitaKey: prop\n              }))\n            )\n        )\n      : [this.selectSource(this._entityId)];\n    this.subscription = combineLatest(...source)\n      .pipe(skip(1))\n      .subscribe((currentState: any[]) => {\n        if (isUndefined(this.head)) return;\n        /** __akitaKey is used to determine if we are tracking a specific property or a store change */\n        const isChange = currentState.some(state => {\n          const head = state.__akitaKey ? this.head[state.__akitaKey as any] : this.head;\n          const compareTo = state.__akitaKey ? state.val : state;\n\n          return this.params.comparator(head, compareTo);\n        });\n\n        this.updateDirtiness(isChange);\n      });\n  }\n\n  private updateDirtiness(isDirty: boolean) {\n    this.dirty.next(isDirty);\n  }\n\n  private _getHead(): Head<State> {\n    let head: Head<State> = this.getSource(this._entityId);\n    if (this.params.watchProperty) {\n      head = this.getWatchedValues(head as State);\n    }\n    return head;\n  }\n\n  private getWatchedValues(source: State): Partial<State> {\n    return (this.params.watchProperty as (keyof State)[]).reduce(\n      (watched, prop) => {\n        watched[prop] = source[prop];\n        return watched;\n      },\n      {} as Partial<State>\n    );\n  }\n}\n","import { DirtyCheckComparator, dirtyCheckDefaultParams, DirtyCheckPlugin, DirtyCheckResetParams, getNestedPath } from './dirtyCheckPlugin';\nimport { EntityCollectionPlugin } from '../entityCollectionPlugin';\nimport { auditTime, map, skip } from 'rxjs/operators';\nimport { merge, Observable, Subject } from 'rxjs';\nimport { EntityState, OrArray, getIDType, getEntityType } from '../../types';\nimport { QueryEntity } from '../../queryEntity';\nimport { coerceArray } from '../../coerceArray';\n\nexport type DirtyCheckCollectionParams<State extends EntityState> = {\n  comparator?: DirtyCheckComparator<getEntityType<State>>;\n  entityIds?: OrArray<getIDType<State>>;\n};\n\nexport class EntityDirtyCheckPlugin<State extends EntityState = any, P extends DirtyCheckPlugin<State> = DirtyCheckPlugin<State>> extends EntityCollectionPlugin<State, P> {\n  private _someDirty = new Subject();\n  someDirty$: Observable<boolean> = merge(this.query.select(state => state.entities), this._someDirty.asObservable()).pipe(\n    auditTime(0),\n    map(() => this.checkSomeDirty())\n  );\n\n  constructor(protected query: QueryEntity<State>, private readonly params: DirtyCheckCollectionParams<State> = {}) {\n    super(query, params.entityIds);\n    this.params = { ...dirtyCheckDefaultParams, ...params };\n    // TODO lazy activate?\n    this.activate();\n    this.selectIds()\n      .pipe(skip(1))\n      .subscribe(ids => {\n        super.rebase(ids, { afterAdd: plugin => plugin.setHead() });\n      });\n  }\n\n  setHead(ids?: OrArray<getIDType<State>>) {\n    if (this.params.entityIds && ids) {\n      const toArray = coerceArray(ids) as getIDType<State>[];\n      const someAreWatched = coerceArray(this.params.entityIds).some(id => toArray.indexOf(id) > -1);\n      if (someAreWatched === false) {\n        return this;\n      }\n    }\n    this.forEachId(ids, e => e.setHead());\n    this._someDirty.next();\n    return this;\n  }\n\n  hasHead(id: getIDType<State>): boolean {\n    if (this.entities.has(id)) {\n      const entity = this.getEntity(id);\n      return entity.hasHead();\n    }\n\n    return false;\n  }\n\n  reset(ids?: OrArray<getIDType<State>>, params: DirtyCheckResetParams = {}) {\n    this.forEachId(ids, e => e.reset(params));\n  }\n\n  isDirty(id: getIDType<State>): Observable<boolean>;\n  isDirty(id: getIDType<State>, asObservable: true): Observable<boolean>;\n  isDirty(id: getIDType<State>, asObservable: false): boolean;\n  isDirty(id: getIDType<State>, asObservable = true): Observable<boolean> | boolean {\n    if (this.entities.has(id)) {\n      const entity = this.getEntity(id);\n      return asObservable ? entity.isDirty$ : entity.isDirty();\n    }\n\n    return false;\n  }\n\n  someDirty(): boolean {\n    return this.checkSomeDirty();\n  }\n\n  isPathDirty(id: getIDType<State>, path: string) {\n    if (this.entities.has(id)) {\n      const head = (this.getEntity(id) as any).getHead();\n      const current = this.query.getEntity(id);\n      const currentPathValue = getNestedPath(current, path);\n      const headPathValue = getNestedPath(head, path);\n\n      return this.params.comparator(currentPathValue, headPathValue);\n    }\n\n    return null;\n  }\n\n  destroy(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, e => e.destroy());\n    /** complete only when the plugin destroys */\n    if (!ids) {\n      this._someDirty.complete();\n    }\n  }\n\n  protected instantiatePlugin(id: getIDType<State>): P {\n    return new DirtyCheckPlugin(this.query, this.params, id) as P;\n  }\n\n  private checkSomeDirty(): boolean {\n    const entitiesIds = this.resolvedIds();\n    for (const id of entitiesIds) {\n      if (this.getEntity(id).isDirty()) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","/**\n * Generate random guid\n *\n * @example\n *\n * {\n *   id: guid()\n * }\n *\n */\nexport function guid() {\n  return 'xxxxxx4xyx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n","import { DEFAULT_ID_KEY } from './defaultIDKey';\n\n// @internal\nexport function toEntitiesIds<E>(entities: E[], idKey = DEFAULT_ID_KEY) {\n  const ids = [];\n  for (const entity of entities) {\n    ids.push(entity[idKey]);\n  }\n  return ids;\n}\n","import { __stores__ } from './stores';\nimport { applyTransaction } from './transaction';\n\nexport interface ResetStoresParams {\n  exclude: string[];\n}\n\n/**\n * Reset stores back to their initial state\n *\n * @example\n *\n * resetStores()\n * resetStores({\n *   exclude: ['auth']\n * })\n */\nexport function resetStores(options?: Partial<ResetStoresParams>) {\n  const defaults: ResetStoresParams = {\n    exclude: []\n  };\n\n  options = Object.assign({}, defaults, options);\n  const stores = Object.keys(__stores__);\n\n  applyTransaction(() => {\n    for (const store of stores) {\n      const s = __stores__[store];\n      if (!options.exclude) {\n        s.reset();\n      } else {\n        if (options.exclude.indexOf(s.storeName) === -1) {\n          s.reset();\n        }\n      }\n    }\n  });\n}\n","import { isArray } from './isArray';\n\n// @internal\nexport function isNumber(value: any): value is number {\n  return !isArray(value) && value - parseFloat(value) + 1 >= 0;\n}\n","import { __stores__ } from './stores';\nimport { IDS } from './types';\nimport { AddEntitiesOptions } from './addEntities';\nimport { EntityStore } from './entityStore';\nimport { SetEntities } from './setEntities';\nimport { isNil } from './isNil';\nimport { AkitaError } from './errors';\n\nexport enum StoreActions {\n  Update,\n  AddEntities,\n  SetEntities,\n  UpdateEntities,\n  RemoveEntities,\n  UpsertEntities\n}\n\ninterface RunStoreActionSetEntities<Entity = any> {\n  payload: {\n    data: SetEntities<Entity>;\n  };\n}\n\ninterface RunStoreActionAddEntities<Entity = any> {\n  payload: {\n    data: Entity[] | Entity;\n    params?: AddEntitiesOptions;\n  };\n}\n\ninterface RunStoreActionUpdateEntities<Entity = any> {\n  payload: {\n    data: Partial<Entity>;\n    entityIds: IDS;\n  };\n}\n\ninterface RunStoreActionRemoveEntities<Entity = any> {\n  payload: {\n    entityIds: IDS;\n  };\n}\n\ninterface RunStoreActionUpsertEntities<Entity = any> {\n  payload: {\n    data: Partial<Entity>[] | Partial<Entity>;\n    entityIds?: IDS;\n  };\n}\n\ninterface RunStoreActionUpdate<State = any> {\n  payload: {\n    data: Partial<State>;\n  };\n}\n\n/**\n * @example\n *\n * runStoreAction('books', StoreActions.Update, {\n *   payload: {\n *    data: { filter: 'New filter' }\n *   }\n * });\n */\nexport function runStoreAction<State = any>(storeName: string, action: StoreActions.Update, params: RunStoreActionUpdate<State>);\n/**\n * @example\n *\n * runStoreAction('books', StoreActions.RemoveEntities, {\n *   payload: {\n *    entityIds: 2\n *   }\n * });\n */\nexport function runStoreAction<Entity = any>(storeName: string, action: StoreActions.RemoveEntities, params: RunStoreActionRemoveEntities<Entity>);\n/**\n * @example\n *\n * runStoreAction('books', StoreActions.UpdateEntities, {\n *   payload: {\n *    data: { title: 'New title' },\n *    entityIds: 2\n *   }\n * });\n */\nexport function runStoreAction<Entity = any>(storeName: string, action: StoreActions.UpdateEntities, params: RunStoreActionUpdateEntities<Entity>);\n/**\n * @example\n *\n * runStoreAction('books', StoreActions.SetEntities, {\n *   payload: {\n *    data: [{ id: 1 }, { id: 2 }]\n *   }\n * });\n */\nexport function runStoreAction<Entity = any>(storeName: string, action: StoreActions.SetEntities, params: RunStoreActionSetEntities<Entity>);\n/**\n * @example\n *\n * runStoreAction('books', StoreActions.AddEntities, {\n *   payload: {\n *    data: { id: 1 }\n *   }\n * });\n */\nexport function runStoreAction<Entity = any>(storeName: string, action: StoreActions.AddEntities, params: RunStoreActionAddEntities<Entity>);\n/**\n * @example\n *\n * runStoreAction('books', StoreActions.UpsertEntities, {\n *   payload: {\n *    data: { title: 'New Title' },\n *    entityIds: [1, 2]\n *   }\n * });\n * runStoreAction('books', StoreActions.UpsertEntities, {\n *   payload: {\n *    data: [{ id: 2, title: 'New Title' }, { id: 3, title: 'Another title'}],\n *   }\n * });\n */\nexport function runStoreAction<Entity = any>(storeName: string, action: StoreActions.UpsertEntities, params: RunStoreActionUpsertEntities<Entity>);\nexport function runStoreAction<EntityOrState = any>(\n  storeName: string,\n  action: StoreActions,\n  params:\n    | RunStoreActionSetEntities<EntityOrState>\n    | RunStoreActionAddEntities<EntityOrState>\n    | RunStoreActionRemoveEntities<EntityOrState>\n    | RunStoreActionUpdateEntities<EntityOrState>\n    | RunStoreActionUpsertEntities<EntityOrState>\n) {\n  const store = __stores__[storeName];\n\n  if (isNil(store)) {\n    throw new AkitaError(`${storeName} doesn't exist`);\n  }\n\n  switch (action) {\n    case StoreActions.SetEntities: {\n      const { payload } = params as RunStoreActionSetEntities;\n      (store as EntityStore).set(payload.data);\n      return;\n    }\n    case StoreActions.AddEntities: {\n      const { payload } = params as RunStoreActionAddEntities;\n      (store as EntityStore).add(payload.data, payload.params);\n      return;\n    }\n\n    case StoreActions.UpdateEntities: {\n      const { payload } = params as RunStoreActionUpdateEntities;\n      (store as EntityStore).update(payload.entityIds, payload.data);\n      return;\n    }\n\n    case StoreActions.RemoveEntities: {\n      const { payload } = params as RunStoreActionRemoveEntities;\n      (store as EntityStore).remove(payload.entityIds);\n      return;\n    }\n\n    case StoreActions.UpsertEntities: {\n      const { payload } = params as RunStoreActionUpsertEntities;\n      if (payload.entityIds) {\n        (store as EntityStore).upsert(payload.entityIds, payload.data);\n      } else if (Array.isArray(payload.data)) {\n        (store as EntityStore).upsertMany(payload.data);\n      } else {\n        (store as EntityStore).upsertMany([payload.data]);\n      }\n      return;\n    }\n\n    case StoreActions.Update: {\n      const { payload } = params as RunStoreActionUpdate;\n      (store as EntityStore).update(payload.data);\n      return;\n    }\n  }\n}\n","import { ArrayProperties, IDS, ItemPredicate } from './types';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { coerceArray } from './coerceArray';\nimport { isFunction } from './isFunction';\nimport { isObject } from './isObject';\nimport { isArray } from './isArray';\n\n/**\n * Update item in a collection\n *\n * @example\n *\n *\n * store.update(1, entity => ({\n *   comments: arrayUpdate(entity.comments, 1, { name: 'newComment' })\n * }))\n */\nexport function arrayUpdate<Root extends any[], Entity = any>(keyOrRoot: Root, predicateOrIds: IDS | ItemPredicate<Root[0]>, obj: Partial<Root[0]>, idKey?: string): Root[0][];\n/**\n * @deprecated\n */\nexport function arrayUpdate<Root, Entity = any>(keyOrRoot: ArrayProperties<Root>, predicateOrIds: IDS | ItemPredicate<Entity>, obj: Partial<Entity>, idKey?: string): (state: Root) => Root;\nexport function arrayUpdate<Root, Entity = any>(keyOrRoot: ArrayProperties<Root> | Root, predicateOrIds: IDS | ItemPredicate<Entity>, obj: Partial<Entity>, idKey = DEFAULT_ID_KEY) {\n  let condition: ItemPredicate<Entity>;\n\n  if (isFunction(predicateOrIds)) {\n    condition = predicateOrIds;\n  } else {\n    const ids = coerceArray(predicateOrIds);\n    condition = item => ids.includes(isObject(item) ? item[idKey] : item) === true;\n  }\n\n  const updateFn = state =>\n    state.map(entity => {\n      if (condition(entity) === true) {\n        return isObject(entity)\n          ? {\n              ...entity,\n              ...obj\n            }\n          : obj;\n      }\n\n      return entity;\n    });\n\n  if (isArray(keyOrRoot)) {\n    return updateFn(keyOrRoot);\n  }\n\n  return root => {\n    return {\n      [keyOrRoot as string]: updateFn(root[keyOrRoot])\n    };\n  };\n}\n","import { ArrayProperties, OrArray } from './types';\nimport { coerceArray } from './coerceArray';\nimport { AddEntitiesOptions } from './addEntities';\nimport { isArray } from './isArray';\n\n/**\n * Add item to a collection\n *\n * @example\n *\n *\n * store.update(state => ({\n *   comments: arrayAdd(state.comments, { id: 2 })\n * }))\n *\n */\nexport function arrayAdd<Root extends any[], Entity = any>(keyOrRoot: Root, newEntity: OrArray<Root[0]>, options?: AddEntitiesOptions): Root[0][];\n/**\n * @deprecated\n */\nexport function arrayAdd<Root, Entity = any>(keyOrRoot: ArrayProperties<Root>, newEntity: OrArray<Entity>, options?: AddEntitiesOptions): (state: Root) => Root;\nexport function arrayAdd<Root, Entity = any>(keyOrRoot: ArrayProperties<Root> | Root, newEntity: OrArray<Entity>, options: AddEntitiesOptions = {}) {\n  const newEntities = coerceArray(newEntity);\n\n  const addFn = state => (options.prepend ? [...newEntities, ...(state || [])] : [...(state || []), ...newEntities]);\n\n  if (isArray(keyOrRoot)) {\n    return addFn(keyOrRoot);\n  }\n\n  return state => {\n    return {\n      [keyOrRoot as ArrayProperties<Root>]: addFn(state[keyOrRoot])\n    };\n  };\n}\n","import { ID } from './types';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { arrayAdd } from './arrayAdd';\nimport { arrayUpdate } from './arrayUpdate';\nimport { isObject } from './isObject';\n\n/**\n * Upsert item in a collection\n *\n * @example\n *\n *\n * store.update(1, entity => ({\n *   comments: arrayUpsert(entity.comments, 1, { name: 'newComment' })\n * }))\n */\nexport function arrayUpsert<Root extends any[]>(arr: Root, id: ID, obj: Partial<Root[0]>, idKey = DEFAULT_ID_KEY): Root[0][] {\n  const entityIsObject = isObject(obj);\n  const entityExists = arr.some(entity => (entityIsObject ? entity[idKey] === id : entity === id));\n  if (entityExists) {\n    return arrayUpdate(arr, id, obj, idKey);\n  } else {\n    return arrayAdd(arr, entityIsObject ? { ...obj, [idKey]: id } : obj);\n  }\n}\n","// @internal\nexport function not(pred: Function): Function {\n  return function(...args) {\n    return !pred(...args);\n  };\n}\n","import { ArrayProperties, IDS, ItemPredicate } from './types';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { coerceArray } from './coerceArray';\nimport { isObject } from './isObject';\nimport { isFunction } from './isFunction';\nimport { not } from './not';\n\n/**\n * Remove item from collection\n *\n * @example\n *\n *\n * store.update(state => ({\n *   names: arrayRemove(state.names, ['one', 'second'])\n * }))\n */\nexport function arrayRemove<Root extends any[], Entity = Root[0]>(keyOrRoot: Root, identifier: IDS | ItemPredicate<Root[0]>, idKey?: string): Root[0][];\n/**\n * @deprecated\n */\nexport function arrayRemove<Root, Entity = any>(keyOrRoot: ArrayProperties<Root>, identifier: IDS | ItemPredicate<Entity>, idKey?: string): (state: Root) => Root;\nexport function arrayRemove<Root, Entity = any>(keyOrRoot: ArrayProperties<Root> | Root, identifier: IDS | ItemPredicate<Entity>, idKey = DEFAULT_ID_KEY) {\n  let identifiers;\n  let filterFn;\n\n  if (isFunction(identifier)) {\n    filterFn = not(identifier);\n  } else {\n    identifiers = coerceArray(identifier as IDS);\n    filterFn = current => {\n      return identifiers.includes(isObject(current) ? current[idKey] : current) === false;\n    };\n  }\n\n  if (Array.isArray(keyOrRoot)) {\n    return keyOrRoot.filter(filterFn);\n  }\n\n  return state => {\n    return {\n      [keyOrRoot as string]: state[keyOrRoot].filter(filterFn)\n    };\n  };\n}\n","import { Store } from './store';\nimport { Query } from './query';\nimport { StoreConfigOptions } from './storeConfig';\nimport { EntityStore } from './entityStore';\nimport { QueryEntity } from './queryEntity';\nimport { QueryConfigOptions } from './queryConfig';\nimport { EntityState } from './types';\n\nexport function createStore<State>(initialState: Partial<State>, options: Partial<StoreConfigOptions>) {\n  return new Store<State>(initialState, options);\n}\n\nexport function createQuery<State>(store: Store<State>) {\n  return new Query<State>(store);\n}\n\nexport function createEntityStore<State extends EntityState>(initialState: Partial<State>, options: Partial<StoreConfigOptions>) {\n  return new EntityStore<State>(initialState, options);\n}\n\nexport function createEntityQuery<State extends EntityState>(store: EntityStore<State>, options: QueryConfigOptions = {}) {\n  return new QueryEntity<State>(store, options);\n}\n","import { EMPTY, Observable, of } from 'rxjs';\nimport { Store } from './store';\n\n/**\n * \n * Helper function for checking if we have data in cache\n * \n * export class ProductsService {\n *   constructor(private productsStore: ProductsStore) {}\n\n *   get(): Observable<void> {\n *     const request = this.http.get().pipe(\n *       tap(this.productsStore.set(response))\n *     );\n *\n *     return cacheable(this.productsStore, request);\n *   }\n * }\n */\nexport function cacheable<T>(store: Store, request$: Observable<T>, options: { emitNext: boolean } = { emitNext: false }) {\n  if (store._cache().value) {\n    return options.emitNext ? of(undefined) : EMPTY;\n  }\n  return request$;\n}\n","import { combineLatest, Observable, ObservableInput, ObservedValueOf } from 'rxjs';\nimport { auditTime } from 'rxjs/operators';\n\ntype ReturnTypes<T extends Observable<any>[]> = { [P in keyof T]: T[P] extends Observable<infer R> ? R : never };\ntype Observables = [Observable<any>] | Observable<any>[];\n\nexport function combineQueries<R extends Observables>(observables: R): Observable<ReturnTypes<R>> {\n  return combineLatest(observables).pipe(auditTime(0)) as any;\n}\n","import { EntityState, getEntityType, getIDType } from './types';\nimport { Observable } from 'rxjs';\n\nexport abstract class EntityService<S extends EntityState> {\n  abstract get<T>(id?: getIDType<S>, config?: any): Observable<T>;\n  abstract add<T>(entity: getEntityType<EntityState>, config?: any): Observable<T>;\n  abstract update<T>(id: getIDType<S>, entity: Partial<getEntityType<S>>, config: any): Observable<T>;\n  abstract delete<T>(id: getIDType<S>, config: any): Observable<T>;\n}\n","import { Store } from './store';\nimport { Observable, defer } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\n\nexport function setLoading(store: Store) {\n  return function<T>(source: Observable<T>) {\n    return defer(() => {\n      store.setLoading(true);\n      return source.pipe(finalize(() => store.setLoading(false)));\n    });\n  };\n}\n"]}