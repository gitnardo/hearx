/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __stores__ } from './stores';
import { isNil } from './isNil';
import { AkitaError } from './errors';
/** @enum {number} */
const StoreActions = {
    Update: 0,
    AddEntities: 1,
    SetEntities: 2,
    UpdateEntities: 3,
    RemoveEntities: 4,
    UpsertEntities: 5,
};
export { StoreActions };
StoreActions[StoreActions.Update] = 'Update';
StoreActions[StoreActions.AddEntities] = 'AddEntities';
StoreActions[StoreActions.SetEntities] = 'SetEntities';
StoreActions[StoreActions.UpdateEntities] = 'UpdateEntities';
StoreActions[StoreActions.RemoveEntities] = 'RemoveEntities';
StoreActions[StoreActions.UpsertEntities] = 'UpsertEntities';
/**
 * @record
 * @template Entity
 */
function RunStoreActionSetEntities() { }
if (false) {
    /** @type {?} */
    RunStoreActionSetEntities.prototype.payload;
}
/**
 * @record
 * @template Entity
 */
function RunStoreActionAddEntities() { }
if (false) {
    /** @type {?} */
    RunStoreActionAddEntities.prototype.payload;
}
/**
 * @record
 * @template Entity
 */
function RunStoreActionUpdateEntities() { }
if (false) {
    /** @type {?} */
    RunStoreActionUpdateEntities.prototype.payload;
}
/**
 * @record
 * @template Entity
 */
function RunStoreActionRemoveEntities() { }
if (false) {
    /** @type {?} */
    RunStoreActionRemoveEntities.prototype.payload;
}
/**
 * @record
 * @template Entity
 */
function RunStoreActionUpsertEntities() { }
if (false) {
    /** @type {?} */
    RunStoreActionUpsertEntities.prototype.payload;
}
/**
 * @record
 * @template State
 */
function RunStoreActionUpdate() { }
if (false) {
    /** @type {?} */
    RunStoreActionUpdate.prototype.payload;
}
/**
 * @template EntityOrState
 * @param {?} storeName
 * @param {?} action
 * @param {?} params
 * @return {?}
 */
export function runStoreAction(storeName, action, params) {
    /** @type {?} */
    const store = __stores__[storeName];
    if (isNil(store)) {
        throw new AkitaError(`${storeName} doesn't exist`);
    }
    switch (action) {
        case StoreActions.SetEntities: {
            const { payload } = (/** @type {?} */ (params));
            ((/** @type {?} */ (store))).set(payload.data);
            return;
        }
        case StoreActions.AddEntities: {
            const { payload } = (/** @type {?} */ (params));
            ((/** @type {?} */ (store))).add(payload.data, payload.params);
            return;
        }
        case StoreActions.UpdateEntities: {
            const { payload } = (/** @type {?} */ (params));
            ((/** @type {?} */ (store))).update(payload.entityIds, payload.data);
            return;
        }
        case StoreActions.RemoveEntities: {
            const { payload } = (/** @type {?} */ (params));
            ((/** @type {?} */ (store))).remove(payload.entityIds);
            return;
        }
        case StoreActions.UpsertEntities: {
            const { payload } = (/** @type {?} */ (params));
            if (payload.entityIds) {
                ((/** @type {?} */ (store))).upsert(payload.entityIds, payload.data);
            }
            else if (Array.isArray(payload.data)) {
                ((/** @type {?} */ (store))).upsertMany(payload.data);
            }
            else {
                ((/** @type {?} */ (store))).upsertMany([payload.data]);
            }
            return;
        }
        case StoreActions.Update: {
            const { payload } = (/** @type {?} */ (params));
            ((/** @type {?} */ (store))).update(payload.data);
            return;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,