/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { of } from 'rxjs';
import { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';
import { distinctUntilArrayItemChanged } from './arrayFind';
import { entitiesToArray } from './entitiesToArray';
import { entitiesToMap } from './entitiesToMap';
import { findEntityByPredicate, getEntity } from './getEntity';
import { isArray } from './isArray';
import { isDefined } from './isDefined';
import { isFunction } from './isFunction';
import { isNil } from './isNil';
import { isUndefined } from './isUndefined';
import { mapSkipUndefined } from './mapSkipUndefined';
import { Query } from './query';
import { sortByOptions } from './sortByOptions';
import { toBoolean } from './toBoolean';
/**
 *
 *  The Entity Query is similar to the general Query, with additional functionality tailored for EntityStores.
 *
 *  class WidgetsQuery extends QueryEntity<WidgetsState> {
 *     constructor(protected store: WidgetsStore) {
 *       super(store);
 *     }
 *  }
 *
 *
 *
 * @template S, EntityType, IDType
 */
export class QueryEntity extends Query {
    /**
     * @param {?} store
     * @param {?=} options
     */
    constructor(store, options = {}) {
        super(store);
        this.options = options;
        this.__store__ = store;
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    selectAll(options = {
        asObject: false
    }) {
        return this.select((/**
         * @param {?} state
         * @return {?}
         */
        state => state.entities)).pipe(map((/**
         * @return {?}
         */
        () => this.getAll(options))));
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    getAll(options = { asObject: false, filterBy: undefined, limitTo: undefined }) {
        if (options.asObject) {
            return entitiesToMap(this.getValue(), options);
        }
        sortByOptions(options, this.config || this.options);
        return entitiesToArray(this.getValue(), options);
    }
    /**
     * @template R
     * @param {?} ids
     * @param {?=} project
     * @return {?}
     */
    selectMany(ids, project) {
        if (!ids || !ids.length)
            return of([]);
        return this.select((/**
         * @param {?} state
         * @return {?}
         */
        state => state.entities)).pipe(map((/**
         * @param {?} entities
         * @return {?}
         */
        entities => mapSkipUndefined(ids, (/**
         * @param {?} id
         * @return {?}
         */
        id => getEntity(id, project)(entities))))), distinctUntilArrayItemChanged());
    }
    /**
     * @template R
     * @param {?} idOrPredicate
     * @param {?=} project
     * @return {?}
     */
    selectEntity(idOrPredicate, project) {
        /** @type {?} */
        let id = idOrPredicate;
        if (isFunction(idOrPredicate)) {
            // For performance reason we expect the entity to be in the store
            ((/** @type {?} */ (id))) = findEntityByPredicate(idOrPredicate, this.getValue().entities);
        }
        return this.select((/**
         * @param {?} state
         * @return {?}
         */
        state => state.entities)).pipe(map(getEntity(id, project)), distinctUntilChanged());
    }
    /**
     * Get an entity by id
     *
     * \@example
     *
     * this.query.getEntity(1);
     * @param {?} id
     * @return {?}
     */
    getEntity(id) {
        return this.getValue().entities[(/** @type {?} */ (id))];
    }
    /**
     * Select the active entity's id
     *
     * \@example
     *
     * this.query.selectActiveId()
     * @return {?}
     */
    selectActiveId() {
        return this.select((/**
         * @param {?} state
         * @return {?}
         */
        state => ((/** @type {?} */ (state))).active));
    }
    /**
     * Get the active id
     *
     * \@example
     *
     * this.query.getActiveId()
     * @return {?}
     */
    getActiveId() {
        return this.getValue().active;
    }
    /**
     * @template R
     * @param {?=} project
     * @return {?}
     */
    selectActive(project) {
        if (isArray(this.getActive())) {
            return this.selectActiveId().pipe(switchMap((/**
             * @param {?} ids
             * @return {?}
             */
            ids => this.selectMany(ids, project))));
        }
        return this.selectActiveId().pipe(switchMap((/**
         * @param {?} ids
         * @return {?}
         */
        ids => this.selectEntity(ids, project))));
    }
    /**
     * @return {?}
     */
    getActive() {
        /** @type {?} */
        const activeId = this.getActiveId();
        if (isArray(activeId)) {
            return activeId.map((/**
             * @param {?} id
             * @return {?}
             */
            id => this.getValue().entities[(/** @type {?} */ (id))]));
        }
        return toBoolean(activeId) ? this.getEntity(activeId) : undefined;
    }
    /**
     * Select the store's entity collection length
     *
     * \@example
     *
     * this.query.selectCount()
     * this.query.selectCount(entity => entity.completed)
     * @param {?=} predicate
     * @return {?}
     */
    selectCount(predicate) {
        return this.select((/**
         * @param {?} state
         * @return {?}
         */
        state => state.entities)).pipe(map((/**
         * @return {?}
         */
        () => this.getCount(predicate))));
    }
    /**
     * Get the store's entity collection length
     *
     * \@example
     *
     * this.query.getCount()
     * this.query.getCount(entity => entity.completed)
     * @param {?=} predicate
     * @return {?}
     */
    getCount(predicate) {
        if (isFunction(predicate)) {
            return this.getAll().filter(predicate).length;
        }
        return this.getValue().ids.length;
    }
    /**
     * @template R
     * @param {?=} project
     * @return {?}
     */
    selectLast(project) {
        return this.selectAt((/**
         * @param {?} ids
         * @return {?}
         */
        ids => ids[ids.length - 1]), project);
    }
    /**
     * @template R
     * @param {?=} project
     * @return {?}
     */
    selectFirst(project) {
        return this.selectAt((/**
         * @param {?} ids
         * @return {?}
         */
        ids => ids[0]), project);
    }
    /**
     * @param {?=} action
     * @return {?}
     */
    selectEntityAction(action) {
        if (isUndefined(action)) {
            return this.store.selectEntityAction$;
        }
        return this.store.selectEntityAction$.pipe(filter((/**
         * @param {?} ac
         * @return {?}
         */
        ac => ac.type === action)), map((/**
         * @param {?} action
         * @return {?}
         */
        action => action.ids)));
    }
    /**
     * @param {?=} projectOrIds
     * @return {?}
     */
    hasEntity(projectOrIds) {
        if (isNil(projectOrIds)) {
            return this.getValue().ids.length > 0;
        }
        if (isFunction(projectOrIds)) {
            return this.getAll().some(projectOrIds);
        }
        if (isArray(projectOrIds)) {
            return projectOrIds.every((/**
             * @param {?} id
             * @return {?}
             */
            id => ((/** @type {?} */ (id))) in this.getValue().entities));
        }
        return ((/** @type {?} */ (projectOrIds))) in this.getValue().entities;
    }
    /**
     * Returns whether entity store has an active entity
     *
     * \@example
     *
     * this.query.hasActive()
     * this.query.hasActive(3)
     *
     * @param {?=} id
     * @return {?}
     */
    hasActive(id) {
        /** @type {?} */
        const active = this.getValue().active;
        /** @type {?} */
        const isIdProvided = isDefined(id);
        if (Array.isArray(active)) {
            if (isIdProvided) {
                return active.includes(id);
            }
            return active.length > 0;
        }
        return isIdProvided ? active === id : isDefined(active);
    }
    /**
     *
     * Create sub UI query for querying Entity's UI state
     *
     * \@example
     *
     *
     * export class ProductsQuery extends QueryEntity<ProductsState> {
     *   ui: EntityUIQuery<ProductsUIState>;
     *
     *   constructor(protected store: ProductsStore) {
     *     super(store);
     *     this.createUIQuery();
     *   }
     *
     * }
     * @return {?}
     */
    createUIQuery() {
        this.ui = new EntityUIQuery(this.__store__.ui);
    }
    /**
     * @private
     * @template R
     * @param {?} mapFn
     * @param {?=} project
     * @return {?}
     */
    selectAt(mapFn, project) {
        return this.select((/**
         * @param {?} state
         * @return {?}
         */
        state => (/** @type {?} */ (state.ids)))).pipe(map(mapFn), distinctUntilChanged(), switchMap((/**
         * @param {?} id
         * @return {?}
         */
        (id) => this.selectEntity(id, project))));
    }
}
if (false) {
    /** @type {?} */
    QueryEntity.prototype.ui;
    /**
     * @type {?}
     * @protected
     */
    QueryEntity.prototype.store;
    /** @type {?} */
    QueryEntity.prototype.__store__;
    /**
     * @type {?}
     * @private
     */
    QueryEntity.prototype.options;
}
// @internal
/**
 * @template UIState, DEPRECATED
 */
export class EntityUIQuery extends QueryEntity {
    /**
     * @param {?} store
     */
    constructor(store) {
        super(store);
    }
}
//# sourceMappingURL=data:application/json;base64,