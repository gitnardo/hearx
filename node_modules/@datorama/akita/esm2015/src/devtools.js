/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { currentAction, setSkipAction } from './actions';
import { isDefined } from './isDefined';
import { $$addStore, $$deleteStore, $$updateStore } from './dispatchers';
import { __stores__ } from './stores';
import { capitalize } from './captialize';
import { isNotBrowser } from './root';
/** @type {?} */
let subs = [];
/**
 * @param {?=} ngZoneOrOptions
 * @param {?=} options
 * @return {?}
 */
export function akitaDevtools(ngZoneOrOptions, options = {}) {
    if (isNotBrowser)
        return;
    if (!((/** @type {?} */ (window))).__REDUX_DEVTOOLS_EXTENSION__) {
        return;
    }
    subs.length &&
        subs.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => {
            if (s.unsubscribe) {
                s.unsubscribe();
            }
            else {
                s && s();
            }
        }));
    /** @type {?} */
    const isAngular = ngZoneOrOptions && ngZoneOrOptions['run'];
    if (!isAngular) {
        ngZoneOrOptions = ngZoneOrOptions || {};
        ((/** @type {?} */ (ngZoneOrOptions))).run = (/**
         * @param {?} cb
         * @return {?}
         */
        cb => cb());
        options = (/** @type {?} */ (ngZoneOrOptions));
    }
    /** @type {?} */
    const defaultOptions = { name: 'Akita', shallow: true, storesWhitelist: [] };
    /** @type {?} */
    const merged = Object.assign({}, defaultOptions, options);
    /** @type {?} */
    const storesWhitelist = merged.storesWhitelist;
    /** @type {?} */
    const devTools = ((/** @type {?} */ (window))).__REDUX_DEVTOOLS_EXTENSION__.connect(merged);
    /** @type {?} */
    let appState = {};
    /** @type {?} */
    const isAllowed = (/**
     * @param {?} storeName
     * @return {?}
     */
    storeName => {
        if (!storesWhitelist.length) {
            return true;
        }
        return storesWhitelist.indexOf(storeName) > -1;
    });
    subs.push($$addStore.subscribe((/**
     * @param {?} storeName
     * @return {?}
     */
    storeName => {
        if (isAllowed(storeName) === false)
            return;
        appState = Object.assign({}, appState, { [storeName]: __stores__[storeName]._value() });
        devTools.send({ type: `[${capitalize(storeName)}] - @@INIT` }, appState);
    })));
    subs.push($$deleteStore.subscribe((/**
     * @param {?} storeName
     * @return {?}
     */
    storeName => {
        if (isAllowed(storeName) === false)
            return;
        delete appState[storeName];
        devTools.send({ type: `[${storeName}] - Delete Store` }, appState);
    })));
    subs.push($$updateStore.subscribe((/**
     * @param {?} storeName
     * @return {?}
     */
    storeName => {
        if (isAllowed(storeName) === false)
            return;
        const { type, entityIds, skip } = currentAction;
        if (skip) {
            setSkipAction(false);
            return;
        }
        /** @type {?} */
        const store = __stores__[storeName];
        if (!store) {
            return;
        }
        if (options.shallow === false && appState[storeName]) {
            /** @type {?} */
            const isEqual = JSON.stringify(store._value()) === JSON.stringify(appState[storeName]);
            if (isEqual)
                return;
        }
        appState = Object.assign({}, appState, { [storeName]: store._value() });
        /** @type {?} */
        const normalize = capitalize(storeName);
        /** @type {?} */
        let msg = isDefined(entityIds) ? `[${normalize}] - ${type} (ids: ${entityIds})` : `[${normalize}] - ${type}`;
        if (options.logTrace) {
            console.group(msg);
            console.trace();
            console.groupEnd();
        }
        if (options.sortAlphabetically) {
            /** @type {?} */
            const sortedAppState = Object.keys(appState)
                .sort()
                .reduce((/**
             * @param {?} acc
             * @param {?} storeName
             * @return {?}
             */
            (acc, storeName) => {
                acc[storeName] = appState[storeName];
                return acc;
            }), {});
            devTools.send({ type: msg }, sortedAppState);
            return;
        }
        devTools.send({ type: msg }, appState);
    })));
    subs.push(devTools.subscribe((/**
     * @param {?} message
     * @return {?}
     */
    message => {
        if (message.type === 'DISPATCH') {
            /** @type {?} */
            const payloadType = message.payload.type;
            if (payloadType === 'COMMIT') {
                devTools.init(appState);
                return;
            }
            if (message.state) {
                /** @type {?} */
                const rootState = JSON.parse(message.state);
                for (let i = 0, keys = Object.keys(rootState); i < keys.length; i++) {
                    /** @type {?} */
                    const storeName = keys[i];
                    if (__stores__[storeName]) {
                        ((/** @type {?} */ (ngZoneOrOptions))).run((/**
                         * @return {?}
                         */
                        () => {
                            __stores__[storeName]._setState((/**
                             * @return {?}
                             */
                            () => rootState[storeName]), false);
                        }));
                    }
                }
            }
        }
    })));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2dG9vbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGF0b3JhbWEvYWtpdGEvIiwic291cmNlcyI6WyJzcmMvZGV2dG9vbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3pELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDeEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDdEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUMxQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sUUFBUSxDQUFDOztJQWlCbEMsSUFBSSxHQUFHLEVBQUU7Ozs7OztBQU1iLE1BQU0sVUFBVSxhQUFhLENBQUMsZUFBdUQsRUFBRSxVQUFvQyxFQUFFO0lBQzNILElBQUksWUFBWTtRQUFFLE9BQU87SUFFekIsSUFBSSxDQUFDLENBQUMsbUJBQUEsTUFBTSxFQUFPLENBQUMsQ0FBQyw0QkFBNEIsRUFBRTtRQUNqRCxPQUFPO0tBQ1I7SUFFRCxJQUFJLENBQUMsTUFBTTtRQUNULElBQUksQ0FBQyxPQUFPOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDZixJQUFJLENBQUMsQ0FBQyxXQUFXLEVBQUU7Z0JBQ2pCLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQzthQUNqQjtpQkFBTTtnQkFDTCxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7YUFDVjtRQUNILENBQUMsRUFBQyxDQUFDOztVQUVDLFNBQVMsR0FBRyxlQUFlLElBQUksZUFBZSxDQUFDLEtBQUssQ0FBQztJQUUzRCxJQUFJLENBQUMsU0FBUyxFQUFFO1FBQ2QsZUFBZSxHQUFHLGVBQWUsSUFBSSxFQUFFLENBQUM7UUFDeEMsQ0FBQyxtQkFBQSxlQUFl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QUMsQ0FBQztnQkFDeEIsT0FBTzthQUNSO1lBRUQsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFOztzQkFDWCxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO2dCQUMzQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTs7MEJBQzdELFNBQVMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUN6QixJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRTt3QkFDekIsQ0FBQyxtQkFBQSxlQUFlLEVBQWMsQ0FBQyxDQUFDLEdBQUc7Ozt3QkFBQyxHQUFHLEVBQUU7NEJBQ3ZDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTOzs7NEJBQUMsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUNyRSxDQUFDLEVBQUMsQ0FBQztxQkFDSjtpQkFDRjthQUNGO1NBQ0Y7SUFDSCxDQUFDLEVBQUMsQ0FDSCxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGN1cnJlbnRBY3Rpb24sIHNldFNraXBBY3Rpb24gfSBmcm9tICcuL2FjdGlvbnMnO1xuaW1wb3J0IHsgaXNEZWZpbmVkIH0gZnJvbSAnLi9pc0RlZmluZWQnO1xuaW1wb3J0IHsgJCRhZGRTdG9yZSwgJCRkZWxldGVTdG9yZSwgJCR1cGRhdGVTdG9yZSB9IGZyb20gJy4vZGlzcGF0Y2hlcnMnO1xuaW1wb3J0IHsgX19zdG9yZXNfXyB9IGZyb20gJy4vc3RvcmVzJztcbmltcG9ydCB7IGNhcGl0YWxpemUgfSBmcm9tICcuL2NhcHRpYWxpemUnO1xuaW1wb3J0IHsgaXNOb3RCcm93c2VyIH0gZnJvbSAnLi9yb290JztcblxuZXhwb3J0IHR5cGUgRGV2dG9vbHNPcHRpb25zID0ge1xuICAvKiogaW5zdGFuY2UgbmFtZSB2aXNpYmxlIGluIGRldnRvb2xzICovXG4gIG5hbWU6IHN0cmluZztcbiAgLyoqICBtYXhpbXVtIGFsbG93ZWQgYWN0aW9ucyB0byBiZSBzdG9yZWQgaW4gdGhlIGhpc3RvcnkgdHJlZSAqL1xuICBtYXhBZ2U6IG51bWJlcjtcbiAgbGF0ZW5jeTogbnVtYmVyO1xuICBhY3Rpb25zQmxhY2tsaXN0OiBzdHJpbmdbXTtcbiAgYWN0aW9uc1doaXRlbGlzdDogc3RyaW5nW107XG4gIHN0b3Jlc1doaXRlbGlzdDogc3RyaW5nW107XG4gIHNob3VsZENhdGNoRXJyb3JzOiBib29sZWFuO1xuICBsb2dUcmFjZTogYm9vbGVhbjtcbiAgcHJlZGljYXRlOiAoc3RhdGU6IGFueSwgYWN0aW9uOiBhbnkpID0+IGJvb2xlYW47XG4gIHNoYWxsb3c6IGJvb2xlYW47XG4gIHNvcnRBbHBoYWJldGljYWxseTogYm9vbGVhbjtcbn07XG5sZXQgc3VicyA9IFtdO1xuXG5leHBvcnQgdHlwZSBOZ1pvbmVMaWtlID0geyBydW46IGFueSB9O1xuXG5leHBvcnQgZnVuY3Rpb24gYWtpdGFEZXZ0b29scyhuZ1pvbmU6IE5nWm9uZUxpa2UsIG9wdGlvbnM/OiBQYXJ0aWFsPERldnRvb2xzT3B0aW9ucz4pO1xuZXhwb3J0IGZ1bmN0aW9uIGFraXRhRGV2dG9vbHMob3B0aW9ucz86IFBhcnRpYWw8RGV2dG9vbHNPcHRpb25zPik7XG5leHBvcnQgZnVuY3Rpb24gYWtpdGFEZXZ0b29scyhuZ1pvbmVPck9wdGlvbnM/OiBOZ1pvbmVMaWtlIHwgUGFydGlhbDxEZXZ0b29sc09wdGlvbnM+LCBvcHRpb25zOiBQYXJ0aWFsPERldnRvb2xzT3B0aW9ucz4gPSB7fSkge1xuICBpZiAoaXNOb3RCcm93c2VyKSByZXR1cm47XG5cbiAgaWYgKCEod2luZG93IGFzIGFueSkuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN1YnMubGVuZ3RoICYmXG4gICAgc3Vicy5mb3JFYWNoKHMgPT4ge1xuICAgICAgaWYgKHMudW5zdWJzY3JpYmUpIHtcbiAgICAgICAgcy51bnN1YnNjcmliZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcyAmJiBzKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgY29uc3QgaXNBbmd1bGFyID0gbmdab25lT3JPcHRpb25zICYmIG5nWm9uZU9yT3B0aW9uc1sncnVuJ107XG5cbiAgaWYgKCFpc0FuZ3VsYXIpIHtcbiAgICBuZ1pvbmVPck9wdGlvbnMgPSBuZ1pvbmVPck9wdGlvbnMgfHwge307XG4gICAgKG5nWm9uZU9yT3B0aW9ucyBhcyBhbnkpLnJ1biA9IGNiID0+IGNiKCk7XG4gICAgb3B0aW9ucyA9IG5nWm9uZU9yT3B0aW9ucyBhcyBQYXJ0aWFsPERldnRvb2xzT3B0aW9ucz47XG4gIH1cblxuICBjb25zdCBkZWZhdWx0T3B0aW9uczogUGFydGlhbDxEZXZ0b29sc09wdGlvbnM+ICYgeyBuYW1lOiBzdHJpbmcgfSA9IHsgbmFtZTogJ0FraXRhJywgc2hhbGxvdzogdHJ1ZSwgc3RvcmVzV2hpdGVsaXN0OiBbXSB9O1xuICBjb25zdCBtZXJnZWQgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gIGNvbnN0IHN0b3Jlc1doaXRlbGlzdCA9IG1lcmdlZC5zdG9yZXNXaGl0ZWxpc3Q7XG4gIGNvbnN0IGRldlRvb2xzID0gKHdpbmRvdyBhcyBhbnkpLl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18uY29ubmVjdChtZXJnZWQpO1xuICBsZXQgYXBwU3RhdGUgPSB7fTtcblxuICBjb25zdCBpc0FsbG93ZWQgPSBzdG9yZU5hbWUgPT4ge1xuICAgIGlmICghc3RvcmVzV2hpdGVsaXN0Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0b3Jlc1doaXRlbGlzdC5pbmRleE9mKHN0b3JlTmFtZSkgPiAtMTtcbiAgfTtcblxuICBzdWJzLnB1c2goXG4gICAgJCRhZGRTdG9yZS5zdWJzY3JpYmUoc3RvcmVOYW1lID0+IHtcbiAgICAgIGlmIChpc0FsbG93ZWQoc3RvcmVOYW1lKSA9PT0gZmFsc2UpIHJldHVybjtcbiAgICAgIGFwcFN0YXRlID0ge1xuICAgICAgICAuLi5hcHBTdGF0ZSxcbiAgICAgICAgW3N0b3JlTmFtZV06IF9fc3RvcmVzX19bc3RvcmVOYW1lXS5fdmFsdWUoKVxuICAgICAgfTtcbiAgICAgIGRldlRvb2xzLnNlbmQoeyB0eXBlOiBgWyR7Y2FwaXRhbGl6ZShzdG9yZU5hbWUpfV0gLSBAQElOSVRgIH0sIGFwcFN0YXRlKTtcbiAgICB9KVxuICApO1xuXG4gIHN1YnMucHVzaChcbiAgICAkJGRlbGV0ZVN0b3JlLnN1YnNjcmliZShzdG9yZU5hbWUgPT4ge1xuICAgICAgaWYgKGlzQWxsb3dlZChzdG9yZU5hbWUpID09PSBmYWxzZSkgcmV0dXJuO1xuICAgICAgZGVsZXRlIGFwcFN0YXRlW3N0b3JlTmFtZV07XG4gICAgICBkZXZUb29scy5zZW5kKHsgdHlwZTogYFske3N0b3JlTmFtZX1dIC0gRGVsZXRlIFN0b3JlYCB9LCBhcHBTdGF0ZSk7XG4gICAgfSlcbiAgKTtcblxuICBzdWJzLnB1c2goXG4gICAgJCR1cGRhdGVTdG9yZS5zdWJzY3JpYmUoc3RvcmVOYW1lID0+IHtcbiAgICAgIGlmIChpc0FsbG93ZWQoc3RvcmVOYW1lKSA9PT0gZmFsc2UpIHJldHVybjtcbiAgICAgIGNvbnN0IHsgdHlwZSwgZW50aXR5SWRzLCBza2lwIH0gPSBjdXJyZW50QWN0aW9uO1xuXG4gICAgICBpZiAoc2tpcCkge1xuICAgICAgICBzZXRTa2lwQWN0aW9uKGZhbHNlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzdG9yZSA9IF9fc3RvcmVzX19bc3RvcmVOYW1lXTtcbiAgICAgIGlmICghc3RvcmUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5zaGFsbG93ID09PSBmYWxzZSAmJiBhcHBTdGF0ZVtzdG9yZU5hbWVdKSB7XG4gICAgICAgIGNvbnN0IGlzRXF1YWwgPSBKU09OLnN0cmluZ2lmeShzdG9yZS5fdmFsdWUoKSkgPT09IEpTT04uc3RyaW5naWZ5KGFwcFN0YXRlW3N0b3JlTmFtZV0pO1xuICAgICAgICBpZiAoaXNFcXVhbCkgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcHBTdGF0ZSA9IHtcbiAgICAgICAgLi4uYXBwU3RhdGUsXG4gICAgICAgIFtzdG9yZU5hbWVdOiBzdG9yZS5fdmFsdWUoKVxuICAgICAgfTtcblxuICAgICAgY29uc3Qgbm9ybWFsaXplID0gY2FwaXRhbGl6ZShzdG9yZU5hbWUpO1xuICAgICAgbGV0IG1zZyA9IGlzRGVmaW5lZChlbnRpdHlJZHMpID8gYFske25vcm1hbGl6ZX1dIC0gJHt0eXBlfSAoaWRzOiAke2VudGl0eUlkc30pYCA6IGBbJHtub3JtYWxpemV9XSAtICR7dHlwZX1gO1xuXG4gICAgICBpZiAob3B0aW9ucy5sb2dUcmFjZSkge1xuICAgICAgICBjb25zb2xlLmdyb3VwKG1zZyk7XG4gICAgICAgIGNvbnNvbGUudHJhY2UoKTtcbiAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5zb3J0QWxwaGFiZXRpY2FsbHkpIHtcbiAgICAgICAgY29uc3Qgc29ydGVkQXBwU3RhdGUgPSBPYmplY3Qua2V5cyhhcHBTdGF0ZSlcbiAgICAgICAgICAuc29ydCgpXG4gICAgICAgICAgLnJlZHVjZSgoYWNjLCBzdG9yZU5hbWUpID0+IHtcbiAgICAgICAgICAgIGFjY1tzdG9yZU5hbWVdID0gYXBwU3RhdGVbc3RvcmVOYW1lXTtcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgfSwge30pO1xuXG4gICAgICAgIGRldlRvb2xzLnNlbmQoeyB0eXBlOiBtc2cgfSwgc29ydGVkQXBwU3RhdGUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGRldlRvb2xzLnNlbmQoeyB0eXBlOiBtc2cgfSwgYXBwU3RhdGUpO1xuICAgIH0pXG4gICk7XG5cbiAgc3Vicy5wdXNoKFxuICAgIGRldlRvb2xzLnN1YnNjcmliZShtZXNzYWdlID0+IHtcbiAgICAgIGlmIChtZXNzYWdlLnR5cGUgPT09ICdESVNQQVRDSCcpIHtcbiAgICAgICAgY29uc3QgcGF5bG9hZFR5cGUgPSBtZXNzYWdlLnBheWxvYWQudHlwZTtcblxuICAgICAgICBpZiAocGF5bG9hZFR5cGUgPT09ICdDT01NSVQnKSB7XG4gICAgICAgICAgZGV2VG9vbHMuaW5pdChhcHBTdGF0ZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc3RhdGUpIHtcbiAgICAgICAgICBjb25zdCByb290U3RhdGUgPSBKU09OLnBhcnNlKG1lc3NhZ2Uuc3RhdGUpO1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBrZXlzID0gT2JqZWN0LmtleXMocm9vdFN0YXRlKTsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHN0b3JlTmFtZSA9IGtleXNbaV07XG4gICAgICAgICAgICBpZiAoX19zdG9yZXNfX1tzdG9yZU5hbWVdKSB7XG4gICAgICAgICAgICAgIChuZ1pvbmVPck9wdGlvbnMgYXMgTmdab25lTGlrZSkucnVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBfX3N0b3Jlc19fW3N0b3JlTmFtZV0uX3NldFN0YXRlKCgpID0+IHJvb3RTdGF0ZVtzdG9yZU5hbWVdLCBmYWxzZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICk7XG59XG4iXX0=