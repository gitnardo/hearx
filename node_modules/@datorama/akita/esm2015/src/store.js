/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged, map } from 'rxjs/operators';
import { resetCustomAction, setAction } from './actions';
import { getAkitaConfig, getGlobalProducerFn } from './config';
import { deepFreeze } from './deepFreeze';
import { dispatchAdded, dispatchDeleted, dispatchUpdate } from './dispatchers';
import { __DEV__, isDev } from './env';
import { assertStoreHasName } from './errors';
import { isDefined } from './isDefined';
import { isFunction } from './isFunction';
import { isPlainObject } from './isPlainObject';
import { isBrowser } from './root';
import { configKey } from './storeConfig';
import { __stores__ } from './stores';
import { commit, isTransactionInProcess } from './transaction';
/**
 *
 * Store for managing any type of data
 *
 * \@example
 *
 * export interface SessionState {
 *   token: string;
 *   userDetails: UserDetails
 * }
 *
 * export function createInitialState(): SessionState {
 *  return {
 *    token: '',
 *    userDetails: null
 *  };
 * }
 *
 * \@StoreConfig({ name: 'session' })
 * export class SessionStore extends Store<SessionState> {
 *   constructor() {
 *    super(createInitialState());
 *   }
 * }
 * @template S
 */
export class Store {
    /**
     * @param {?} initialState
     * @param {?=} options
     */
    constructor(initialState, options = {}) {
        this.options = options;
        this.inTransaction = false;
        this.cache = {
            active: new BehaviorSubject(false),
            ttl: null
        };
        this.onInit((/** @type {?} */ (initialState)));
    }
    /**
     *  Set the loading state
     *
     * \@example
     *
     *  store.setLoading(true)
     *
     * @param {?=} loading
     * @return {?}
     */
    setLoading(loading = false) {
        if (loading !== ((/** @type {?} */ (this._value()))).loading) {
            isDev() && setAction('Set Loading');
            this._setState((/**
             * @param {?} state
             * @return {?}
             */
            state => ((/** @type {?} */ (Object.assign({}, state, { loading }))))));
        }
    }
    /**
     *
     * Set whether the data is cached
     *
     * \@example
     *
     * store.setHasCache(true)
     * store.setHasCache(false)
     * store.setHasCache(true, { restartTTL: true })
     *
     * @param {?} hasCache
     * @param {?=} options
     * @return {?}
     */
    setHasCache(hasCache, options = { restartTTL: false }) {
        if (hasCache !== this.cache.active.value) {
            this.cache.active.next(hasCache);
        }
        if (options.restartTTL) {
            /** @type {?} */
            const ttlConfig = this.getCacheTTL();
            if (ttlConfig) {
                if (this.cache.ttl !== null) {
                    clearTimeout(this.cache.ttl);
                }
                this.cache.ttl = (/** @type {?} */ (setTimeout((/**
                 * @return {?}
                 */
                () => this.setHasCache(false)), ttlConfig)));
            }
        }
    }
    /**
     *
     * Sometimes we need to access the store value from a store
     *
     * \@example middleware
     *
     * @return {?}
     */
    getValue() {
        return this.storeValue;
    }
    /**
     *  Set the error state
     *
     * \@example
     *
     *  store.setError({text: 'unable to load data' })
     *
     * @template T
     * @param {?} error
     * @return {?}
     */
    setError(error) {
        if (error !== ((/** @type {?} */ (this._value()))).error) {
            isDev() && setAction('Set Error');
            this._setState((/**
             * @param {?} state
             * @return {?}
             */
            state => ((/** @type {?} */ (Object.assign({}, state, { error }))))));
        }
    }
    // @internal
    /**
     * @template R
     * @param {?} project
     * @return {?}
     */
    _select(project) {
        return this.store.asObservable().pipe(map(project), distinctUntilChanged());
    }
    // @internal
    /**
     * @return {?}
     */
    _value() {
        return this.storeValue;
    }
    // @internal
    /**
     * @return {?}
     */
    _cache() {
        return this.cache.active;
    }
    // @internal
    /**
     * @return {?}
     */
    get config() {
        return this.constructor[configKey] || {};
    }
    // @internal
    /**
     * @return {?}
     */
    get storeName() {
        return ((/** @type {?} */ (this.config))).storeName || ((/** @type {?} */ (this.options))).storeName || this.options.name;
    }
    // @internal
    /**
     * @return {?}
     */
    get deepFreeze() {
        return this.config.deepFreezeFn || this.options.deepFreezeFn || deepFreeze;
    }
    // @internal
    /**
     * @return {?}
     */
    get cacheConfig() {
        return this.config.cache || this.options.cache;
    }
    /**
     * @return {?}
     */
    get _producerFn() {
        return this.config.producerFn || this.options.producerFn || getGlobalProducerFn();
    }
    // @internal
    /**
     * @return {?}
     */
    get resettable() {
        return isDefined(this.config.resettable) ? this.config.resettable : this.options.resettable;
    }
    // @internal
    /**
     * @param {?} newState
     * @param {?=} _dispatchAction
     * @return {?}
     */
    _setState(newState, _dispatchAction = true) {
        if (isFunction(newState)) {
            /** @type {?} */
            const _newState = newState(this._value());
            this.storeValue = __DEV__ ? this.deepFreeze(_newState) : _newState;
        }
        else {
            this.storeValue = newState;
        }
        if (!this.store) {
            this.store = new BehaviorSubject(this.storeValue);
            return;
        }
        if (isTransactionInProcess()) {
            this.handleTransaction();
            return;
        }
        this.dispatch(this.storeValue, _dispatchAction);
    }
    /**
     *
     * Reset the current store back to the initial value
     *
     * \@example
     *
     * store.reset()
     *
     * @return {?}
     */
    reset() {
        if (this.isResettable()) {
            isDev() && setAction('Reset');
            this._setState((/**
             * @return {?}
             */
            () => Object.assign({}, this._initialState)));
            this.setHasCache(false);
        }
        else {
            isDev() && console.warn(`You need to enable the reset functionality`);
        }
    }
    /**
     * @param {?} stateOrCallback
     * @return {?}
     */
    update(stateOrCallback) {
        isDev() && setAction('Update');
        /** @type {?} */
        let newState;
        /** @type {?} */
        const currentState = this._value();
        if (isFunction(stateOrCallback)) {
            newState = isFunction(this._producerFn) ? this._producerFn(currentState, stateOrCallback) : stateOrCallback(currentState);
        }
        else {
            newState = stateOrCallback;
        }
        /** @type {?} */
        const withHook = this.akitaPreUpdate(currentState, (/** @type {?} */ (Object.assign({}, currentState, newState))));
        /** @type {?} */
        const resolved = isPlainObject(currentState) ? withHook : new ((/** @type {?} */ (currentState))).constructor(withHook);
        this._setState(resolved);
    }
    /**
     * @param {?} newOptions
     * @return {?}
     */
    updateStoreConfig(newOptions) {
        this.options = Object.assign({}, this.options, newOptions);
    }
    // @internal
    /**
     * @param {?} _
     * @param {?} nextState
     * @return {?}
     */
    akitaPreUpdate(_, nextState) {
        return nextState;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy();
    }
    /**
     *
     * Destroy the store
     *
     * \@example
     *
     * store.destroy()
     *
     * @return {?}
     */
    destroy() {
        /** @type {?} */
        const hmrEnabled = isBrowser ? ((/** @type {?} */ (window))).hmrEnabled : false;
        if (!hmrEnabled && this === __stores__[this.storeName]) {
            delete __stores__[this.storeName];
            dispatchDeleted(this.storeName);
            this.setHasCache(false);
            this.cache.active.complete();
        }
    }
    /**
     * @private
     * @param {?} initialState
     * @return {?}
     */
    onInit(initialState) {
        __stores__[this.storeName] = this;
        this._setState((/**
         * @return {?}
         */
        () => initialState));
        dispatchAdded(this.storeName);
        if (this.isResettable()) {
            this._initialState = initialState;
        }
        isDev() && assertStoreHasName(this.storeName, this.constructor.name);
    }
    /**
     * @private
     * @param {?} state
     * @param {?=} _dispatchAction
     * @return {?}
     */
    dispatch(state, _dispatchAction = true) {
        this.store.next(state);
        if (_dispatchAction) {
            dispatchUpdate(this.storeName);
            resetCustomAction();
        }
    }
    /**
     * @private
     * @return {?}
     */
    watchTransaction() {
        commit().subscribe((/**
         * @return {?}
         */
        () => {
            this.inTransaction = false;
            this.dispatch(this._value());
        }));
    }
    /**
     * @private
     * @return {?}
     */
    isResettable() {
        if (this.resettable === false) {
            return false;
        }
        return this.resettable || getAkitaConfig().resettable;
    }
    /**
     * @private
     * @return {?}
     */
    handleTransaction() {
        if (!this.inTransaction) {
            this.watchTransaction();
            this.inTransaction = true;
        }
    }
    /**
     * @private
     * @return {?}
     */
    getCacheTTL() {
        return (this.cacheConfig && this.cacheConfig.ttl) || getAkitaConfig().ttl;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    Store.prototype.store;
    /**
     * @type {?}
     * @private
     */
    Store.prototype.storeValue;
    /**
     * @type {?}
     * @private
     */
    Store.prototype.inTransaction;
    /**
     * @type {?}
     * @private
     */
    Store.prototype._initialState;
    /**
     * @type {?}
     * @protected
     */
    Store.prototype.cache;
    /**
     * @type {?}
     * @protected
     */
    Store.prototype.options;
}
//# sourceMappingURL=data:application/json;base64,