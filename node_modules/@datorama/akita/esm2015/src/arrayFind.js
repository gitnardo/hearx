/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { coerceArray } from './coerceArray';
import { DEFAULT_ID_KEY } from './defaultIDKey';
import { distinctUntilChanged, map } from 'rxjs/operators';
import { isArray } from './isArray';
import { isFunction } from './isFunction';
import { isEmpty } from './isEmpty';
// @internal
/**
 * @template T
 * @param {?} collection
 * @param {?} idsOrPredicate
 * @param {?} idKey
 * @return {?}
 */
export function find(collection, idsOrPredicate, idKey) {
    /** @type {?} */
    const result = [];
    if (isFunction(idsOrPredicate)) {
        for (const entity of collection) {
            if (idsOrPredicate(entity) === true) {
                result.push(entity);
            }
        }
    }
    else {
        /** @type {?} */
        const toSet = coerceArray(idsOrPredicate).reduce((/**
         * @param {?} acc
         * @param {?} current
         * @return {?}
         */
        (acc, current) => acc.add(current)), new Set());
        for (const entity of collection) {
            if (toSet.has(entity[idKey])) {
                result.push(entity);
            }
        }
    }
    return result;
}
// @internal
/**
 * @template T
 * @return {?}
 */
export function distinctUntilArrayItemChanged() {
    return distinctUntilChanged((/**
     * @param {?} prevCollection
     * @param {?} currentCollection
     * @return {?}
     */
    (prevCollection, currentCollection) => {
        if (prevCollection === currentCollection) {
            return true;
        }
        if (isArray(prevCollection) === false || isArray(currentCollection) === false) {
            return false;
        }
        if (isEmpty(prevCollection) && isEmpty(currentCollection)) {
            return true;
        }
        // if item is new in the current collection but not exist in the prev collection
        /** @type {?} */
        const hasNewItem = hasChange(currentCollection, prevCollection);
        if (hasNewItem) {
            return false;
        }
        /** @type {?} */
        const isOneOfItemReferenceChanged = hasChange(prevCollection, currentCollection);
        // return false means there is a change and we want to call next()
        return isOneOfItemReferenceChanged === false;
    }));
}
// @internal
/**
 * @template T
 * @param {?} first
 * @param {?} second
 * @return {?}
 */
function hasChange(first, second) {
    /** @type {?} */
    const hasChange = second.some((/**
     * @param {?} currentItem
     * @return {?}
     */
    currentItem => {
        /** @type {?} */
        const oldItem = first.find((/**
         * @param {?} prevItem
         * @return {?}
         */
        prevItem => prevItem === currentItem));
        return oldItem === undefined;
    }));
    return hasChange;
}
/**
 * @template T
 * @param {?} idsOrPredicate
 * @param {?=} idKey
 * @return {?}
 */
export function arrayFind(idsOrPredicate, idKey) {
    return (/**
     * @param {?} source
     * @return {?}
     */
    function (source) {
        return source.pipe(map((/**
         * @param {?} collection
         * @return {?}
         */
        (collection) => {
            // which means the user deleted the root entity or set the collection to nil
            if (isArray(collection) === false) {
                return collection;
            }
            return find(collection, idsOrPredicate, idKey || DEFAULT_ID_KEY);
        })), distinctUntilArrayItemChanged(), map((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (isArray(value) === false) {
                return value;
            }
            if (isArray(idsOrPredicate) || isFunction(idsOrPredicate)) {
                return value;
            }
            return value[0];
        })));
    });
}
//# sourceMappingURL=data:application/json;base64,