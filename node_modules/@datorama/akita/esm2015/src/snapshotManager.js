/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __stores__ } from './stores';
import { isString } from './isString';
import { setSkipStorageUpdate } from './persistState';
import { $$addStore } from './dispatchers';
import { filter, take } from 'rxjs/operators';
export class SnapshotManager {
    /**
     * Get a snapshot of the whole state or a specific stores
     * Use it ONLY for things such as saving the state in the server
     * @param {?=} stores
     * @return {?}
     */
    getStoresSnapshot(stores = []) {
        /** @type {?} */
        let acc = {};
        /** @type {?} */
        const hasInclude = stores.length > 0;
        /** @type {?} */
        const keys = hasInclude ? stores : Object.keys(__stores__);
        for (let i = 0; i < keys.length; i++) {
            /** @type {?} */
            let storeName = keys[i];
            if (storeName !== 'router') {
                acc[storeName] = __stores__[storeName]._value();
            }
        }
        return acc;
    }
    /**
     * @param {?} stores
     * @param {?=} options
     * @return {?}
     */
    setStoresSnapshot(stores, options) {
        /** @type {?} */
        const mergedOptions = Object.assign({ skipStorageUpdate: false, lazy: false }, options);
        mergedOptions.skipStorageUpdate && setSkipStorageUpdate(true);
        /** @type {?} */
        let normalizedStores = stores;
        if (isString(stores)) {
            normalizedStores = JSON.parse((/** @type {?} */ (normalizedStores)));
        }
        /** @type {?} */
        const size = Object.keys(normalizedStores).length;
        if (mergedOptions.lazy) {
            $$addStore
                .pipe(filter((/**
             * @param {?} name
             * @return {?}
             */
            name => normalizedStores.hasOwnProperty(name))), take(size))
                .subscribe((/**
             * @param {?} name
             * @return {?}
             */
            name => __stores__[name]._setState((/**
             * @return {?}
             */
            () => normalizedStores[name]))));
        }
        else {
            for (let i = 0, keys = Object.keys(normalizedStores); i < keys.length; i++) {
                /** @type {?} */
                const storeName = keys[i];
                if (__stores__[storeName]) {
                    __stores__[storeName]._setState((/**
                     * @return {?}
                     */
                    () => normalizedStores[storeName]));
                }
            }
        }
        mergedOptions.skipStorageUpdate && setSkipStorageUpdate(false);
    }
}
/** @type {?} */
export const snapshotManager = new SnapshotManager();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25hcHNob3RNYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRhdG9yYW1hL2FraXRhLyIsInNvdXJjZXMiOlsic3JjL3NuYXBzaG90TWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU5QyxNQUFNLE9BQU8sZUFBZTs7Ozs7OztJQUsxQixpQkFBaUIsQ0FBQyxTQUFtQixFQUFFOztZQUNqQyxHQUFHLEdBQUcsRUFBRTs7Y0FDTixVQUFVLEdBQUcsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDOztjQUM5QixJQUFJLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQzFELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFOztnQkFDaEMsU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDdkIsSUFBSSxTQUFTLEtBQUssUUFBUSxFQUFFO2dCQUMxQixHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO2FBQ2pEO1NBQ0Y7UUFFRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7Ozs7OztJQUVELGlCQUFpQixDQUFDLE1BQTZDLEVBQUUsT0FBeUQ7O2NBQ2xILGFBQWEsaUJBQVEsRUFBRSxpQkFBaUIsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFLLE9BQU8sQ0FBRTtRQUNsRixhQUFhLENBQUMsaUJBQWlCLElBQUksb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7O1lBRTFELGdCQUFnQixHQUFHLE1BQU07UUFFN0IsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDcEIsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBQSxnQkFBZ0IsRUFBVSxDQUFDLENBQUM7U0FDM0Q7O2NBRUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxNQUFNO1FBRWpELElBQUksYUFBYSxDQUFDLElBQUksRUFBRTtZQUN0QixVQUFVO2lCQUNQLElBQUksQ0FDSCxNQUFNOzs7O1lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUMsRUFDckQsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUNYO2lCQUNBLFNBQVM7Ozs7WUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTOzs7WUFBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsRUFBQyxFQUFDLENBQUM7U0FDaEY7YUFBTTtZQUNMLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7O3NCQUNwRSxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDekIsSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDLEVBQUU7b0JBQ3pCLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTOzs7b0JBQUMsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEVBQUMsQ0FBQztpQkFDcEU7YUFDRjtTQUNGO1FBRUQsYUFBYSxDQUFDLGlCQUFpQixJQUFJLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pFLENBQUM7Q0FDRjs7QUFFRCxNQUFNLE9BQU8sZUFBZSxHQUFHLElBQUksZUFBZSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19zdG9yZXNfXyB9IGZyb20gJy4vc3RvcmVzJztcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSAnLi9pc1N0cmluZyc7XG5pbXBvcnQgeyBzZXRTa2lwU3RvcmFnZVVwZGF0ZSB9IGZyb20gJy4vcGVyc2lzdFN0YXRlJztcbmltcG9ydCB7ICQkYWRkU3RvcmUgfSBmcm9tICcuL2Rpc3BhdGNoZXJzJztcbmltcG9ydCB7IGZpbHRlciwgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZXhwb3J0IGNsYXNzIFNuYXBzaG90TWFuYWdlciB7XG4gIC8qKlxuICAgKiBHZXQgYSBzbmFwc2hvdCBvZiB0aGUgd2hvbGUgc3RhdGUgb3IgYSBzcGVjaWZpYyBzdG9yZXNcbiAgICogVXNlIGl0IE9OTFkgZm9yIHRoaW5ncyBzdWNoIGFzIHNhdmluZyB0aGUgc3RhdGUgaW4gdGhlIHNlcnZlclxuICAgKi9cbiAgZ2V0U3RvcmVzU25hcHNob3Qoc3RvcmVzOiBzdHJpbmdbXSA9IFtdKSB7XG4gICAgbGV0IGFjYyA9IHt9O1xuICAgIGNvbnN0IGhhc0luY2x1ZGUgPSBzdG9yZXMubGVuZ3RoID4gMDtcbiAgICBjb25zdCBrZXlzID0gaGFzSW5jbHVkZSA/IHN0b3JlcyA6IE9iamVjdC5rZXlzKF9fc3RvcmVzX18pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IHN0b3JlTmFtZSA9IGtleXNbaV07XG4gICAgICBpZiAoc3RvcmVOYW1lICE9PSAncm91dGVyJykge1xuICAgICAgICBhY2Nbc3RvcmVOYW1lXSA9IF9fc3RvcmVzX19bc3RvcmVOYW1lXS5fdmFsdWUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9XG5cbiAgc2V0U3RvcmVzU25hcHNob3Qoc3RvcmVzOiB7IFtzdG9yZU5hbWU6IHN0cmluZ106IGFueSB9IHwgc3RyaW5nLCBvcHRpb25zPzogeyBza2lwU3RvcmFnZVVwZGF0ZT86IGJvb2xlYW47IGxhenk/OiBib29sZWFuIH0pIHtcbiAgICBjb25zdCBtZXJnZWRPcHRpb25zID0geyAuLi57IHNraXBTdG9yYWdlVXBkYXRlOiBmYWxzZSwgbGF6eTogZmFsc2UgfSwgLi4ub3B0aW9ucyB9O1xuICAgIG1lcmdlZE9wdGlvbnMuc2tpcFN0b3JhZ2VVcGRhdGUgJiYgc2V0U2tpcFN0b3JhZ2VVcGRhdGUodHJ1ZSk7XG5cbiAgICBsZXQgbm9ybWFsaXplZFN0b3JlcyA9IHN0b3JlcztcblxuICAgIGlmIChpc1N0cmluZyhzdG9yZXMpKSB7XG4gICAgICBub3JtYWxpemVkU3RvcmVzID0gSlNPTi5wYXJzZShub3JtYWxpemVkU3RvcmVzIGFzIHN0cmluZyk7XG4gICAgfVxuXG4gICAgY29uc3Qgc2l6ZSA9IE9iamVjdC5rZXlzKG5vcm1hbGl6ZWRTdG9yZXMpLmxlbmd0aDtcblxuICAgIGlmIChtZXJnZWRPcHRpb25zLmxhenkpIHtcbiAgICAgICQkYWRkU3RvcmVcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgZmlsdGVyKG5hbWUgPT4gbm9ybWFsaXplZFN0b3Jlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSksXG4gICAgICAgICAgdGFrZShzaXplKVxuICAgICAgICApXG4gICAgICAgIC5zdWJzY3JpYmUobmFtZSA9PiBfX3N0b3Jlc19fW25hbWVdLl9zZXRTdGF0ZSgoKSA9PiBub3JtYWxpemVkU3RvcmVzW25hbWVdKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBrZXlzID0gT2JqZWN0LmtleXMobm9ybWFsaXplZFN0b3Jlcyk7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHN0b3JlTmFtZSA9IGtleXNbaV07XG4gICAgICAgIGlmIChfX3N0b3Jlc19fW3N0b3JlTmFtZV0pIHtcbiAgICAgICAgICBfX3N0b3Jlc19fW3N0b3JlTmFtZV0uX3NldFN0YXRlKCgpID0+IG5vcm1hbGl6ZWRTdG9yZXNbc3RvcmVOYW1lXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZXJnZWRPcHRpb25zLnNraXBTdG9yYWdlVXBkYXRlICYmIHNldFNraXBTdG9yYWdlVXBkYXRlKGZhbHNlKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgc25hcHNob3RNYW5hZ2VyID0gbmV3IFNuYXBzaG90TWFuYWdlcigpO1xuIl19