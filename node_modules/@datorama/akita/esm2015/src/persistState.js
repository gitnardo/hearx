/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { filter, skip } from 'rxjs/operators';
import { from, isObservable, of, ReplaySubject } from 'rxjs';
import { isFunction } from './isFunction';
import { AkitaError } from './errors';
import { __stores__ } from './stores';
import { getValue } from './getValueByString';
import { setAction } from './actions';
import { setValue } from './setValueByString';
import { $$addStore, $$deleteStore } from './dispatchers';
import { isNil } from './isNil';
import { isObject } from './isObject';
import { isNotBrowser, hasLocalStorage, hasSessionStorage } from './root';
/** @type {?} */
let skipStorageUpdate = false;
/** @type {?} */
const _persistStateInit = new ReplaySubject(1);
/**
 * @return {?}
 */
export function selectPersistStateInit() {
    return _persistStateInit.asObservable();
}
/**
 * @param {?} skip
 * @return {?}
 */
export function setSkipStorageUpdate(skip) {
    skipStorageUpdate = skip;
}
/**
 * @return {?}
 */
export function getSkipStorageUpdate() {
    return skipStorageUpdate;
}
/**
 * @record
 */
export function PersistStateStorage() { }
if (false) {
    /**
     * @param {?} key
     * @return {?}
     */
    PersistStateStorage.prototype.getItem = function (key) { };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    PersistStateStorage.prototype.setItem = function (key, value) { };
    /**
     * @return {?}
     */
    PersistStateStorage.prototype.clear = function () { };
}
/**
 * @param {?} v
 * @return {?}
 */
function isPromise(v) {
    return v && isFunction(v.then);
}
/**
 * @param {?} asyncOrValue
 * @return {?}
 */
function observify(asyncOrValue) {
    if (isPromise(asyncOrValue) || isObservable(asyncOrValue)) {
        return from(asyncOrValue);
    }
    return of(asyncOrValue);
}
/**
 * @record
 */
export function PersistStateParams() { }
if (false) {
    /**
     * The storage key
     * @type {?}
     */
    PersistStateParams.prototype.key;
    /**
     * Whether to enable persistState in a non-browser environment
     * @type {?}
     */
    PersistStateParams.prototype.enableInNonBrowser;
    /**
     * Storage strategy to use. This defaults to LocalStorage but you can pass SessionStorage or anything that implements the StorageEngine API.
     * @type {?}
     */
    PersistStateParams.prototype.storage;
    /**
     * Custom deserializer. Defaults to JSON.parse
     * @type {?}
     */
    PersistStateParams.prototype.deserialize;
    /**
     * Custom serializer, defaults to JSON.stringify
     * @type {?}
     */
    PersistStateParams.prototype.serialize;
    /**
     * By default the whole state is saved to storage, use this param to include only the stores you need.
     * Pay attention that you can't use both include and exclude
     * @type {?}
     */
    PersistStateParams.prototype.include;
    /**
     *  By default the whole state is saved to storage, use this param to exclude stores that you don't need.
     *  Pay attention that you can't use both include and exclude
     * @type {?}
     */
    PersistStateParams.prototype.exclude;
    /** @type {?} */
    PersistStateParams.prototype.skipStorageUpdate;
    /** @type {?} */
    PersistStateParams.prototype.preStorageUpdateOperator;
    /**
     * Whether to persist a dynamic store upon destroy
     * @type {?}
     */
    PersistStateParams.prototype.persistOnDestroy;
    /**
     * @param {?} storeName
     * @param {?} state
     * @return {?}
     */
    PersistStateParams.prototype.preStorageUpdate = function (storeName, state) { };
    /**
     * @param {?} storeName
     * @param {?} state
     * @return {?}
     */
    PersistStateParams.prototype.preStoreUpdate = function (storeName, state) { };
}
/**
 * @param {?=} params
 * @return {?}
 */
export function persistState(params) {
    /** @type {?} */
    const defaults = {
        key: 'AkitaStores',
        enableInNonBrowser: false,
        storage: !hasLocalStorage() ? params.storage : localStorage,
        deserialize: JSON.parse,
        serialize: JSON.stringify,
        include: [],
        /**
         * @deprecated use include with a callback
         */
        exclude: [],
        persistOnDestroy: false,
        preStorageUpdate: (/**
         * @param {?} storeName
         * @param {?} state
         * @return {?}
         */
        function (storeName, state) {
            return state;
        }),
        preStoreUpdate: (/**
         * @param {?} storeName
         * @param {?} state
         * @return {?}
         */
        function (storeName, state) {
            return state;
        }),
        skipStorageUpdate: getSkipStorageUpdate,
        preStorageUpdateOperator: (/**
         * @return {?}
         */
        () => (/**
         * @param {?} source
         * @return {?}
         */
        source => source))
    };
    const { storage, enableInNonBrowser, deserialize, serialize, include, exclude, key, preStorageUpdate, persistOnDestroy, preStorageUpdateOperator, preStoreUpdate, skipStorageUpdate } = Object.assign({}, defaults, params);
    if ((isNotBrowser && !enableInNonBrowser) || !storage)
        return;
    /** @type {?} */
    const hasInclude = include.length > 0;
    /** @type {?} */
    const hasExclude = exclude.length > 0;
    /** @type {?} */
    let includeStores;
    if (hasInclude && hasExclude) {
        throw new AkitaError("You can't use both include and exclude");
    }
    if (hasInclude) {
        includeStores = include.reduce((/**
         * @param {?} acc
         * @param {?} path
         * @return {?}
         */
        (acc, path) => {
            if (isFunction(path)) {
                acc.fns.push(path);
            }
            else {
                /** @type {?} */
                const storeName = path.split('.')[0];
                acc[storeName] = path;
            }
            return acc;
        }), { fns: [] });
    }
    /** @type {?} */
    let stores = {};
    /** @type {?} */
    let acc = {};
    /** @type {?} */
    let subscriptions = [];
    /** @type {?} */
    const buffer = [];
    /**
     * @param {?} v
     * @return {?}
     */
    function _save(v) {
        observify(v).subscribe((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const next = buffer.shift();
            next && _save(next);
        }));
    }
    // when we use the local/session storage we perform the serialize, otherwise we let the passed storage implementation to do it
    /** @type {?} */
    const isLocalStorage = (hasLocalStorage() && storage === localStorage) || (hasSessionStorage() && storage === sessionStorage);
    observify(storage.getItem(key)).subscribe((/**
     * @param {?} value
     * @return {?}
     */
    (value) => {
        /** @type {?} */
        let storageState = isObject(value) ? value : deserialize(value || '{}');
        /**
         * @param {?} storeCache
         * @return {?}
         */
        function save(storeCache) {
            storageState['$cache'] = Object.assign({}, (storageState['$cache'] || {}), storeCache);
            storageState = Object.assign({}, storageState, acc);
            buffer.push(storage.setItem(key, isLocalStorage ? serialize(storageState) : storageState));
            _save(buffer.shift());
        }
        /**
         * @param {?} storeName
         * @param {?} path
         * @return {?}
         */
        function subscribe(storeName, path) {
            stores[storeName] = __stores__[storeName]
                ._select((/**
             * @param {?} state
             * @return {?}
             */
            state => getValue(state, path)))
                .pipe(skip(1), filter((/**
             * @return {?}
             */
            () => skipStorageUpdate() === false)), preStorageUpdateOperator())
                .subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                acc[storeName] = preStorageUpdate(storeName, data);
                Promise.resolve().then((/**
                 * @return {?}
                 */
                () => save({ [storeName]: __stores__[storeName]._cache().getValue() })));
            }));
        }
        /**
         * @param {?} storeName
         * @param {?} store
         * @param {?} path
         * @return {?}
         */
        function setInitial(storeName, store, path) {
            if (storeName in storageState) {
                setAction('@PersistState');
                store._setState((/**
                 * @param {?} state
                 * @return {?}
                 */
                state => {
                    return setValue(state, path, preStoreUpdate(storeName, storageState[storeName]));
                }));
                /** @type {?} */
                const hasCache = storageState['$cache'] ? storageState['$cache'][storeName] : false;
                __stores__[storeName].setHasCache(hasCache, { restartTTL: true });
            }
        }
        subscriptions.push($$deleteStore.subscribe((/**
         * @param {?} storeName
         * @return {?}
         */
        storeName => {
            if (stores[storeName]) {
                if (persistOnDestroy === false) {
                    save({ [storeName]: false });
                }
                stores[storeName].unsubscribe();
                delete stores[storeName];
            }
        })));
        subscriptions.push($$addStore.subscribe((/**
         * @param {?} storeName
         * @return {?}
         */
        storeName => {
            if (storeName === 'router' || (hasExclude && exclude.includes(storeName))) {
                return;
            }
            /** @type {?} */
            const store = __stores__[storeName];
            if (hasInclude) {
                /** @type {?} */
                let path = includeStores[storeName];
                if (!path) {
                    /** @type {?} */
                    const passPredicate = includeStores.fns.some((/**
                     * @param {?} fn
                     * @return {?}
                     */
                    fn => fn(storeName)));
                    if (passPredicate) {
                        path = storeName;
                    }
                    else {
                        return;
                    }
                }
                setInitial(storeName, store, path);
                subscribe(storeName, path);
            }
            else {
                setInitial(storeName, store, storeName);
                subscribe(storeName, storeName);
            }
        })));
        _persistStateInit.next();
    }));
    return {
        /**
         * @return {?}
         */
        destroy() {
            subscriptions.forEach((/**
             * @param {?} s
             * @return {?}
             */
            s => s.unsubscribe()));
            for (let i = 0, keys = Object.keys(stores); i < keys.length; i++) {
                /** @type {?} */
                const storeName = keys[i];
                stores[storeName].unsubscribe();
            }
            stores = {};
        },
        /**
         * @return {?}
         */
        clear() {
            storage.clear();
        },
        /**
         * @param {?=} storeName
         * @return {?}
         */
        clearStore(storeName) {
            if (isNil(storeName)) {
                /** @type {?} */
                const value = observify(storage.setItem(key, '{}'));
                value.subscribe();
                return;
            }
            /** @type {?} */
            const value = storage.getItem(key);
            observify(value).subscribe((/**
             * @param {?} v
             * @return {?}
             */
            v => {
                /** @type {?} */
                const storageState = deserialize(v || '{}');
                if (storageState[storeName]) {
                    delete storageState[storeName];
                    /** @type {?} */
                    const value = observify(storage.setItem(key, serialize(storageState)));
                    value.subscribe();
                }
            }));
        }
    };
}
//# sourceMappingURL=data:application/json;base64,