/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { dirtyCheckDefaultParams, DirtyCheckPlugin, getNestedPath } from './dirtyCheckPlugin';
import { EntityCollectionPlugin } from '../entityCollectionPlugin';
import { auditTime, map, skip } from 'rxjs/operators';
import { merge, Subject } from 'rxjs';
import { coerceArray } from '../../coerceArray';
/**
 * @template State, P
 */
export class EntityDirtyCheckPlugin extends EntityCollectionPlugin {
    /**
     * @param {?} query
     * @param {?=} params
     */
    constructor(query, params = {}) {
        super(query, params.entityIds);
        this.query = query;
        this.params = params;
        this._someDirty = new Subject();
        this.someDirty$ = merge(this.query.select((/**
         * @param {?} state
         * @return {?}
         */
        state => state.entities)), this._someDirty.asObservable()).pipe(auditTime(0), map((/**
         * @return {?}
         */
        () => this.checkSomeDirty())));
        this.params = Object.assign({}, dirtyCheckDefaultParams, params);
        // TODO lazy activate?
        this.activate();
        this.selectIds()
            .pipe(skip(1))
            .subscribe((/**
         * @param {?} ids
         * @return {?}
         */
        ids => {
            super.rebase(ids, { afterAdd: (/**
                 * @param {?} plugin
                 * @return {?}
                 */
                plugin => plugin.setHead()) });
        }));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?=} ids
     * @return {THIS}
     */
    setHead(ids) {
        if ((/** @type {?} */ (this)).params.entityIds && ids) {
            /** @type {?} */
            const toArray = (/** @type {?} */ (coerceArray(ids)));
            /** @type {?} */
            const someAreWatched = coerceArray((/** @type {?} */ (this)).params.entityIds).some((/**
             * @param {?} id
             * @return {?}
             */
            id => toArray.indexOf(id) > -1));
            if (someAreWatched === false) {
                return (/** @type {?} */ (this));
            }
        }
        (/** @type {?} */ (this)).forEachId(ids, (/**
         * @param {?} e
         * @return {?}
         */
        e => e.setHead()));
        (/** @type {?} */ (this))._someDirty.next();
        return (/** @type {?} */ (this));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    hasHead(id) {
        if (this.entities.has(id)) {
            /** @type {?} */
            const entity = this.getEntity(id);
            return entity.hasHead();
        }
        return false;
    }
    /**
     * @param {?=} ids
     * @param {?=} params
     * @return {?}
     */
    reset(ids, params = {}) {
        this.forEachId(ids, (/**
         * @param {?} e
         * @return {?}
         */
        e => e.reset(params)));
    }
    /**
     * @param {?} id
     * @param {?=} asObservable
     * @return {?}
     */
    isDirty(id, asObservable = true) {
        if (this.entities.has(id)) {
            /** @type {?} */
            const entity = this.getEntity(id);
            return asObservable ? entity.isDirty$ : entity.isDirty();
        }
        return false;
    }
    /**
     * @return {?}
     */
    someDirty() {
        return this.checkSomeDirty();
    }
    /**
     * @param {?} id
     * @param {?} path
     * @return {?}
     */
    isPathDirty(id, path) {
        if (this.entities.has(id)) {
            /** @type {?} */
            const head = ((/** @type {?} */ (this.getEntity(id)))).getHead();
            /** @type {?} */
            const current = this.query.getEntity(id);
            /** @type {?} */
            const currentPathValue = getNestedPath(current, path);
            /** @type {?} */
            const headPathValue = getNestedPath(head, path);
            return this.params.comparator(currentPathValue, headPathValue);
        }
        return null;
    }
    /**
     * @param {?=} ids
     * @return {?}
     */
    destroy(ids) {
        this.forEachId(ids, (/**
         * @param {?} e
         * @return {?}
         */
        e => e.destroy()));
        /** complete only when the plugin destroys */
        if (!ids) {
            this._someDirty.complete();
        }
    }
    /**
     * @protected
     * @param {?} id
     * @return {?}
     */
    instantiatePlugin(id) {
        return (/** @type {?} */ (new DirtyCheckPlugin(this.query, this.params, id)));
    }
    /**
     * @private
     * @return {?}
     */
    checkSomeDirty() {
        /** @type {?} */
        const entitiesIds = this.resolvedIds();
        for (const id of entitiesIds) {
            if (this.getEntity(id).isDirty()) {
                return true;
            }
        }
        return false;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    EntityDirtyCheckPlugin.prototype._someDirty;
    /** @type {?} */
    EntityDirtyCheckPlugin.prototype.someDirty$;
    /**
     * @type {?}
     * @protected
     */
    EntityDirtyCheckPlugin.prototype.query;
    /**
     * @type {?}
     * @private
     */
    EntityDirtyCheckPlugin.prototype.params;
}
//# sourceMappingURL=data:application/json;base64,