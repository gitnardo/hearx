/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isUndefined } from '../isUndefined';
import { coerceArray } from '../coerceArray';
import { toBoolean } from '../toBoolean';
import { isFunction } from '../isFunction';
/**
 * Each plugin that wants to add support for entities should extend this interface.
 * @abstract
 * @template State, P
 */
export class EntityCollectionPlugin {
    /**
     * @protected
     * @param {?} query
     * @param {?} entityIds
     */
    constructor(query, entityIds) {
        this.query = query;
        this.entityIds = entityIds;
        this.entities = new Map();
    }
    /**
     * Get the entity plugin instance.
     * @protected
     * @param {?} id
     * @return {?}
     */
    getEntity(id) {
        return this.entities.get(id);
    }
    /**
     * Whether the entity plugin exist.
     * @protected
     * @param {?} id
     * @return {?}
     */
    hasEntity(id) {
        return this.entities.has(id);
    }
    /**
     * Remove the entity plugin instance.
     * @protected
     * @param {?} id
     * @return {?}
     */
    removeEntity(id) {
        this.destroy(id);
        return this.entities.delete(id);
    }
    /**
     * Set the entity plugin instance.
     * @protected
     * @param {?} id
     * @param {?} plugin
     * @return {?}
     */
    createEntity(id, plugin) {
        return this.entities.set(id, plugin);
    }
    /**
     * If the user passes `entityIds` we take them; otherwise, we take all.
     * @protected
     * @return {?}
     */
    getIds() {
        return isUndefined(this.entityIds) ? this.query.getValue().ids : coerceArray(this.entityIds);
    }
    /**
     * When you call one of the plugin methods, you can pass id/ids or undefined which means all.
     * @protected
     * @param {?=} ids
     * @return {?}
     */
    resolvedIds(ids) {
        return isUndefined(ids) ? this.getIds() : coerceArray(ids);
    }
    /**
     * Call this method when you want to activate the plugin on init or when you need to listen to add/remove of entities dynamically.
     *
     * For example in your plugin you may do the following:
     *
     * this.query.select(state => state.ids).pipe(skip(1)).subscribe(ids => this.activate(ids));
     * @protected
     * @param {?} ids
     * @param {?=} actions
     * @return {?}
     */
    rebase(ids, actions = {}) {
        /**
         *
         * If the user passes `entityIds` & we have new ids check if we need to add/remove instances.
         *
         * This phase will be called only upon update.
         */
        if (toBoolean(ids)) {
            /**
             * Which means all
             */
            if (isUndefined(this.entityIds)) {
                for (let i = 0, len = ids.length; i < len; i++) {
                    /** @type {?} */
                    const entityId = ids[i];
                    if (this.hasEntity(entityId) === false) {
                        isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);
                        /** @type {?} */
                        const plugin = this.instantiatePlugin(entityId);
                        this.entities.set(entityId, plugin);
                        isFunction(actions.afterAdd) && actions.afterAdd(plugin);
                    }
                }
                this.entities.forEach((/**
                 * @param {?} plugin
                 * @param {?} entityId
                 * @return {?}
                 */
                (plugin, entityId) => {
                    if (ids.indexOf(entityId) === -1) {
                        isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);
                        this.removeEntity(entityId);
                    }
                }));
            }
            else {
                /**
                 * Which means the user passes specific ids
                 * @type {?}
                 */
                const _ids = coerceArray(this.entityIds);
                for (let i = 0, len = _ids.length; i < len; i++) {
                    /** @type {?} */
                    const entityId = _ids[i];
                    /** The Entity in current ids and doesn't exist, add it. */
                    if (ids.indexOf(entityId) > -1 && this.hasEntity(entityId) === false) {
                        isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);
                        /** @type {?} */
                        const plugin = this.instantiatePlugin(entityId);
                        this.entities.set(entityId, plugin);
                        isFunction(actions.afterAdd) && actions.afterAdd(plugin);
                    }
                    else {
                        this.entities.forEach((/**
                         * @param {?} plugin
                         * @param {?} entityId
                         * @return {?}
                         */
                        (plugin, entityId) => {
                            /** The Entity not in current ids and exists, remove it. */
                            if (ids.indexOf(entityId) === -1 && this.hasEntity(entityId) === true) {
                                isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);
                                this.removeEntity(entityId);
                            }
                        }));
                    }
                }
            }
        }
        else {
            /**
             * Otherwise, start with the provided ids or all.
             */
            this.getIds().forEach((/**
             * @param {?} id
             * @return {?}
             */
            id => {
                if (!this.hasEntity(id))
                    this.createEntity(id, this.instantiatePlugin(id));
            }));
        }
    }
    /**
     * Listen for add/remove entities.
     * @protected
     * @return {?}
     */
    selectIds() {
        return this.query.select((/**
         * @param {?} state
         * @return {?}
         */
        state => state.ids));
    }
    /**
     * Base method for activation, you can override it if you need to.
     * @protected
     * @param {?=} ids
     * @return {?}
     */
    activate(ids) {
        this.rebase(ids);
    }
    /**
     * Loop over each id and invoke the plugin method.
     * @protected
     * @param {?} ids
     * @param {?} cb
     * @return {?}
     */
    forEachId(ids, cb) {
        /** @type {?} */
        const _ids = this.resolvedIds(ids);
        for (let i = 0, len = _ids.length; i < len; i++) {
            /** @type {?} */
            const id = _ids[i];
            if (this.hasEntity(id)) {
                cb(this.getEntity(id));
            }
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    EntityCollectionPlugin.prototype.entities;
    /**
     * @type {?}
     * @protected
     */
    EntityCollectionPlugin.prototype.query;
    /**
     * @type {?}
     * @private
     */
    EntityCollectionPlugin.prototype.entityIds;
    /**
     * This method is responsible for plugin instantiation.
     *
     * For example:
     * return new StateHistory(this.query, this.params, id) as P;
     * @abstract
     * @protected
     * @param {?} id
     * @return {?}
     */
    EntityCollectionPlugin.prototype.instantiatePlugin = function (id) { };
    /**
     * This method is responsible for cleaning.
     * @abstract
     * @param {?=} id
     * @return {?}
     */
    EntityCollectionPlugin.prototype.destroy = function (id) { };
}
//# sourceMappingURL=data:application/json;base64,