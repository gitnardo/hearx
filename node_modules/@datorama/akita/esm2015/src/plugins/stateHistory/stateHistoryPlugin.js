/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { pairwise, distinctUntilChanged } from 'rxjs/operators';
import { BehaviorSubject } from 'rxjs';
import { AkitaPlugin } from '../plugin';
import { logAction } from '../../actions';
import { isFunction } from '../../isFunction';
/**
 * @record
 */
export function StateHistoryParams() { }
if (false) {
    /** @type {?|undefined} */
    StateHistoryParams.prototype.maxAge;
    /** @type {?|undefined} */
    StateHistoryParams.prototype.watchProperty;
    /** @type {?|undefined} */
    StateHistoryParams.prototype.comparator;
}
/**
 * @template State
 */
export class StateHistoryPlugin extends AkitaPlugin {
    /**
     * @param {?} query
     * @param {?=} params
     * @param {?=} _entityId
     */
    constructor(query, params = {}, _entityId) {
        super(query, {
            resetFn: (/**
             * @return {?}
             */
            () => this.clear())
        });
        this.query = query;
        this.params = params;
        this._entityId = _entityId;
        /**
         * Allow skipping an update from outside
         */
        this.skip = false;
        this.history = {
            past: [],
            present: null,
            future: []
        };
        /**
         * Skip the update when redo/undo
         */
        this.skipUpdate = false;
        params.maxAge = !!params.maxAge ? params.maxAge : 10;
        params.comparator = params.comparator || ((/**
         * @return {?}
         */
        () => true));
        this.activate();
    }
    /**
     * Observable stream representing whether the history plugin has an available past
     *
     * @return {?}
     */
    get hasPast$() {
        return this._hasPast$;
    }
    /**
     * Observable stream representing whether the history plugin has an available future
     *
     * @return {?}
     */
    get hasFuture$() {
        return this._hasFuture$;
    }
    /**
     * @return {?}
     */
    get hasPast() {
        return this.history.past.length > 0;
    }
    /**
     * @return {?}
     */
    get hasFuture() {
        return this.history.future.length > 0;
    }
    /**
     * @private
     * @return {?}
     */
    get property() {
        return this.params.watchProperty;
    }
    /* Updates the hasPast$ hasFuture$ observables*/
    /**
     * @private
     * @return {?}
     */
    updateHasHistory() {
        this.hasFutureSubject.next(this.hasFuture);
        this.hasPastSubject.next(this.hasPast);
    }
    /**
     * @return {?}
     */
    activate() {
        this.hasPastSubject = new BehaviorSubject(false);
        this._hasPast$ = this.hasPastSubject.asObservable().pipe(distinctUntilChanged());
        this.hasFutureSubject = new BehaviorSubject(false);
        this._hasFuture$ = this.hasFutureSubject.asObservable().pipe(distinctUntilChanged());
        this.history.present = this.getSource(this._entityId, this.property);
        this.subscription = ((/** @type {?} */ (this)))
            .selectSource(this._entityId, this.property)
            .pipe(pairwise())
            .subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ([past, present]) => {
            if (this.skip) {
                this.skip = false;
                return;
            }
            /**
             *  comparator: (prev, current) => isEqual(prev, current) === false
             * @type {?}
             */
            const shouldUpdate = this.params.comparator(past, present);
            if (!this.skipUpdate && shouldUpdate) {
                if (this.history.past.length === this.params.maxAge) {
                    this.history.past = this.history.past.slice(1);
                }
                this.history.past = [...this.history.past, past];
                this.history.present = present;
                this.updateHasHistory();
            }
        }));
    }
    /**
     * @return {?}
     */
    undo() {
        if (this.history.past.length > 0) {
            const { past, present } = this.history;
            /** @type {?} */
            const previous = past[past.length - 1];
            this.history.past = past.slice(0, past.length - 1);
            this.history.present = previous;
            this.history.future = [present, ...this.history.future];
            this.update();
        }
    }
    /**
     * @return {?}
     */
    redo() {
        if (this.history.future.length > 0) {
            const { past, present } = this.history;
            /** @type {?} */
            const next = this.history.future[0];
            /** @type {?} */
            const newFuture = this.history.future.slice(1);
            this.history.past = [...past, present];
            this.history.present = next;
            this.history.future = newFuture;
            this.update('Redo');
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    jumpToPast(index) {
        if (index < 0 || index >= this.history.past.length)
            return;
        const { past, future, present } = this.history;
        /**
         *
         * const past = [1, 2, 3, 4, 5];
         * const present = 6;
         * const future = [7, 8, 9];
         * const index = 2;
         *
         * newPast = past.slice(0, index) = [1, 2];
         * newPresent = past[index] = 3;
         * newFuture = [...past.slice(index + 1),present, ...future] = [4, 5, 6, 7, 8, 9];
         *
         * @type {?}
         */
        const newPast = past.slice(0, index);
        /** @type {?} */
        const newFuture = [...past.slice(index + 1), present, ...future];
        /** @type {?} */
        const newPresent = past[index];
        this.history.past = newPast;
        this.history.present = newPresent;
        this.history.future = newFuture;
        this.update();
    }
    /**
     * @param {?} index
     * @return {?}
     */
    jumpToFuture(index) {
        if (index < 0 || index >= this.history.future.length)
            return;
        const { past, future, present } = this.history;
        /**
         *
         * const past = [1, 2, 3, 4, 5];
         * const present = 6;
         * const future = [7, 8, 9, 10]
         * const index = 1
         *
         * newPast = [...past, present, ...future.slice(0, index) = [1, 2, 3, 4, 5, 6, 7];
         * newPresent = future[index] = 8;
         * newFuture = futrue.slice(index+1) = [9, 10];
         *
         * @type {?}
         */
        const newPast = [...past, present, ...future.slice(0, index)];
        /** @type {?} */
        const newPresent = future[index];
        /** @type {?} */
        const newFuture = future.slice(index + 1);
        this.history.past = newPast;
        this.history.present = newPresent;
        this.history.future = newFuture;
        this.update('Redo');
    }
    /**
     *
     * jump n steps in the past or forward
     *
     * @param {?} n
     * @return {?}
     */
    jump(n) {
        if (n > 0)
            return this.jumpToFuture(n - 1);
        if (n < 0)
            return this.jumpToPast(this.history.past.length + n);
    }
    /**
     * Clear the history
     *
     * \@example
     *
     * stateHistory.clear((history) => {
     *  return {
     *    past: history.past,
     *    present: history.present,
     *    future: []
     *  };
     * });
     * @param {?=} customUpdateFn Callback function for only clearing part of the history
     *
     * @return {?}
     */
    clear(customUpdateFn) {
        this.history = isFunction(customUpdateFn)
            ? customUpdateFn(this.history)
            : {
                past: [],
                present: null,
                future: []
            };
        this.updateHasHistory();
    }
    /**
     * @param {?=} clearHistory
     * @return {?}
     */
    destroy(clearHistory = false) {
        if (clearHistory) {
            this.clear();
        }
        this.subscription.unsubscribe();
    }
    /**
     * @return {?}
     */
    ignoreNext() {
        this.skip = true;
    }
    /**
     * @private
     * @param {?=} action
     * @return {?}
     */
    update(action = 'Undo') {
        this.skipUpdate = true;
        logAction(`@StateHistory - ${action}`);
        this.updateStore(this.history.present, this._entityId, this.property);
        this.updateHasHistory();
        this.skipUpdate = false;
    }
}
if (false) {
    /**
     * Allow skipping an update from outside
     * @type {?}
     * @private
     */
    StateHistoryPlugin.prototype.skip;
    /**
     * @type {?}
     * @private
     */
    StateHistoryPlugin.prototype.history;
    /**
     * Skip the update when redo/undo
     * @type {?}
     * @private
     */
    StateHistoryPlugin.prototype.skipUpdate;
    /**
     * @type {?}
     * @private
     */
    StateHistoryPlugin.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    StateHistoryPlugin.prototype.hasPastSubject;
    /**
     * @type {?}
     * @private
     */
    StateHistoryPlugin.prototype._hasPast$;
    /**
     * @type {?}
     * @private
     */
    StateHistoryPlugin.prototype.hasFutureSubject;
    /**
     * @type {?}
     * @private
     */
    StateHistoryPlugin.prototype._hasFuture$;
    /**
     * @type {?}
     * @protected
     */
    StateHistoryPlugin.prototype.query;
    /**
     * @type {?}
     * @private
     */
    StateHistoryPlugin.prototype.params;
    /**
     * @type {?}
     * @private
     */
    StateHistoryPlugin.prototype._entityId;
}
//# sourceMappingURL=data:application/json;base64,