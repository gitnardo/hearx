/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { AkitaPlugin } from '../plugin';
import { debounceTime } from 'rxjs/operators';
import { getValue } from '../../getValueByString';
import { toBoolean } from '../../toBoolean';
import { isString } from '../../isString';
import { setValue } from '../../setValueByString';
import { logAction } from '../../actions';
// Todo: Return  AbstractControl interface
/**
 * @template T
 */
export class PersistNgFormPlugin extends AkitaPlugin {
    /**
     * @param {?} query
     * @param {?=} factoryFnOrPath
     * @param {?=} params
     */
    constructor(query, factoryFnOrPath, params = {}) {
        super(query);
        this.query = query;
        this.factoryFnOrPath = factoryFnOrPath;
        this.params = params;
        this.params = Object.assign({ debounceTime: 300, formKey: 'akitaForm', emitEvent: false, arrControlFactory: (/**
             * @param {?} v
             * @return {?}
             */
            v => this.builder.control(v)) }, params);
        this.isRootKeys = toBoolean(factoryFnOrPath) === false;
        this.isKeyBased = isString(factoryFnOrPath) || this.isRootKeys;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} form
     * @param {?=} builder
     * @return {THIS}
     */
    setForm(form, builder) {
        (/** @type {?} */ (this)).form = form;
        (/** @type {?} */ (this)).builder = builder;
        (/** @type {?} */ (this)).activate();
        return (/** @type {?} */ (this));
    }
    /**
     * @param {?=} initialState
     * @return {?}
     */
    reset(initialState) {
        /** @type {?} */
        let value;
        if (initialState) {
            value = initialState;
        }
        else {
            value = this.isKeyBased ? this.initialValue : ((/** @type {?} */ (this))).factoryFnOrPath();
        }
        if (this.isKeyBased) {
            Object.keys(this.initialValue).forEach((/**
             * @param {?} stateKey
             * @return {?}
             */
            stateKey => {
                /** @type {?} */
                const value = this.initialValue[stateKey];
                if (Array.isArray(value) && this.builder) {
                    /** @type {?} */
                    const formArray = this.form.controls[stateKey];
                    this.cleanArray(formArray);
                    value.forEach((/**
                     * @param {?} v
                     * @param {?} i
                     * @return {?}
                     */
                    (v, i) => {
                        this.form.get(stateKey).insert(i, ((/** @type {?} */ (this.params.arrControlFactory)))(v));
                    }));
                }
            }));
        }
        this.form.patchValue(value, { emitEvent: this.params.emitEvent });
        /** @type {?} */
        const storeValue = this.isKeyBased ? setValue(this.getQuery().getValue(), `${this.getStore().storeName}.${this.factoryFnOrPath}`, value) : { [this.params.formKey]: value };
        this.updateStore(storeValue);
    }
    /**
     * @private
     * @param {?} control
     * @return {?}
     */
    cleanArray(control) {
        while (control.length !== 0) {
            control.removeAt(0);
        }
    }
    /**
     * @private
     * @param {?} formValue
     * @param {?} root
     * @return {?}
     */
    resolveInitialValue(formValue, root) {
        if (!formValue)
            return;
        return Object.keys(formValue).reduce((/**
         * @param {?} acc
         * @param {?} stateKey
         * @return {?}
         */
        (acc, stateKey) => {
            /** @type {?} */
            const value = root[stateKey];
            if (Array.isArray(value) && this.builder) {
                /** @type {?} */
                const factory = this.params.arrControlFactory;
                this.cleanArray(this.form.get(stateKey));
                value.forEach((/**
                 * @param {?} v
                 * @param {?} i
                 * @return {?}
                 */
                (v, i) => {
                    this.form.get(stateKey).insert(i, ((/** @type {?} */ (factory)))(v));
                }));
            }
            acc[stateKey] = root[stateKey];
            return acc;
        }), {});
    }
    /**
     * @private
     * @return {?}
     */
    activate() {
        /** @type {?} */
        let path;
        if (this.isKeyBased) {
            if (this.isRootKeys) {
                this.initialValue = this.resolveInitialValue(this.form.value, this.getQuery().getValue());
                this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });
            }
            else {
                path = `${this.getStore().storeName}.${this.factoryFnOrPath}`;
                /** @type {?} */
                const root = getValue(this.getQuery().getValue(), path);
                this.initialValue = this.resolveInitialValue(root, root);
                this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });
            }
        }
        else {
            if (!((/** @type {?} */ (this.getQuery().getValue())))[this.params.formKey]) {
                logAction('@PersistNgFormPlugin activate');
                this.updateStore({ [this.params.formKey]: ((/** @type {?} */ (this))).factoryFnOrPath() });
            }
            /** @type {?} */
            const value = this.getQuery().getValue()[this.params.formKey];
            this.form.patchValue(value);
        }
        this.formChanges = this.form.valueChanges.pipe(debounceTime(this.params.debounceTime)).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            logAction('@PersistForm - Update');
            /** @type {?} */
            let newState;
            if (this.isKeyBased) {
                if (this.isRootKeys) {
                    newState = (/**
                     * @param {?} state
                     * @return {?}
                     */
                    state => (Object.assign({}, state, value)));
                }
                else {
                    newState = (/**
                     * @param {?} state
                     * @return {?}
                     */
                    state => setValue(state, path, value));
                }
            }
            else {
                newState = (/**
                 * @return {?}
                 */
                () => ({ [this.params.formKey]: value }));
            }
            this.updateStore(newState(this.getQuery().getValue()));
        }));
    }
    /**
     * @return {?}
     */
    destroy() {
        this.formChanges && this.formChanges.unsubscribe();
        this.form = null;
        this.builder = null;
    }
}
if (false) {
    /** @type {?} */
    PersistNgFormPlugin.prototype.formChanges;
    /**
     * @type {?}
     * @private
     */
    PersistNgFormPlugin.prototype.isRootKeys;
    /**
     * @type {?}
     * @private
     */
    PersistNgFormPlugin.prototype.form;
    /**
     * @type {?}
     * @private
     */
    PersistNgFormPlugin.prototype.isKeyBased;
    /**
     * @type {?}
     * @private
     */
    PersistNgFormPlugin.prototype.initialValue;
    /**
     * @type {?}
     * @private
     */
    PersistNgFormPlugin.prototype.builder;
    /**
     * @type {?}
     * @protected
     */
    PersistNgFormPlugin.prototype.query;
    /**
     * @type {?}
     * @private
     */
    PersistNgFormPlugin.prototype.factoryFnOrPath;
    /**
     * @type {?}
     * @private
     */
    PersistNgFormPlugin.prototype.params;
}
//# sourceMappingURL=data:application/json;base64,