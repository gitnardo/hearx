/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { filterNil } from '../filterNil';
import { toBoolean } from '../toBoolean';
import { getAkitaConfig } from '../config';
import { getValue } from '../getValueByString';
import { setValue } from '../setValueByString';
/**
 * @abstract
 * @template State
 */
export class AkitaPlugin {
    /**
     * @protected
     * @param {?} query
     * @param {?=} config
     */
    constructor(query, config) {
        this.query = query;
        if (config && config.resetFn) {
            if (getAkitaConfig().resettable) {
                this.onReset(config.resetFn);
            }
        }
    }
    /**
     * This method is responsible for getting access to the query.
     * @protected
     * @return {?}
     */
    getQuery() {
        return this.query;
    }
    /**
     * This method is responsible for getting access to the store.
     * @protected
     * @return {?}
     */
    getStore() {
        return this.getQuery().__store__;
    }
    /**
     * This method is responsible tells whether the plugin is entityBased or not.
     * @protected
     * @param {?} entityId
     * @return {?}
     */
    isEntityBased(entityId) {
        return toBoolean(entityId);
    }
    /**
     * This method is responsible for selecting the source; it can be the whole store or one entity.
     * @protected
     * @param {?} entityId
     * @param {?=} property
     * @return {?}
     */
    selectSource(entityId, property) {
        if (this.isEntityBased(entityId)) {
            return ((/** @type {?} */ (this.getQuery()))).selectEntity(entityId).pipe(filterNil);
        }
        if (property) {
            return this.getQuery().select((/**
             * @param {?} state
             * @return {?}
             */
            state => getValue(state, this.withStoreName(property))));
        }
        return this.getQuery().select();
    }
    /**
     * @protected
     * @param {?} entityId
     * @param {?=} property
     * @return {?}
     */
    getSource(entityId, property) {
        if (this.isEntityBased(entityId)) {
            return ((/** @type {?} */ (this.getQuery()))).getEntity(entityId);
        }
        /** @type {?} */
        const state = this.getQuery().getValue();
        if (property) {
            return getValue(state, this.withStoreName(property));
        }
        return state;
    }
    /**
     * @protected
     * @param {?} prop
     * @return {?}
     */
    withStoreName(prop) {
        return `${this.storeName}.${prop}`;
    }
    /**
     * @protected
     * @return {?}
     */
    get storeName() {
        return this.getStore().storeName;
    }
    /**
     * This method is responsible for updating the store or one entity; it can be the whole store or one entity.
     * @protected
     * @param {?} newState
     * @param {?=} entityId
     * @param {?=} property
     * @return {?}
     */
    updateStore(newState, entityId, property) {
        if (this.isEntityBased(entityId)) {
            this.getStore().update(entityId, newState);
        }
        else {
            if (property) {
                this.getStore()._setState((/**
                 * @param {?} state
                 * @return {?}
                 */
                state => {
                    return setValue(state, this.withStoreName(property), newState);
                }));
                return;
            }
            this.getStore()._setState((/**
             * @param {?} state
             * @return {?}
             */
            state => (Object.assign({}, state, newState))));
        }
    }
    /**
     * Function to invoke upon reset
     * @private
     * @param {?} fn
     * @return {?}
     */
    onReset(fn) {
        /** @type {?} */
        const original = this.getStore().reset;
        this.getStore().reset = (/**
         * @param {...?} params
         * @return {?}
         */
        (...params) => {
            /** It should run after the plugin destroy method */
            setTimeout((/**
             * @return {?}
             */
            () => {
                original.apply(this.getStore(), params);
                fn();
            }));
        });
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    AkitaPlugin.prototype.query;
    /**
     * This method is responsible for cleaning.
     * @abstract
     * @return {?}
     */
    AkitaPlugin.prototype.destroy = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRhdG9yYW1hL2FraXRhLyIsInNvdXJjZXMiOlsic3JjL3BsdWdpbnMvcGx1Z2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUMzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7OztBQUkvQyxNQUFNLE9BQWdCLFdBQVc7Ozs7OztJQUMvQixZQUFnQyxLQUFxQixFQUFFLE1BQStCO1FBQXRELFVBQUssR0FBTCxLQUFLLENBQWdCO1FBQ25ELElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUU7WUFDNUIsSUFBSSxjQUFjLEVBQUUsQ0FBQyxVQUFVLEVBQUU7Z0JBQy9CLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQzlCO1NBQ0Y7SUFDSCxDQUFDOzs7Ozs7SUFHUyxRQUFRO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDOzs7Ozs7SUFHUyxRQUFRO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLFNBQVMsQ0FBQztJQUNuQyxDQUFDOzs7Ozs7O0lBTVMsYUFBYSxDQUFDLFFBQWE7UUFDbkMsT0FBTyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7Ozs7Ozs7SUFHUyxZQUFZLENBQUMsUUFBYSxFQUFFLFFBQWlCO1FBQ3JELElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNoQyxPQUFPLENBQUMsbUJBQUEsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFzQixDQUFDLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUN2RjtRQUVELElBQUksUUFBUSxFQUFFO1lBQ1osT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTTs7OztZQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUMsQ0FBQztTQUN2RjtRQUVELE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2xDLENBQUM7Ozs7Ozs7SUFFUyxTQUFTLENBQUMsUUFBYSxFQUFFLFFBQWlCO1FBQ2xELElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNoQyxPQUFPLENBQUMsbUJBQUEsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFzQixDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3BFOztjQUVLLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxFQUFFO1FBRXhDLElBQUksUUFBUSxFQUFFO1lBQ1osT0FBTyxRQUFRLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztTQUN0RDtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7O0lBRVMsYUFBYSxDQUFDLElBQVk7UUFDbEMsT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxFQUFFLENBQUM7SUFDckMsQ0FBQzs7Ozs7SUFFRCxJQUFjLFNBQVM7UUFDckIsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsU0FBUyxDQUFDO0lBQ25DLENBQUM7Ozs7Ozs7OztJQUdTLFdBQVcsQ0FBQyxRQUFRLEVBQUUsUUFBUyxFQUFFLFFBQWlCO1FBQzFELElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNoQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztTQUM1QzthQUFNO1lBQ0wsSUFBSSxRQUFRLEVBQUU7Z0JBQ1osSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLFNBQVM7Ozs7Z0JBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQ2hDLE9BQU8sUUFBUSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO2dCQUNqRSxDQUFDLEVBQUMsQ0FBQztnQkFDSCxPQUFPO2FBQ1I7WUFDRCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsU0FBUzs7OztZQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsbUJBQU0sS0FBSyxFQUFLLFFBQVEsRUFBRyxFQUFDLENBQUM7U0FDakU7SUFDSCxDQUFDOzs7Ozs7O0lBS08sT0FBTyxDQUFDLEVBQVk7O2NBQ3BCLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSztRQUN0QyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSzs7OztRQUFHLENBQUMsR0FBRyxNQUFNLEVBQUUsRUFBRTtZQUNwQyxvREFBb0Q7WUFDcEQsVUFBVTs7O1lBQUMsR0FBRyxFQUFFO2dCQUNkLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUN4QyxFQUFFLEVBQUUsQ0FBQztZQUNQLENBQUMsRUFBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFBLENBQUM7SUFDSixDQUFDO0NBQ0Y7Ozs7OztJQXpGdUIsNEJBQStCOzs7Ozs7SUFtQnJELGdEQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFF1ZXJ5RW50aXR5IH0gZnJvbSAnLi4vcXVlcnlFbnRpdHknO1xuaW1wb3J0IHsgUXVlcnkgfSBmcm9tICcuLi9xdWVyeSc7XG5pbXBvcnQgeyBmaWx0ZXJOaWwgfSBmcm9tICcuLi9maWx0ZXJOaWwnO1xuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSAnLi4vdG9Cb29sZWFuJztcbmltcG9ydCB7IGdldEFraXRhQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7IGdldFZhbHVlIH0gZnJvbSAnLi4vZ2V0VmFsdWVCeVN0cmluZyc7XG5pbXBvcnQgeyBzZXRWYWx1ZSB9IGZyb20gJy4uL3NldFZhbHVlQnlTdHJpbmcnO1xuXG5leHBvcnQgdHlwZSBRdWVyaWVzPFN0YXRlPiA9IFF1ZXJ5PFN0YXRlPiB8IFF1ZXJ5RW50aXR5PFN0YXRlPjtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFraXRhUGx1Z2luPFN0YXRlID0gYW55PiB7XG4gIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcXVlcnk6IFF1ZXJpZXM8U3RhdGU+LCBjb25maWc/OiB7IHJlc2V0Rm4/OiBGdW5jdGlvbiB9KSB7XG4gICAgaWYgKGNvbmZpZyAmJiBjb25maWcucmVzZXRGbikge1xuICAgICAgaWYgKGdldEFraXRhQ29uZmlnKCkucmVzZXR0YWJsZSkge1xuICAgICAgICB0aGlzLm9uUmVzZXQoY29uZmlnLnJlc2V0Rm4pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKiBUaGlzIG1ldGhvZCBpcyByZXNwb25zaWJsZSBmb3IgZ2V0dGluZyBhY2Nlc3MgdG8gdGhlIHF1ZXJ5LiAqL1xuICBwcm90ZWN0ZWQgZ2V0UXVlcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnk7XG4gIH1cblxuICAvKiogVGhpcyBtZXRob2QgaXMgcmVzcG9uc2libGUgZm9yIGdldHRpbmcgYWNjZXNzIHRvIHRoZSBzdG9yZS4gKi9cbiAgcHJvdGVjdGVkIGdldFN0b3JlKCkge1xuICAgIHJldHVybiB0aGlzLmdldFF1ZXJ5KCkuX19zdG9yZV9fO1xuICB9XG5cbiAgLyoqIFRoaXMgbWV0aG9kIGlzIHJlc3BvbnNpYmxlIGZvciBjbGVhbmluZy4gKi9cbiAgcHVibGljIGFic3RyYWN0IGRlc3Ryb3koKTtcblxuICAvKiogVGhpcyBtZXRob2QgaXMgcmVzcG9uc2libGUgdGVsbHMgd2hldGhlciB0aGUgcGx1Z2luIGlzIGVudGl0eUJhc2VkIG9yIG5vdC4gICovXG4gIHByb3RlY3RlZCBpc0VudGl0eUJhc2VkKGVudGl0eUlkOiBhbnkpIHtcbiAgICByZXR1cm4gdG9Cb29sZWFuKGVudGl0eUlkKTtcbiAgfVxuXG4gIC8qKiBUaGlzIG1ldGhvZCBpcyByZXNwb25zaWJsZSBmb3Igc2VsZWN0aW5nIHRoZSBzb3VyY2U7IGl0IGNhbiBiZSB0aGUgd2hvbGUgc3RvcmUgb3Igb25lIGVudGl0eS4gKi9cbiAgcHJvdGVjdGVkIHNlbGVjdFNvdXJjZShlbnRpdHlJZDogYW55LCBwcm9wZXJ0eT86IHN0cmluZykge1xuICAgIGlmICh0aGlzLmlzRW50aXR5QmFzZWQoZW50aXR5SWQpKSB7XG4gICAgICByZXR1cm4gKHRoaXMuZ2V0UXVlcnkoKSBhcyBRdWVyeUVudGl0eTxTdGF0ZT4pLnNlbGVjdEVudGl0eShlbnRpdHlJZCkucGlwZShmaWx0ZXJOaWwpO1xuICAgIH1cblxuICAgIGlmIChwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0UXVlcnkoKS5zZWxlY3Qoc3RhdGUgPT4gZ2V0VmFsdWUoc3RhdGUsIHRoaXMud2l0aFN0b3JlTmFtZShwcm9wZXJ0eSkpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5nZXRRdWVyeSgpLnNlbGVjdCgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldFNvdXJjZShlbnRpdHlJZDogYW55LCBwcm9wZXJ0eT86IHN0cmluZyk6IGFueSB7XG4gICAgaWYgKHRoaXMuaXNFbnRpdHlCYXNlZChlbnRpdHlJZCkpIHtcbiAgICAgIHJldHVybiAodGhpcy5nZXRRdWVyeSgpIGFzIFF1ZXJ5RW50aXR5PFN0YXRlPikuZ2V0RW50aXR5KGVudGl0eUlkKTtcbiAgICB9XG5cbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMuZ2V0UXVlcnkoKS5nZXRWYWx1ZSgpO1xuXG4gICAgaWYgKHByb3BlcnR5KSB7XG4gICAgICByZXR1cm4gZ2V0VmFsdWUoc3RhdGUsIHRoaXMud2l0aFN0b3JlTmFtZShwcm9wZXJ0eSkpO1xuICAgIH1cblxuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuXG4gIHByb3RlY3RlZCB3aXRoU3RvcmVOYW1lKHByb3A6IHN0cmluZykge1xuICAgIHJldHVybiBgJHt0aGlzLnN0b3JlTmFtZX0uJHtwcm9wfWA7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0IHN0b3JlTmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdG9yZSgpLnN0b3JlTmFtZTtcbiAgfVxuXG4gIC8qKiBUaGlzIG1ldGhvZCBpcyByZXNwb25zaWJsZSBmb3IgdXBkYXRpbmcgdGhlIHN0b3JlIG9yIG9uZSBlbnRpdHk7IGl0IGNhbiBiZSB0aGUgd2hvbGUgc3RvcmUgb3Igb25lIGVudGl0eS4gKi9cbiAgcHJvdGVjdGVkIHVwZGF0ZVN0b3JlKG5ld1N0YXRlLCBlbnRpdHlJZD8sIHByb3BlcnR5Pzogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMuaXNFbnRpdHlCYXNlZChlbnRpdHlJZCkpIHtcbiAgICAgIHRoaXMuZ2V0U3RvcmUoKS51cGRhdGUoZW50aXR5SWQsIG5ld1N0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb3BlcnR5KSB7XG4gICAgICAgIHRoaXMuZ2V0U3RvcmUoKS5fc2V0U3RhdGUoc3RhdGUgPT4ge1xuICAgICAgICAgIHJldHVybiBzZXRWYWx1ZShzdGF0ZSwgdGhpcy53aXRoU3RvcmVOYW1lKHByb3BlcnR5KSwgbmV3U3RhdGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5nZXRTdG9yZSgpLl9zZXRTdGF0ZShzdGF0ZSA9PiAoeyAuLi5zdGF0ZSwgLi4ubmV3U3RhdGUgfSkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0byBpbnZva2UgdXBvbiByZXNldFxuICAgKi9cbiAgcHJpdmF0ZSBvblJlc2V0KGZuOiBGdW5jdGlvbikge1xuICAgIGNvbnN0IG9yaWdpbmFsID0gdGhpcy5nZXRTdG9yZSgpLnJlc2V0O1xuICAgIHRoaXMuZ2V0U3RvcmUoKS5yZXNldCA9ICguLi5wYXJhbXMpID0+IHtcbiAgICAgIC8qKiBJdCBzaG91bGQgcnVuIGFmdGVyIHRoZSBwbHVnaW4gZGVzdHJveSBtZXRob2QgKi9cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBvcmlnaW5hbC5hcHBseSh0aGlzLmdldFN0b3JlKCksIHBhcmFtcyk7XG4gICAgICAgIGZuKCk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG59XG4iXX0=