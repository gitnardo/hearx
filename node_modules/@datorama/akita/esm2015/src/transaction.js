/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BehaviorSubject, of, Subject } from 'rxjs';
import { logAction } from './actions';
import { tap } from 'rxjs/operators';
// @internal
/** @type {?} */
const transactionFinished = new Subject();
// @internal
/** @type {?} */
const transactionInProcess = new BehaviorSubject(false);
// @internal
/** @type {?} */
export const transactionManager = {
    activeTransactions: 0,
    batchTransaction: null
};
// @internal
/**
 * @return {?}
 */
export function startBatch() {
    if (!isTransactionInProcess()) {
        transactionManager.batchTransaction = new Subject();
    }
    transactionManager.activeTransactions++;
    transactionInProcess.next(true);
}
// @internal
/**
 * @return {?}
 */
export function endBatch() {
    if (--transactionManager.activeTransactions === 0) {
        transactionManager.batchTransaction.next(true);
        transactionManager.batchTransaction.complete();
        transactionInProcess.next(false);
        transactionFinished.next(true);
    }
}
// @internal
/**
 * @return {?}
 */
export function isTransactionInProcess() {
    return transactionManager.activeTransactions > 0;
}
// @internal
/**
 * @return {?}
 */
export function commit() {
    return transactionManager.batchTransaction ? transactionManager.batchTransaction.asObservable() : of(true);
}
/**
 *  A logical transaction.
 *  Use this transaction to optimize the dispatch of all the stores.
 *  The following code will update the store, BUT  emits only once
 *
 * \@example
 *  applyTransaction(() => {
 *    this.todosStore.add(new Todo(1, title));
 *    this.todosStore.add(new Todo(2, title));
 *  });
 *
 * @template T
 * @param {?} action
 * @param {?=} thisArg
 * @return {?}
 */
export function applyTransaction(action, thisArg = undefined) {
    startBatch();
    try {
        return action.apply(thisArg);
    }
    finally {
        logAction('@Transaction');
        endBatch();
    }
}
/**
 *  A logical transaction.
 *  Use this transaction to optimize the dispatch of all the stores.
 *
 *  The following code will update the store, BUT  emits only once.
 *
 * \@example
 * \@transaction
 *  addTodos() {
 *    this.todosStore.add(new Todo(1, title));
 *    this.todosStore.add(new Todo(2, title));
 *  }
 *
 *
 * @return {?}
 */
export function transaction() {
    return (/**
     * @param {?} target
     * @param {?} propertyKey
     * @param {?} descriptor
     * @return {?}
     */
    function (target, propertyKey, descriptor) {
        /** @type {?} */
        const originalMethod = descriptor.value;
        descriptor.value = (/**
         * @param {...?} args
         * @return {?}
         */
        function (...args) {
            return applyTransaction((/**
             * @return {?}
             */
            () => {
                return originalMethod.apply(this, args);
            }), this);
        });
        return descriptor;
    });
}
/**
 *
 * RxJS custom operator that wraps the callback inside transaction
 *
 * \@example
 *
 * return http.get().pipe(
 *    withTransaction(response > {
 *      store.setActive(1);
 *      store.update();
 *      store.updateEntity(1, {});
 *    })
 * )
 *
 * @template T
 * @param {?} next
 * @return {?}
 */
export function withTransaction(next) {
    return (/**
     * @param {?} source
     * @return {?}
     */
    function (source) {
        return source.pipe(tap((/**
         * @param {?} value
         * @return {?}
         */
        value => applyTransaction((/**
         * @return {?}
         */
        () => next(value))))));
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGF0b3JhbWEvYWtpdGEvIiwic291cmNlcyI6WyJzcmMvdHJhbnNhY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQWMsRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNoRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O01BRy9CLG1CQUFtQixHQUFHLElBQUksT0FBTyxFQUFFOzs7TUFHbkMsb0JBQW9CLEdBQUcsSUFBSSxlQUFlLENBQUMsS0FBSyxDQUFDOzs7QUFRdkQsTUFBTSxPQUFPLGtCQUFrQixHQUF1QjtJQUNwRCxrQkFBa0IsRUFBRSxDQUFDO0lBQ3JCLGdCQUFnQixFQUFFLElBQUk7Q0FDdkI7Ozs7O0FBR0QsTUFBTSxVQUFVLFVBQVU7SUFDeEIsSUFBSSxDQUFDLHNCQUFzQixFQUFFLEVBQUU7UUFDN0Isa0JBQWtCLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztLQUNyRDtJQUNELGtCQUFrQixDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDeEMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xDLENBQUM7Ozs7O0FBR0QsTUFBTSxVQUFVLFFBQVE7SUFDdEIsSUFBSSxFQUFFLGtCQUFrQixDQUFDLGtCQUFrQixLQUFLLENBQUMsRUFBRTtRQUNqRCxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0Msa0JBQWtCLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDL0Msb0JBQW9CLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNoQztBQUNILENBQUM7Ozs7O0FBR0QsTUFBTSxVQUFVLHNCQUFzQjtJQUNwQyxPQUFPLGtCQUFrQixDQUFDLGtCQUFrQixHQUFHLENBQUMsQ0FBQztBQUNuRCxDQUFDOzs7OztBQUdELE1BQU0sVUFBVSxNQUFNO0lBQ3BCLE9BQU8sa0JBQWtCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDN0csQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFjRCxNQUFNLFVBQVUsZ0JBQWdCLENBQUksTUFBZSxFQUFFLE9BQU8sR0FBRyxTQUFTO0lBQ3RFLFVBQVUsRUFBRSxDQUFDO0lBQ2IsSUFBSTtRQUNGLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUM5QjtZQUFTO1FBQ1IsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzFCLFFBQVEsRUFBRSxDQUFDO0tBQ1o7QUFDSCxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7OztBQWlCRCxNQUFNLFVBQVUsV0FBVztJQUN6Qjs7Ozs7O0lBQU8sVUFBUyxNQUFXLEVBQUUsV0FBbUIsRUFBRSxVQUE4Qjs7Y0FDeEUsY0FBYyxHQUFHLFVBQVUsQ0FBQyxLQUFLO1FBRXZDLFVBQVUsQ0FBQyxLQUFLOzs7O1FBQUcsVUFBUyxHQUFHLElBQUk7WUFDakMsT0FBTyxnQkFBZ0I7OztZQUFDLEdBQUcsRUFBRTtnQkFDM0IsT0FBTyxjQUFjLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUMxQyxDQUFDLEdBQUUsSUFBSSxDQUFDLENBQUM7UUFDWCxDQUFDLENBQUEsQ0FBQztRQUVGLE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUMsRUFBQztBQUNKLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkQsTUFBTSxVQUFVLGVBQWUsQ0FBSSxJQUF3QjtJQUN6RDs7OztJQUFPLFVBQVMsTUFBcUI7UUFDbkMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUc7Ozs7UUFBQyxLQUFLLENBQUMsRUFBRSxDQUFDLGdCQUFnQjs7O1FBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQ3hFLENBQUMsRUFBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIG9mLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBsb2dBY3Rpb24gfSBmcm9tICcuL2FjdGlvbnMnO1xuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vLyBAaW50ZXJuYWxcbmNvbnN0IHRyYW5zYWN0aW9uRmluaXNoZWQgPSBuZXcgU3ViamVjdCgpO1xuXG4vLyBAaW50ZXJuYWxcbmNvbnN0IHRyYW5zYWN0aW9uSW5Qcm9jZXNzID0gbmV3IEJlaGF2aW9yU3ViamVjdChmYWxzZSk7XG5cbmV4cG9ydCB0eXBlIFRyYW5zYWN0aW9uTWFuYWdlciA9IHtcbiAgYWN0aXZlVHJhbnNhY3Rpb25zOiBudW1iZXI7XG4gIGJhdGNoVHJhbnNhY3Rpb246IFN1YmplY3Q8Ym9vbGVhbj4gfCBudWxsO1xufTtcblxuLy8gQGludGVybmFsXG5leHBvcnQgY29uc3QgdHJhbnNhY3Rpb25NYW5hZ2VyOiBUcmFuc2FjdGlvbk1hbmFnZXIgPSB7XG4gIGFjdGl2ZVRyYW5zYWN0aW9uczogMCxcbiAgYmF0Y2hUcmFuc2FjdGlvbjogbnVsbFxufTtcblxuLy8gQGludGVybmFsXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRCYXRjaCgpIHtcbiAgaWYgKCFpc1RyYW5zYWN0aW9uSW5Qcm9jZXNzKCkpIHtcbiAgICB0cmFuc2FjdGlvbk1hbmFnZXIuYmF0Y2hUcmFuc2FjdGlvbiA9IG5ldyBTdWJqZWN0KCk7XG4gIH1cbiAgdHJhbnNhY3Rpb25NYW5hZ2VyLmFjdGl2ZVRyYW5zYWN0aW9ucysrO1xuICB0cmFuc2FjdGlvbkluUHJvY2Vzcy5uZXh0KHRydWUpO1xufVxuXG4vLyBAaW50ZXJuYWxcbmV4cG9ydCBmdW5jdGlvbiBlbmRCYXRjaCgpIHtcbiAgaWYgKC0tdHJhbnNhY3Rpb25NYW5hZ2VyLmFjdGl2ZVRyYW5zYWN0aW9ucyA9PT0gMCkge1xuICAgIHRyYW5zYWN0aW9uTWFuYWdlci5iYXRjaFRyYW5zYWN0aW9uLm5leHQodHJ1ZSk7XG4gICAgdHJhbnNhY3Rpb25NYW5hZ2VyLmJhdGNoVHJhbnNhY3Rpb24uY29tcGxldGUoKTtcbiAgICB0cmFuc2FjdGlvbkluUHJvY2Vzcy5uZXh0KGZhbHNlKTtcbiAgICB0cmFuc2FjdGlvbkZpbmlzaGVkLm5leHQodHJ1ZSk7XG4gIH1cbn1cblxuLy8gQGludGVybmFsXG5leHBvcnQgZnVuY3Rpb24gaXNUcmFuc2FjdGlvbkluUHJvY2VzcygpIHtcbiAgcmV0dXJuIHRyYW5zYWN0aW9uTWFuYWdlci5hY3RpdmVUcmFuc2FjdGlvbnMgPiAwO1xufVxuXG4vLyBAaW50ZXJuYWxcbmV4cG9ydCBmdW5jdGlvbiBjb21taXQoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gIHJldHVybiB0cmFuc2FjdGlvbk1hbmFnZXIuYmF0Y2hUcmFuc2FjdGlvbiA/IHRyYW5zYWN0aW9uTWFuYWdlci5iYXRjaFRyYW5zYWN0aW9uLmFzT2JzZXJ2YWJsZSgpIDogb2YodHJ1ZSk7XG59XG5cbi8qKlxuICogIEEgbG9naWNhbCB0cmFuc2FjdGlvbi5cbiAqICBVc2UgdGhpcyB0cmFuc2FjdGlvbiB0byBvcHRpbWl6ZSB0aGUgZGlzcGF0Y2ggb2YgYWxsIHRoZSBzdG9yZXMuXG4gKiAgVGhlIGZvbGxvd2luZyBjb2RlIHdpbGwgdXBkYXRlIHRoZSBzdG9yZSwgQlVUICBlbWl0cyBvbmx5IG9uY2VcbiAqXG4gKiAgQGV4YW1wbGVcbiAqICBhcHBseVRyYW5zYWN0aW9uKCgpID0+IHtcbiAqICAgIHRoaXMudG9kb3NTdG9yZS5hZGQobmV3IFRvZG8oMSwgdGl0bGUpKTtcbiAqICAgIHRoaXMudG9kb3NTdG9yZS5hZGQobmV3IFRvZG8oMiwgdGl0bGUpKTtcbiAqICB9KTtcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVRyYW5zYWN0aW9uPFQ+KGFjdGlvbjogKCkgPT4gVCwgdGhpc0FyZyA9IHVuZGVmaW5lZCk6IFQge1xuICBzdGFydEJhdGNoKCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGFjdGlvbi5hcHBseSh0aGlzQXJnKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBsb2dBY3Rpb24oJ0BUcmFuc2FjdGlvbicpO1xuICAgIGVuZEJhdGNoKCk7XG4gIH1cbn1cblxuLyoqXG4gKiAgQSBsb2dpY2FsIHRyYW5zYWN0aW9uLlxuICogIFVzZSB0aGlzIHRyYW5zYWN0aW9uIHRvIG9wdGltaXplIHRoZSBkaXNwYXRjaCBvZiBhbGwgdGhlIHN0b3Jlcy5cbiAqXG4gKiAgVGhlIGZvbGxvd2luZyBjb2RlIHdpbGwgdXBkYXRlIHRoZSBzdG9yZSwgQlVUICBlbWl0cyBvbmx5IG9uY2UuXG4gKlxuICogIEBleGFtcGxlXG4gKiAgQHRyYW5zYWN0aW9uXG4gKiAgYWRkVG9kb3MoKSB7XG4gKiAgICB0aGlzLnRvZG9zU3RvcmUuYWRkKG5ldyBUb2RvKDEsIHRpdGxlKSk7XG4gKiAgICB0aGlzLnRvZG9zU3RvcmUuYWRkKG5ldyBUb2RvKDIsIHRpdGxlKSk7XG4gKiAgfVxuICpcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2FjdGlvbigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHRhcmdldDogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nLCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IpIHtcbiAgICBjb25zdCBvcmlnaW5hbE1ldGhvZCA9IGRlc2NyaXB0b3IudmFsdWU7XG5cbiAgICBkZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgcmV0dXJuIGFwcGx5VHJhbnNhY3Rpb24oKCkgPT4ge1xuICAgICAgICByZXR1cm4gb3JpZ2luYWxNZXRob2QuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gIH07XG59XG5cbi8qKlxuICpcbiAqIFJ4SlMgY3VzdG9tIG9wZXJhdG9yIHRoYXQgd3JhcHMgdGhlIGNhbGxiYWNrIGluc2lkZSB0cmFuc2FjdGlvblxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogcmV0dXJuIGh0dHAuZ2V0KCkucGlwZShcbiAqICAgIHdpdGhUcmFuc2FjdGlvbihyZXNwb25zZSA+IHtcbiAqICAgICAgc3RvcmUuc2V0QWN0aXZlKDEpO1xuICogICAgICBzdG9yZS51cGRhdGUoKTtcbiAqICAgICAgc3RvcmUudXBkYXRlRW50aXR5KDEsIHt9KTtcbiAqICAgIH0pXG4gKiApXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gd2l0aFRyYW5zYWN0aW9uPFQ+KG5leHQ6ICh2YWx1ZTogVCkgPT4gdm9pZCkge1xuICByZXR1cm4gZnVuY3Rpb24oc291cmNlOiBPYnNlcnZhYmxlPFQ+KTogT2JzZXJ2YWJsZTxUPiB7XG4gICAgcmV0dXJuIHNvdXJjZS5waXBlKHRhcCh2YWx1ZSA9PiBhcHBseVRyYW5zYWN0aW9uKCgpID0+IG5leHQodmFsdWUpKSkpO1xuICB9O1xufVxuIl19