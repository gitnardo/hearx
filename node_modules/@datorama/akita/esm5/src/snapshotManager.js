/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { __stores__ } from './stores';
import { isString } from './isString';
import { setSkipStorageUpdate } from './persistState';
import { $$addStore } from './dispatchers';
import { filter, take } from 'rxjs/operators';
var SnapshotManager = /** @class */ (function () {
    function SnapshotManager() {
    }
    /**
     * Get a snapshot of the whole state or a specific stores
     * Use it ONLY for things such as saving the state in the server
     */
    /**
     * Get a snapshot of the whole state or a specific stores
     * Use it ONLY for things such as saving the state in the server
     * @param {?=} stores
     * @return {?}
     */
    SnapshotManager.prototype.getStoresSnapshot = /**
     * Get a snapshot of the whole state or a specific stores
     * Use it ONLY for things such as saving the state in the server
     * @param {?=} stores
     * @return {?}
     */
    function (stores) {
        if (stores === void 0) { stores = []; }
        /** @type {?} */
        var acc = {};
        /** @type {?} */
        var hasInclude = stores.length > 0;
        /** @type {?} */
        var keys = hasInclude ? stores : Object.keys(__stores__);
        for (var i = 0; i < keys.length; i++) {
            /** @type {?} */
            var storeName = keys[i];
            if (storeName !== 'router') {
                acc[storeName] = __stores__[storeName]._value();
            }
        }
        return acc;
    };
    /**
     * @param {?} stores
     * @param {?=} options
     * @return {?}
     */
    SnapshotManager.prototype.setStoresSnapshot = /**
     * @param {?} stores
     * @param {?=} options
     * @return {?}
     */
    function (stores, options) {
        /** @type {?} */
        var mergedOptions = tslib_1.__assign({ skipStorageUpdate: false, lazy: false }, options);
        mergedOptions.skipStorageUpdate && setSkipStorageUpdate(true);
        /** @type {?} */
        var normalizedStores = stores;
        if (isString(stores)) {
            normalizedStores = JSON.parse((/** @type {?} */ (normalizedStores)));
        }
        /** @type {?} */
        var size = Object.keys(normalizedStores).length;
        if (mergedOptions.lazy) {
            $$addStore
                .pipe(filter((/**
             * @param {?} name
             * @return {?}
             */
            function (name) { return normalizedStores.hasOwnProperty(name); })), take(size))
                .subscribe((/**
             * @param {?} name
             * @return {?}
             */
            function (name) { return __stores__[name]._setState((/**
             * @return {?}
             */
            function () { return normalizedStores[name]; })); }));
        }
        else {
            var _loop_1 = function (i, keys) {
                /** @type {?} */
                var storeName = keys[i];
                if (__stores__[storeName]) {
                    __stores__[storeName]._setState((/**
                     * @return {?}
                     */
                    function () { return normalizedStores[storeName]; }));
                }
            };
            for (var i = 0, keys = Object.keys(normalizedStores); i < keys.length; i++) {
                _loop_1(i, keys);
            }
        }
        mergedOptions.skipStorageUpdate && setSkipStorageUpdate(false);
    };
    return SnapshotManager;
}());
export { SnapshotManager };
/** @type {?} */
export var snapshotManager = new SnapshotManager();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25hcHNob3RNYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRhdG9yYW1hL2FraXRhLyIsInNvdXJjZXMiOlsic3JjL3NuYXBzaG90TWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDdEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN0QyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFOUM7SUFBQTtJQWlEQSxDQUFDO0lBaERDOzs7T0FHRzs7Ozs7OztJQUNILDJDQUFpQjs7Ozs7O0lBQWpCLFVBQWtCLE1BQXFCO1FBQXJCLHVCQUFBLEVBQUEsV0FBcUI7O1lBQ2pDLEdBQUcsR0FBRyxFQUFFOztZQUNOLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUM7O1lBQzlCLElBQUksR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDMUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7O2dCQUNoQyxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN2QixJQUFJLFNBQVMsS0FBSyxRQUFRLEVBQUU7Z0JBQzFCLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7YUFDakQ7U0FDRjtRQUVELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQzs7Ozs7O0lBRUQsMkNBQWlCOzs7OztJQUFqQixVQUFrQixNQUE2QyxFQUFFLE9BQXlEOztZQUNsSCxhQUFhLG9CQUFRLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBSyxPQUFPLENBQUU7UUFDbEYsYUFBYSxDQUFDLGlCQUFpQixJQUFJLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDOztZQUUxRCxnQkFBZ0IsR0FBRyxNQUFNO1FBRTdCLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3BCLGdCQUFnQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQUEsZ0JBQWdCLEVBQVUsQ0FBQyxDQUFDO1NBQzNEOztZQUVLLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsTUFBTTtRQUVqRCxJQUFJLGFBQWEsQ0FBQyxJQUFJLEVBQUU7WUFDdEIsVUFBVTtpQkFDUCxJQUFJLENBQ0gsTUFBTTs7OztZQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFyQyxDQUFxQyxFQUFDLEVBQ3JELElBQUksQ0FBQyxJQUFJLENBQUMsQ0FDWDtpQkFDQSxTQUFTOzs7O1lBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUzs7O1lBQUMsY0FBTSxPQUFBLGdCQUFnQixDQUFDLElBQUksQ0FBQyxFQUF0QixDQUFzQixFQUFDLEVBQXhELENBQXdELEVBQUMsQ0FBQztTQUNoRjthQUFNO29DQUNJLENBQUMsRUFBTSxJQUFJOztvQkFDWixTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDekIsSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDLEVBQUU7b0JBQ3pCLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTOzs7b0JBQUMsY0FBTSxPQUFBLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxFQUEzQixDQUEyQixFQUFDLENBQUM7aUJBQ3BFOztZQUpILEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFO3dCQUFqRSxDQUFDLEVBQU0sSUFBSTthQUtuQjtTQUNGO1FBRUQsYUFBYSxDQUFDLGlCQUFpQixJQUFJLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFDSCxzQkFBQztBQUFELENBQUMsQUFqREQsSUFpREM7OztBQUVELE1BQU0sS0FBTyxlQUFlLEdBQUcsSUFBSSxlQUFlLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX3N0b3Jlc19fIH0gZnJvbSAnLi9zdG9yZXMnO1xuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuL2lzU3RyaW5nJztcbmltcG9ydCB7IHNldFNraXBTdG9yYWdlVXBkYXRlIH0gZnJvbSAnLi9wZXJzaXN0U3RhdGUnO1xuaW1wb3J0IHsgJCRhZGRTdG9yZSB9IGZyb20gJy4vZGlzcGF0Y2hlcnMnO1xuaW1wb3J0IHsgZmlsdGVyLCB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5leHBvcnQgY2xhc3MgU25hcHNob3RNYW5hZ2VyIHtcbiAgLyoqXG4gICAqIEdldCBhIHNuYXBzaG90IG9mIHRoZSB3aG9sZSBzdGF0ZSBvciBhIHNwZWNpZmljIHN0b3Jlc1xuICAgKiBVc2UgaXQgT05MWSBmb3IgdGhpbmdzIHN1Y2ggYXMgc2F2aW5nIHRoZSBzdGF0ZSBpbiB0aGUgc2VydmVyXG4gICAqL1xuICBnZXRTdG9yZXNTbmFwc2hvdChzdG9yZXM6IHN0cmluZ1tdID0gW10pIHtcbiAgICBsZXQgYWNjID0ge307XG4gICAgY29uc3QgaGFzSW5jbHVkZSA9IHN0b3Jlcy5sZW5ndGggPiAwO1xuICAgIGNvbnN0IGtleXMgPSBoYXNJbmNsdWRlID8gc3RvcmVzIDogT2JqZWN0LmtleXMoX19zdG9yZXNfXyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgc3RvcmVOYW1lID0ga2V5c1tpXTtcbiAgICAgIGlmIChzdG9yZU5hbWUgIT09ICdyb3V0ZXInKSB7XG4gICAgICAgIGFjY1tzdG9yZU5hbWVdID0gX19zdG9yZXNfX1tzdG9yZU5hbWVdLl92YWx1ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH1cblxuICBzZXRTdG9yZXNTbmFwc2hvdChzdG9yZXM6IHsgW3N0b3JlTmFtZTogc3RyaW5nXTogYW55IH0gfCBzdHJpbmcsIG9wdGlvbnM/OiB7IHNraXBTdG9yYWdlVXBkYXRlPzogYm9vbGVhbjsgbGF6eT86IGJvb2xlYW4gfSkge1xuICAgIGNvbnN0IG1lcmdlZE9wdGlvbnMgPSB7IC4uLnsgc2tpcFN0b3JhZ2VVcGRhdGU6IGZhbHNlLCBsYXp5OiBmYWxzZSB9LCAuLi5vcHRpb25zIH07XG4gICAgbWVyZ2VkT3B0aW9ucy5za2lwU3RvcmFnZVVwZGF0ZSAmJiBzZXRTa2lwU3RvcmFnZVVwZGF0ZSh0cnVlKTtcblxuICAgIGxldCBub3JtYWxpemVkU3RvcmVzID0gc3RvcmVzO1xuXG4gICAgaWYgKGlzU3RyaW5nKHN0b3JlcykpIHtcbiAgICAgIG5vcm1hbGl6ZWRTdG9yZXMgPSBKU09OLnBhcnNlKG5vcm1hbGl6ZWRTdG9yZXMgYXMgc3RyaW5nKTtcbiAgICB9XG5cbiAgICBjb25zdCBzaXplID0gT2JqZWN0LmtleXMobm9ybWFsaXplZFN0b3JlcykubGVuZ3RoO1xuXG4gICAgaWYgKG1lcmdlZE9wdGlvbnMubGF6eSkge1xuICAgICAgJCRhZGRTdG9yZVxuICAgICAgICAucGlwZShcbiAgICAgICAgICBmaWx0ZXIobmFtZSA9PiBub3JtYWxpemVkU3RvcmVzLmhhc093blByb3BlcnR5KG5hbWUpKSxcbiAgICAgICAgICB0YWtlKHNpemUpXG4gICAgICAgIClcbiAgICAgICAgLnN1YnNjcmliZShuYW1lID0+IF9fc3RvcmVzX19bbmFtZV0uX3NldFN0YXRlKCgpID0+IG5vcm1hbGl6ZWRTdG9yZXNbbmFtZV0pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGtleXMgPSBPYmplY3Qua2V5cyhub3JtYWxpemVkU3RvcmVzKTsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc3RvcmVOYW1lID0ga2V5c1tpXTtcbiAgICAgICAgaWYgKF9fc3RvcmVzX19bc3RvcmVOYW1lXSkge1xuICAgICAgICAgIF9fc3RvcmVzX19bc3RvcmVOYW1lXS5fc2V0U3RhdGUoKCkgPT4gbm9ybWFsaXplZFN0b3Jlc1tzdG9yZU5hbWVdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIG1lcmdlZE9wdGlvbnMuc2tpcFN0b3JhZ2VVcGRhdGUgJiYgc2V0U2tpcFN0b3JhZ2VVcGRhdGUoZmFsc2UpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBzbmFwc2hvdE1hbmFnZXIgPSBuZXcgU25hcHNob3RNYW5hZ2VyKCk7XG4iXX0=