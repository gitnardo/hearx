/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __stores__ } from './stores';
import { isNil } from './isNil';
import { AkitaError } from './errors';
/** @enum {number} */
var StoreActions = {
    Update: 0,
    AddEntities: 1,
    SetEntities: 2,
    UpdateEntities: 3,
    RemoveEntities: 4,
    UpsertEntities: 5,
};
export { StoreActions };
StoreActions[StoreActions.Update] = 'Update';
StoreActions[StoreActions.AddEntities] = 'AddEntities';
StoreActions[StoreActions.SetEntities] = 'SetEntities';
StoreActions[StoreActions.UpdateEntities] = 'UpdateEntities';
StoreActions[StoreActions.RemoveEntities] = 'RemoveEntities';
StoreActions[StoreActions.UpsertEntities] = 'UpsertEntities';
/**
 * @record
 * @template Entity
 */
function RunStoreActionSetEntities() { }
if (false) {
    /** @type {?} */
    RunStoreActionSetEntities.prototype.payload;
}
/**
 * @record
 * @template Entity
 */
function RunStoreActionAddEntities() { }
if (false) {
    /** @type {?} */
    RunStoreActionAddEntities.prototype.payload;
}
/**
 * @record
 * @template Entity
 */
function RunStoreActionUpdateEntities() { }
if (false) {
    /** @type {?} */
    RunStoreActionUpdateEntities.prototype.payload;
}
/**
 * @record
 * @template Entity
 */
function RunStoreActionRemoveEntities() { }
if (false) {
    /** @type {?} */
    RunStoreActionRemoveEntities.prototype.payload;
}
/**
 * @record
 * @template Entity
 */
function RunStoreActionUpsertEntities() { }
if (false) {
    /** @type {?} */
    RunStoreActionUpsertEntities.prototype.payload;
}
/**
 * @record
 * @template State
 */
function RunStoreActionUpdate() { }
if (false) {
    /** @type {?} */
    RunStoreActionUpdate.prototype.payload;
}
/**
 * @template EntityOrState
 * @param {?} storeName
 * @param {?} action
 * @param {?} params
 * @return {?}
 */
export function runStoreAction(storeName, action, params) {
    /** @type {?} */
    var store = __stores__[storeName];
    if (isNil(store)) {
        throw new AkitaError(storeName + " doesn't exist");
    }
    switch (action) {
        case StoreActions.SetEntities: {
            var payload = (/** @type {?} */ (params)).payload;
            ((/** @type {?} */ (store))).set(payload.data);
            return;
        }
        case StoreActions.AddEntities: {
            var payload = (/** @type {?} */ (params)).payload;
            ((/** @type {?} */ (store))).add(payload.data, payload.params);
            return;
        }
        case StoreActions.UpdateEntities: {
            var payload = (/** @type {?} */ (params)).payload;
            ((/** @type {?} */ (store))).update(payload.entityIds, payload.data);
            return;
        }
        case StoreActions.RemoveEntities: {
            var payload = (/** @type {?} */ (params)).payload;
            ((/** @type {?} */ (store))).remove(payload.entityIds);
            return;
        }
        case StoreActions.UpsertEntities: {
            var payload = (/** @type {?} */ (params)).payload;
            if (payload.entityIds) {
                ((/** @type {?} */ (store))).upsert(payload.entityIds, payload.data);
            }
            else if (Array.isArray(payload.data)) {
                ((/** @type {?} */ (store))).upsertMany(payload.data);
            }
            else {
                ((/** @type {?} */ (store))).upsertMany([payload.data]);
            }
            return;
        }
        case StoreActions.Update: {
            var payload = (/** @type {?} */ (params)).payload;
            ((/** @type {?} */ (store))).update(payload.data);
            return;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuU3RvcmVBY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGF0b3JhbWEvYWtpdGEvIiwic291cmNlcyI6WyJzcmMvcnVuU3RvcmVBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFLdEMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNoQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDOzs7SUFHcEMsU0FBTTtJQUNOLGNBQVc7SUFDWCxjQUFXO0lBQ1gsaUJBQWM7SUFDZCxpQkFBYztJQUNkLGlCQUFjOzs7Ozs7Ozs7Ozs7O0FBR2hCLHdDQUlDOzs7SUFIQyw0Q0FFRTs7Ozs7O0FBR0osd0NBS0M7OztJQUpDLDRDQUdFOzs7Ozs7QUFHSiwyQ0FLQzs7O0lBSkMsK0NBR0U7Ozs7OztBQUdKLDJDQUlDOzs7SUFIQywrQ0FFRTs7Ozs7O0FBR0osMkNBS0M7OztJQUpDLCtDQUdFOzs7Ozs7QUFHSixtQ0FJQzs7O0lBSEMsdUNBRUU7Ozs7Ozs7OztBQXNFSixNQUFNLFVBQVUsY0FBYyxDQUM1QixTQUFpQixFQUNqQixNQUFvQixFQUNwQixNQUsrQzs7UUFFekMsS0FBSyxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUM7SUFFbkMsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDaEIsTUFBTSxJQUFJLFVBQVUsQ0FBSSxTQUFTLG1CQUFnQixDQUFDLENBQUM7S0FDcEQ7SUFFRCxRQUFRLE1BQU0sRUFBRTtRQUNkLEtBQUssWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3JCLElBQUEsNkNBQU87WUFDZixDQUFDLG1CQUFBLEtBQUssRUFBZSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QyxPQUFPO1NBQ1I7UUFDRCxLQUFLLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNyQixJQUFBLDZDQUFPO1lBQ2YsQ0FBQyxtQkFBQSxLQUFLLEVBQWUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN6RCxPQUFPO1NBQ1I7UUFFRCxLQUFLLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUN4QixJQUFBLDZDQUFPO1lBQ2YsQ0FBQyxtQkFBQSxLQUFLLEVBQWUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMvRCxPQUFPO1NBQ1I7UUFFRCxLQUFLLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUN4QixJQUFBLDZDQUFPO1lBQ2YsQ0FBQyxtQkFBQSxLQUFLLEVBQWUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDakQsT0FBTztTQUNSO1FBRUQsS0FBSyxZQUFZLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDeEIsSUFBQSw2Q0FBTztZQUNmLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRTtnQkFDckIsQ0FBQyxtQkFBQSxLQUFLLEVBQWUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNoRTtpQkFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUN0QyxDQUFDLG1CQUFBLEtBQUssRUFBZSxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNqRDtpQkFBTTtnQkFDTCxDQUFDLG1CQUFBLEtBQUssRUFBZSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDbkQ7WUFDRCxPQUFPO1NBQ1I7UUFFRCxLQUFLLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNoQixJQUFBLDZDQUFPO1lBQ2YsQ0FBQyxtQkFBQSxLQUFLLEVBQWUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDNUMsT0FBTztTQUNSO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19zdG9yZXNfXyB9IGZyb20gJy4vc3RvcmVzJztcbmltcG9ydCB7IElEUyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgQWRkRW50aXRpZXNPcHRpb25zIH0gZnJvbSAnLi9hZGRFbnRpdGllcyc7XG5pbXBvcnQgeyBFbnRpdHlTdG9yZSB9IGZyb20gJy4vZW50aXR5U3RvcmUnO1xuaW1wb3J0IHsgU2V0RW50aXRpZXMgfSBmcm9tICcuL3NldEVudGl0aWVzJztcbmltcG9ydCB7IGlzTmlsIH0gZnJvbSAnLi9pc05pbCc7XG5pbXBvcnQgeyBBa2l0YUVycm9yIH0gZnJvbSAnLi9lcnJvcnMnO1xuXG5leHBvcnQgZW51bSBTdG9yZUFjdGlvbnMge1xuICBVcGRhdGUsXG4gIEFkZEVudGl0aWVzLFxuICBTZXRFbnRpdGllcyxcbiAgVXBkYXRlRW50aXRpZXMsXG4gIFJlbW92ZUVudGl0aWVzLFxuICBVcHNlcnRFbnRpdGllc1xufVxuXG5pbnRlcmZhY2UgUnVuU3RvcmVBY3Rpb25TZXRFbnRpdGllczxFbnRpdHkgPSBhbnk+IHtcbiAgcGF5bG9hZDoge1xuICAgIGRhdGE6IFNldEVudGl0aWVzPEVudGl0eT47XG4gIH07XG59XG5cbmludGVyZmFjZSBSdW5TdG9yZUFjdGlvbkFkZEVudGl0aWVzPEVudGl0eSA9IGFueT4ge1xuICBwYXlsb2FkOiB7XG4gICAgZGF0YTogRW50aXR5W10gfCBFbnRpdHk7XG4gICAgcGFyYW1zPzogQWRkRW50aXRpZXNPcHRpb25zO1xuICB9O1xufVxuXG5pbnRlcmZhY2UgUnVuU3RvcmVBY3Rpb25VcGRhdGVFbnRpdGllczxFbnRpdHkgPSBhbnk+IHtcbiAgcGF5bG9hZDoge1xuICAgIGRhdGE6IFBhcnRpYWw8RW50aXR5PjtcbiAgICBlbnRpdHlJZHM6IElEUztcbiAgfTtcbn1cblxuaW50ZXJmYWNlIFJ1blN0b3JlQWN0aW9uUmVtb3ZlRW50aXRpZXM8RW50aXR5ID0gYW55PiB7XG4gIHBheWxvYWQ6IHtcbiAgICBlbnRpdHlJZHM6IElEUztcbiAgfTtcbn1cblxuaW50ZXJmYWNlIFJ1blN0b3JlQWN0aW9uVXBzZXJ0RW50aXRpZXM8RW50aXR5ID0gYW55PiB7XG4gIHBheWxvYWQ6IHtcbiAgICBkYXRhOiBQYXJ0aWFsPEVudGl0eT5bXSB8IFBhcnRpYWw8RW50aXR5PjtcbiAgICBlbnRpdHlJZHM/OiBJRFM7XG4gIH07XG59XG5cbmludGVyZmFjZSBSdW5TdG9yZUFjdGlvblVwZGF0ZTxTdGF0ZSA9IGFueT4ge1xuICBwYXlsb2FkOiB7XG4gICAgZGF0YTogUGFydGlhbDxTdGF0ZT47XG4gIH07XG59XG5cbi8qKlxuICogQGV4YW1wbGVcbiAqXG4gKiBydW5TdG9yZUFjdGlvbignYm9va3MnLCBTdG9yZUFjdGlvbnMuVXBkYXRlLCB7XG4gKiAgIHBheWxvYWQ6IHtcbiAqICAgIGRhdGE6IHsgZmlsdGVyOiAnTmV3IGZpbHRlcicgfVxuICogICB9XG4gKiB9KTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1blN0b3JlQWN0aW9uPFN0YXRlID0gYW55PihzdG9yZU5hbWU6IHN0cmluZywgYWN0aW9uOiBTdG9yZUFjdGlvbnMuVXBkYXRlLCBwYXJhbXM6IFJ1blN0b3JlQWN0aW9uVXBkYXRlPFN0YXRlPik7XG4vKipcbiAqIEBleGFtcGxlXG4gKlxuICogcnVuU3RvcmVBY3Rpb24oJ2Jvb2tzJywgU3RvcmVBY3Rpb25zLlJlbW92ZUVudGl0aWVzLCB7XG4gKiAgIHBheWxvYWQ6IHtcbiAqICAgIGVudGl0eUlkczogMlxuICogICB9XG4gKiB9KTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1blN0b3JlQWN0aW9uPEVudGl0eSA9IGFueT4oc3RvcmVOYW1lOiBzdHJpbmcsIGFjdGlvbjogU3RvcmVBY3Rpb25zLlJlbW92ZUVudGl0aWVzLCBwYXJhbXM6IFJ1blN0b3JlQWN0aW9uUmVtb3ZlRW50aXRpZXM8RW50aXR5Pik7XG4vKipcbiAqIEBleGFtcGxlXG4gKlxuICogcnVuU3RvcmVBY3Rpb24oJ2Jvb2tzJywgU3RvcmVBY3Rpb25zLlVwZGF0ZUVudGl0aWVzLCB7XG4gKiAgIHBheWxvYWQ6IHtcbiAqICAgIGRhdGE6IHsgdGl0bGU6ICdOZXcgdGl0bGUnIH0sXG4gKiAgICBlbnRpdHlJZHM6IDJcbiAqICAgfVxuICogfSk7XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydW5TdG9yZUFjdGlvbjxFbnRpdHkgPSBhbnk+KHN0b3JlTmFtZTogc3RyaW5nLCBhY3Rpb246IFN0b3JlQWN0aW9ucy5VcGRhdGVFbnRpdGllcywgcGFyYW1zOiBSdW5TdG9yZUFjdGlvblVwZGF0ZUVudGl0aWVzPEVudGl0eT4pO1xuLyoqXG4gKiBAZXhhbXBsZVxuICpcbiAqIHJ1blN0b3JlQWN0aW9uKCdib29rcycsIFN0b3JlQWN0aW9ucy5TZXRFbnRpdGllcywge1xuICogICBwYXlsb2FkOiB7XG4gKiAgICBkYXRhOiBbeyBpZDogMSB9LCB7IGlkOiAyIH1dXG4gKiAgIH1cbiAqIH0pO1xuICovXG5leHBvcnQgZnVuY3Rpb24gcnVuU3RvcmVBY3Rpb248RW50aXR5ID0gYW55PihzdG9yZU5hbWU6IHN0cmluZywgYWN0aW9uOiBTdG9yZUFjdGlvbnMuU2V0RW50aXRpZXMsIHBhcmFtczogUnVuU3RvcmVBY3Rpb25TZXRFbnRpdGllczxFbnRpdHk+KTtcbi8qKlxuICogQGV4YW1wbGVcbiAqXG4gKiBydW5TdG9yZUFjdGlvbignYm9va3MnLCBTdG9yZUFjdGlvbnMuQWRkRW50aXRpZXMsIHtcbiAqICAgcGF5bG9hZDoge1xuICogICAgZGF0YTogeyBpZDogMSB9XG4gKiAgIH1cbiAqIH0pO1xuICovXG5leHBvcnQgZnVuY3Rpb24gcnVuU3RvcmVBY3Rpb248RW50aXR5ID0gYW55PihzdG9yZU5hbWU6IHN0cmluZywgYWN0aW9uOiBTdG9yZUFjdGlvbnMuQWRkRW50aXRpZXMsIHBhcmFtczogUnVuU3RvcmVBY3Rpb25BZGRFbnRpdGllczxFbnRpdHk+KTtcbi8qKlxuICogQGV4YW1wbGVcbiAqXG4gKiBydW5TdG9yZUFjdGlvbignYm9va3MnLCBTdG9yZUFjdGlvbnMuVXBzZXJ0RW50aXRpZXMsIHtcbiAqICAgcGF5bG9hZDoge1xuICogICAgZGF0YTogeyB0aXRsZTogJ05ldyBUaXRsZScgfSxcbiAqICAgIGVudGl0eUlkczogWzEsIDJdXG4gKiAgIH1cbiAqIH0pO1xuICogcnVuU3RvcmVBY3Rpb24oJ2Jvb2tzJywgU3RvcmVBY3Rpb25zLlVwc2VydEVudGl0aWVzLCB7XG4gKiAgIHBheWxvYWQ6IHtcbiAqICAgIGRhdGE6IFt7IGlkOiAyLCB0aXRsZTogJ05ldyBUaXRsZScgfSwgeyBpZDogMywgdGl0bGU6ICdBbm90aGVyIHRpdGxlJ31dLFxuICogICB9XG4gKiB9KTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1blN0b3JlQWN0aW9uPEVudGl0eSA9IGFueT4oc3RvcmVOYW1lOiBzdHJpbmcsIGFjdGlvbjogU3RvcmVBY3Rpb25zLlVwc2VydEVudGl0aWVzLCBwYXJhbXM6IFJ1blN0b3JlQWN0aW9uVXBzZXJ0RW50aXRpZXM8RW50aXR5Pik7XG5leHBvcnQgZnVuY3Rpb24gcnVuU3RvcmVBY3Rpb248RW50aXR5T3JTdGF0ZSA9IGFueT4oXG4gIHN0b3JlTmFtZTogc3RyaW5nLFxuICBhY3Rpb246IFN0b3JlQWN0aW9ucyxcbiAgcGFyYW1zOlxuICAgIHwgUnVuU3RvcmVBY3Rpb25TZXRFbnRpdGllczxFbnRpdHlPclN0YXRlPlxuICAgIHwgUnVuU3RvcmVBY3Rpb25BZGRFbnRpdGllczxFbnRpdHlPclN0YXRlPlxuICAgIHwgUnVuU3RvcmVBY3Rpb25SZW1vdmVFbnRpdGllczxFbnRpdHlPclN0YXRlPlxuICAgIHwgUnVuU3RvcmVBY3Rpb25VcGRhdGVFbnRpdGllczxFbnRpdHlPclN0YXRlPlxuICAgIHwgUnVuU3RvcmVBY3Rpb25VcHNlcnRFbnRpdGllczxFbnRpdHlPclN0YXRlPlxuKSB7XG4gIGNvbnN0IHN0b3JlID0gX19zdG9yZXNfX1tzdG9yZU5hbWVdO1xuXG4gIGlmIChpc05pbChzdG9yZSkpIHtcbiAgICB0aHJvdyBuZXcgQWtpdGFFcnJvcihgJHtzdG9yZU5hbWV9IGRvZXNuJ3QgZXhpc3RgKTtcbiAgfVxuXG4gIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgY2FzZSBTdG9yZUFjdGlvbnMuU2V0RW50aXRpZXM6IHtcbiAgICAgIGNvbnN0IHsgcGF5bG9hZCB9ID0gcGFyYW1zIGFzIFJ1blN0b3JlQWN0aW9uU2V0RW50aXRpZXM7XG4gICAgICAoc3RvcmUgYXMgRW50aXR5U3RvcmUpLnNldChwYXlsb2FkLmRhdGEpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYXNlIFN0b3JlQWN0aW9ucy5BZGRFbnRpdGllczoge1xuICAgICAgY29uc3QgeyBwYXlsb2FkIH0gPSBwYXJhbXMgYXMgUnVuU3RvcmVBY3Rpb25BZGRFbnRpdGllcztcbiAgICAgIChzdG9yZSBhcyBFbnRpdHlTdG9yZSkuYWRkKHBheWxvYWQuZGF0YSwgcGF5bG9hZC5wYXJhbXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNhc2UgU3RvcmVBY3Rpb25zLlVwZGF0ZUVudGl0aWVzOiB7XG4gICAgICBjb25zdCB7IHBheWxvYWQgfSA9IHBhcmFtcyBhcyBSdW5TdG9yZUFjdGlvblVwZGF0ZUVudGl0aWVzO1xuICAgICAgKHN0b3JlIGFzIEVudGl0eVN0b3JlKS51cGRhdGUocGF5bG9hZC5lbnRpdHlJZHMsIHBheWxvYWQuZGF0YSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FzZSBTdG9yZUFjdGlvbnMuUmVtb3ZlRW50aXRpZXM6IHtcbiAgICAgIGNvbnN0IHsgcGF5bG9hZCB9ID0gcGFyYW1zIGFzIFJ1blN0b3JlQWN0aW9uUmVtb3ZlRW50aXRpZXM7XG4gICAgICAoc3RvcmUgYXMgRW50aXR5U3RvcmUpLnJlbW92ZShwYXlsb2FkLmVudGl0eUlkcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FzZSBTdG9yZUFjdGlvbnMuVXBzZXJ0RW50aXRpZXM6IHtcbiAgICAgIGNvbnN0IHsgcGF5bG9hZCB9ID0gcGFyYW1zIGFzIFJ1blN0b3JlQWN0aW9uVXBzZXJ0RW50aXRpZXM7XG4gICAgICBpZiAocGF5bG9hZC5lbnRpdHlJZHMpIHtcbiAgICAgICAgKHN0b3JlIGFzIEVudGl0eVN0b3JlKS51cHNlcnQocGF5bG9hZC5lbnRpdHlJZHMsIHBheWxvYWQuZGF0YSk7XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocGF5bG9hZC5kYXRhKSkge1xuICAgICAgICAoc3RvcmUgYXMgRW50aXR5U3RvcmUpLnVwc2VydE1hbnkocGF5bG9hZC5kYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIChzdG9yZSBhcyBFbnRpdHlTdG9yZSkudXBzZXJ0TWFueShbcGF5bG9hZC5kYXRhXSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FzZSBTdG9yZUFjdGlvbnMuVXBkYXRlOiB7XG4gICAgICBjb25zdCB7IHBheWxvYWQgfSA9IHBhcmFtcyBhcyBSdW5TdG9yZUFjdGlvblVwZGF0ZTtcbiAgICAgIChzdG9yZSBhcyBFbnRpdHlTdG9yZSkudXBkYXRlKHBheWxvYWQuZGF0YSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG59XG4iXX0=