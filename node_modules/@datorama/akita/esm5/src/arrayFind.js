/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { coerceArray } from './coerceArray';
import { DEFAULT_ID_KEY } from './defaultIDKey';
import { distinctUntilChanged, map } from 'rxjs/operators';
import { isArray } from './isArray';
import { isFunction } from './isFunction';
import { isEmpty } from './isEmpty';
// @internal
/**
 * @template T
 * @param {?} collection
 * @param {?} idsOrPredicate
 * @param {?} idKey
 * @return {?}
 */
export function find(collection, idsOrPredicate, idKey) {
    var e_1, _a, e_2, _b;
    /** @type {?} */
    var result = [];
    if (isFunction(idsOrPredicate)) {
        try {
            for (var collection_1 = tslib_1.__values(collection), collection_1_1 = collection_1.next(); !collection_1_1.done; collection_1_1 = collection_1.next()) {
                var entity = collection_1_1.value;
                if (idsOrPredicate(entity) === true) {
                    result.push(entity);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (collection_1_1 && !collection_1_1.done && (_a = collection_1.return)) _a.call(collection_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    else {
        /** @type {?} */
        var toSet = coerceArray(idsOrPredicate).reduce((/**
         * @param {?} acc
         * @param {?} current
         * @return {?}
         */
        function (acc, current) { return acc.add(current); }), new Set());
        try {
            for (var collection_2 = tslib_1.__values(collection), collection_2_1 = collection_2.next(); !collection_2_1.done; collection_2_1 = collection_2.next()) {
                var entity = collection_2_1.value;
                if (toSet.has(entity[idKey])) {
                    result.push(entity);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (collection_2_1 && !collection_2_1.done && (_b = collection_2.return)) _b.call(collection_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
    }
    return result;
}
// @internal
/**
 * @template T
 * @return {?}
 */
export function distinctUntilArrayItemChanged() {
    return distinctUntilChanged((/**
     * @param {?} prevCollection
     * @param {?} currentCollection
     * @return {?}
     */
    function (prevCollection, currentCollection) {
        if (prevCollection === currentCollection) {
            return true;
        }
        if (isArray(prevCollection) === false || isArray(currentCollection) === false) {
            return false;
        }
        if (isEmpty(prevCollection) && isEmpty(currentCollection)) {
            return true;
        }
        // if item is new in the current collection but not exist in the prev collection
        /** @type {?} */
        var hasNewItem = hasChange(currentCollection, prevCollection);
        if (hasNewItem) {
            return false;
        }
        /** @type {?} */
        var isOneOfItemReferenceChanged = hasChange(prevCollection, currentCollection);
        // return false means there is a change and we want to call next()
        return isOneOfItemReferenceChanged === false;
    }));
}
// @internal
/**
 * @template T
 * @param {?} first
 * @param {?} second
 * @return {?}
 */
function hasChange(first, second) {
    /** @type {?} */
    var hasChange = second.some((/**
     * @param {?} currentItem
     * @return {?}
     */
    function (currentItem) {
        /** @type {?} */
        var oldItem = first.find((/**
         * @param {?} prevItem
         * @return {?}
         */
        function (prevItem) { return prevItem === currentItem; }));
        return oldItem === undefined;
    }));
    return hasChange;
}
/**
 * @template T
 * @param {?} idsOrPredicate
 * @param {?=} idKey
 * @return {?}
 */
export function arrayFind(idsOrPredicate, idKey) {
    return (/**
     * @param {?} source
     * @return {?}
     */
    function (source) {
        return source.pipe(map((/**
         * @param {?} collection
         * @return {?}
         */
        function (collection) {
            // which means the user deleted the root entity or set the collection to nil
            if (isArray(collection) === false) {
                return collection;
            }
            return find(collection, idsOrPredicate, idKey || DEFAULT_ID_KEY);
        })), distinctUntilArrayItemChanged(), map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isArray(value) === false) {
                return value;
            }
            if (isArray(idsOrPredicate) || isFunction(idsOrPredicate)) {
                return value;
            }
            return value[0];
        })));
    });
}
//# sourceMappingURL=data:application/json;base64,