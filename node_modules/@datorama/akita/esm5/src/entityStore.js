/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { isEmpty } from './isEmpty';
import { setEntities } from './setEntities';
import { Store } from './store';
import { getActiveEntities } from './getActiveEntities';
import { addEntities } from './addEntities';
import { coerceArray } from './coerceArray';
import { removeEntities } from './removeEntities';
import { getInitialEntitiesState } from './getInitialEntitiesState';
import { isDefined } from './isDefined';
import { updateEntities } from './updateEntities';
import { transaction } from './transaction';
import { isNil } from './isNil';
import { isFunction } from './isFunction';
import { isUndefined } from './isUndefined';
import { logAction, setAction } from './actions';
import { isDev } from './env';
import { hasEntity } from './hasEntity';
import { Subject } from 'rxjs';
import { EntityActions } from './entityActions';
import { DEFAULT_ID_KEY } from './defaultIDKey';
/**
 *
 * Store for managing a collection of entities
 *
 * \@example
 *
 * export interface WidgetsState extends EntityState<Widget> { }
 *
 * \@StoreConfig({ name: 'widgets' })
 *  export class WidgetsStore extends EntityStore<WidgetsState> {
 *   constructor() {
 *     super();
 *   }
 * }
 *
 *
 * @template S, EntityType, IDType
 */
var EntityStore = /** @class */ (function (_super) {
    tslib_1.__extends(EntityStore, _super);
    function EntityStore(initialState, options) {
        if (initialState === void 0) { initialState = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, tslib_1.__assign({}, getInitialEntitiesState(), initialState), options) || this;
        _this.options = options;
        _this.entityActions = new Subject();
        return _this;
    }
    Object.defineProperty(EntityStore.prototype, "selectEntityAction$", {
        // @internal
        get: 
        // @internal
        /**
         * @return {?}
         */
        function () {
            return this.entityActions.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EntityStore.prototype, "idKey", {
        // @internal
        get: 
        // @internal
        /**
         * @return {?}
         */
        function () {
            return ((/** @type {?} */ (this.config))).idKey || this.options.idKey || DEFAULT_ID_KEY;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     * Replace current collection with provided collection
     *
     * @example
     *
     * this.store.set([Entity, Entity])
     * this.store.set({ids: [], entities: {}})
     * this.store.set({ 1: {}, 2: {}})
     *
     */
    /**
     *
     * Replace current collection with provided collection
     *
     * \@example
     *
     * this.store.set([Entity, Entity])
     * this.store.set({ids: [], entities: {}})
     * this.store.set({ 1: {}, 2: {}})
     *
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    EntityStore.prototype.set = /**
     *
     * Replace current collection with provided collection
     *
     * \@example
     *
     * this.store.set([Entity, Entity])
     * this.store.set({ids: [], entities: {}})
     * this.store.set({ 1: {}, 2: {}})
     *
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    function (entities, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        if (isNil(entities))
            return;
        isDev() && setAction('Set Entity');
        /** @type {?} */
        var isNativePreAdd = this.akitaPreAddEntity === EntityStore.prototype.akitaPreAddEntity;
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            /** @type {?} */
            var newState = setEntities({
                state: state,
                entities: entities,
                idKey: _this.idKey,
                preAddEntity: _this.akitaPreAddEntity,
                isNativePreAdd: isNativePreAdd
            });
            if (isUndefined(options.activeId) === false) {
                ((/** @type {?} */ (newState))).active = options.activeId;
            }
            return newState;
        }));
        this.setHasCache(true, { restartTTL: true });
        if (this.hasInitialUIState()) {
            this.handleUICreation();
        }
        this.entityActions.next({ type: EntityActions.Set, ids: this.ids });
    };
    /**
     * Add entities
     *
     * @example
     *
     * this.store.add([Entity, Entity])
     * this.store.add(Entity)
     * this.store.add(Entity, { prepend: true })
     *
     * this.store.add(Entity, { loading: false })
     */
    /**
     * Add entities
     *
     * \@example
     *
     * this.store.add([Entity, Entity])
     * this.store.add(Entity)
     * this.store.add(Entity, { prepend: true })
     *
     * this.store.add(Entity, { loading: false })
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    EntityStore.prototype.add = /**
     * Add entities
     *
     * \@example
     *
     * this.store.add([Entity, Entity])
     * this.store.add(Entity)
     * this.store.add(Entity, { prepend: true })
     *
     * this.store.add(Entity, { loading: false })
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    function (entities, options) {
        if (options === void 0) { options = { loading: false }; }
        /** @type {?} */
        var collection = coerceArray(entities);
        if (isEmpty(collection))
            return;
        /** @type {?} */
        var data = addEntities({
            state: this._value(),
            preAddEntity: this.akitaPreAddEntity,
            entities: collection,
            idKey: this.idKey,
            options: options
        });
        if (data) {
            isDev() && setAction('Add Entity');
            data.newState.loading = options.loading;
            this._setState((/**
             * @return {?}
             */
            function () { return data.newState; }));
            if (this.hasInitialUIState()) {
                this.handleUICreation(true);
            }
            this.entityActions.next({ type: EntityActions.Add, ids: data.newIds });
        }
    };
    /**
     * @param {?} idsOrFnOrState
     * @param {?=} newStateOrFn
     * @return {?}
     */
    EntityStore.prototype.update = /**
     * @param {?} idsOrFnOrState
     * @param {?=} newStateOrFn
     * @return {?}
     */
    function (idsOrFnOrState, newStateOrFn) {
        var _this = this;
        if (isUndefined(newStateOrFn)) {
            _super.prototype.update.call(this, (/** @type {?} */ (idsOrFnOrState)));
            return;
        }
        /** @type {?} */
        var ids = [];
        if (isFunction(idsOrFnOrState)) {
            // We need to filter according the predicate function
            ids = this.ids.filter((/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return ((/** @type {?} */ (idsOrFnOrState)))(_this.entities[id]); }));
        }
        else {
            // If it's nil we want all of them
            ids = isNil(idsOrFnOrState) ? this.ids : coerceArray((/** @type {?} */ (idsOrFnOrState)));
        }
        if (isEmpty(ids))
            return;
        isDev() && setAction('Update Entity', ids);
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            return updateEntities({
                idKey: _this.idKey,
                ids: ids,
                preUpdateEntity: _this.akitaPreUpdateEntity,
                state: state,
                newStateOrFn: newStateOrFn,
                producerFn: _this._producerFn
            });
        }));
        this.entityActions.next({ type: EntityActions.Update, ids: ids });
    };
    /**
     *
     * Create or update
     *
     * @example
     *
     * store.upsert(1, { active: true })
     * store.upsert([2, 3], { active: true })
     * store.upsert([2, 3], entity => ({ isOpen: !entity.isOpen}))
     *
     */
    /**
     *
     * Create or update
     *
     * \@example
     *
     * store.upsert(1, { active: true })
     * store.upsert([2, 3], { active: true })
     * store.upsert([2, 3], entity => ({ isOpen: !entity.isOpen}))
     *
     * @param {?} ids
     * @param {?} newState
     * @param {?=} options
     * @return {?}
     */
    EntityStore.prototype.upsert = /**
     *
     * Create or update
     *
     * \@example
     *
     * store.upsert(1, { active: true })
     * store.upsert([2, 3], { active: true })
     * store.upsert([2, 3], entity => ({ isOpen: !entity.isOpen}))
     *
     * @param {?} ids
     * @param {?} newState
     * @param {?=} options
     * @return {?}
     */
    function (ids, newState, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var toArray = coerceArray(ids);
        /** @type {?} */
        var predicate = (/**
         * @param {?} isUpdate
         * @return {?}
         */
        function (isUpdate) { return (/**
         * @param {?} id
         * @return {?}
         */
        function (id) { return hasEntity(_this.entities, id) === isUpdate; }); });
        /** @type {?} */
        var isClassBased = isFunction(options.baseClass);
        /** @type {?} */
        var updateIds = toArray.filter(predicate(true));
        /** @type {?} */
        var newEntities = toArray.filter(predicate(false)).map((/**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            var _a;
            /** @type {?} */
            var entity = isFunction(newState) ? newState((/** @type {?} */ ({}))) : newState;
            /** @type {?} */
            var withId = tslib_1.__assign({}, ((/** @type {?} */ (entity))), (_a = {}, _a[_this.idKey] = id, _a));
            if (isClassBased) {
                return new options.baseClass(withId);
            }
            return withId;
        }));
        // it can be any of the three types
        this.update((/** @type {?} */ (updateIds)), (/** @type {?} */ (newState)));
        this.add(newEntities);
        isDev() && logAction('Upsert Entity');
    };
    /**
     *
     * Upsert entity collection (idKey must be present)
     *
     * @example
     *
     * store.upsertMany([ { id: 1 }, { id: 2 }]);
     *
     * store.upsertMany([ { id: 1 }, { id: 2 }], { loading: true  });
     * store.upsertMany([ { id: 1 }, { id: 2 }], { baseClass: Todo  });
     *
     */
    /**
     *
     * Upsert entity collection (idKey must be present)
     *
     * \@example
     *
     * store.upsertMany([ { id: 1 }, { id: 2 }]);
     *
     * store.upsertMany([ { id: 1 }, { id: 2 }], { loading: true  });
     * store.upsertMany([ { id: 1 }, { id: 2 }], { baseClass: Todo  });
     *
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    EntityStore.prototype.upsertMany = /**
     *
     * Upsert entity collection (idKey must be present)
     *
     * \@example
     *
     * store.upsertMany([ { id: 1 }, { id: 2 }]);
     *
     * store.upsertMany([ { id: 1 }, { id: 2 }], { loading: true  });
     * store.upsertMany([ { id: 1 }, { id: 2 }], { baseClass: Todo  });
     *
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    function (entities, options) {
        if (options === void 0) { options = {}; }
        var e_1, _a;
        /** @type {?} */
        var addedIds = [];
        /** @type {?} */
        var updatedIds = [];
        /** @type {?} */
        var updatedEntities = {};
        try {
            // Update the state directly to optimize performance
            for (var entities_1 = tslib_1.__values(entities), entities_1_1 = entities_1.next(); !entities_1_1.done; entities_1_1 = entities_1.next()) {
                var entity = entities_1_1.value;
                /** @type {?} */
                var withPreCheckHook = this.akitaPreCheckEntity(entity);
                /** @type {?} */
                var id = withPreCheckHook[this.idKey];
                if (hasEntity(this.entities, id)) {
                    /** @type {?} */
                    var prev = this._value().entities[id];
                    /** @type {?} */
                    var merged = tslib_1.__assign({}, this._value().entities[id], withPreCheckHook);
                    /** @type {?} */
                    var next = options.baseClass ? new options.baseClass(merged) : merged;
                    /** @type {?} */
                    var withHook = this.akitaPreUpdateEntity(prev, next);
                    /** @type {?} */
                    var nextId = withHook[this.idKey];
                    updatedEntities[nextId] = withHook;
                    updatedIds.push(nextId);
                }
                else {
                    /** @type {?} */
                    var newEntity = options.baseClass ? new options.baseClass(withPreCheckHook) : withPreCheckHook;
                    /** @type {?} */
                    var withHook = this.akitaPreAddEntity(newEntity);
                    /** @type {?} */
                    var nextId = withHook[this.idKey];
                    addedIds.push(nextId);
                    updatedEntities[nextId] = withHook;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (entities_1_1 && !entities_1_1.done && (_a = entities_1.return)) _a.call(entities_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        isDev() && logAction('Upsert Many');
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return (tslib_1.__assign({}, state, { ids: addedIds.length ? tslib_1.__spread(state.ids, addedIds) : state.ids, entities: tslib_1.__assign({}, state.entities, updatedEntities), loading: !!options.loading })); }));
        updatedIds.length && this.entityActions.next({ type: EntityActions.Update, ids: updatedIds });
        addedIds.length && this.entityActions.next({ type: EntityActions.Add, ids: addedIds });
        if (addedIds.length && this.hasUIStore()) {
            this.handleUICreation(true);
        }
    };
    /**
     *
     * Replace one or more entities (except the id property)
     *
     *
     * @example
     *
     * this.store.replace(5, newEntity)
     * this.store.replace([1,2,3], newEntity)
     */
    /**
     *
     * Replace one or more entities (except the id property)
     *
     *
     * \@example
     *
     * this.store.replace(5, newEntity)
     * this.store.replace([1,2,3], newEntity)
     * @param {?} ids
     * @param {?} newState
     * @return {?}
     */
    EntityStore.prototype.replace = /**
     *
     * Replace one or more entities (except the id property)
     *
     *
     * \@example
     *
     * this.store.replace(5, newEntity)
     * this.store.replace([1,2,3], newEntity)
     * @param {?} ids
     * @param {?} newState
     * @return {?}
     */
    function (ids, newState) {
        var e_2, _a;
        /** @type {?} */
        var toArray = coerceArray(ids);
        if (isEmpty(toArray))
            return;
        /** @type {?} */
        var replaced = {};
        try {
            for (var toArray_1 = tslib_1.__values(toArray), toArray_1_1 = toArray_1.next(); !toArray_1_1.done; toArray_1_1 = toArray_1.next()) {
                var id = toArray_1_1.value;
                newState[this.idKey] = id;
                replaced[id] = newState;
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (toArray_1_1 && !toArray_1_1.done && (_a = toArray_1.return)) _a.call(toArray_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        isDev() && setAction('Replace Entity', ids);
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return (tslib_1.__assign({}, state, { entities: tslib_1.__assign({}, state.entities, replaced) })); }));
    };
    /**
     *
     * Move entity inside the collection
     *
     *
     * @example
     *
     * this.store.move(fromIndex, toIndex)
     */
    /**
     *
     * Move entity inside the collection
     *
     *
     * \@example
     *
     * this.store.move(fromIndex, toIndex)
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    EntityStore.prototype.move = /**
     *
     * Move entity inside the collection
     *
     *
     * \@example
     *
     * this.store.move(fromIndex, toIndex)
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    function (from, to) {
        /** @type {?} */
        var ids = this.ids.slice();
        ids.splice(to < 0 ? ids.length + to : to, 0, ids.splice(from, 1)[0]);
        isDev() && setAction('Move Entity');
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return (tslib_1.__assign({}, state, { entities: tslib_1.__assign({}, state.entities), ids: ids })); }));
    };
    /**
     * @param {?=} idsOrFn
     * @return {?}
     */
    EntityStore.prototype.remove = /**
     * @param {?=} idsOrFn
     * @return {?}
     */
    function (idsOrFn) {
        var _this = this;
        if (isEmpty(this.ids))
            return;
        /** @type {?} */
        var idPassed = isDefined(idsOrFn);
        // null means remove all
        /** @type {?} */
        var ids = [];
        if (isFunction(idsOrFn)) {
            ids = this.ids.filter((/**
             * @param {?} entityId
             * @return {?}
             */
            function (entityId) { return idsOrFn(_this.entities[entityId]); }));
        }
        else {
            ids = idPassed ? coerceArray(idsOrFn) : null;
        }
        if (isEmpty(ids))
            return;
        isDev() && setAction('Remove Entity', ids);
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return removeEntities({ state: state, ids: ids }); }));
        if (ids === null) {
            this.setHasCache(false);
        }
        this.handleUIRemove(ids);
        this.entityActions.next({ type: EntityActions.Remove, ids: ids });
    };
    /**
     *
     * Update the active entity
     *
     * @example
     *
     * this.store.updateActive({ completed: true })
     * this.store.updateActive(active => {
     *   return {
     *     config: {
     *      ..active.config,
     *      date
     *     }
     *   }
     * })
     */
    /**
     *
     * Update the active entity
     *
     * \@example
     *
     * this.store.updateActive({ completed: true })
     * this.store.updateActive(active => {
     *   return {
     *     config: {
     *      ..active.config,
     *      date
     *     }
     *   }
     * })
     * @param {?} newStateOrCallback
     * @return {?}
     */
    EntityStore.prototype.updateActive = /**
     *
     * Update the active entity
     *
     * \@example
     *
     * this.store.updateActive({ completed: true })
     * this.store.updateActive(active => {
     *   return {
     *     config: {
     *      ..active.config,
     *      date
     *     }
     *   }
     * })
     * @param {?} newStateOrCallback
     * @return {?}
     */
    function (newStateOrCallback) {
        /** @type {?} */
        var ids = coerceArray(this.active);
        isDev() && setAction('Update Active', ids);
        this.update(ids, (/** @type {?} */ (newStateOrCallback)));
    };
    /**
     * @param {?} idOrOptions
     * @return {?}
     */
    EntityStore.prototype.setActive = /**
     * @param {?} idOrOptions
     * @return {?}
     */
    function (idOrOptions) {
        /** @type {?} */
        var active = getActiveEntities(idOrOptions, this.ids, this.active);
        if (active === undefined) {
            return;
        }
        isDev() && setAction('Set Active', active);
        this._setActive(active);
    };
    /**
     * Add active entities
     *
     * @example
     *
     * store.addActive(2);
     * store.addActive([3, 4, 5]);
     */
    /**
     * Add active entities
     *
     * \@example
     *
     * store.addActive(2);
     * store.addActive([3, 4, 5]);
     * @template T
     * @param {?} ids
     * @return {?}
     */
    EntityStore.prototype.addActive = /**
     * Add active entities
     *
     * \@example
     *
     * store.addActive(2);
     * store.addActive([3, 4, 5]);
     * @template T
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        var _this = this;
        /** @type {?} */
        var toArray = coerceArray(ids);
        if (isEmpty(toArray))
            return;
        /** @type {?} */
        var everyExist = toArray.every((/**
         * @param {?} id
         * @return {?}
         */
        function (id) { return _this.active.indexOf(id) > -1; }));
        if (everyExist)
            return;
        isDev() && setAction('Add Active', ids);
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            /**
             * Protect against case that one of the items in the array exist
             * @type {?}
             */
            var uniques = Array.from(new Set(tslib_1.__spread(((/** @type {?} */ (state.active))), toArray)));
            return tslib_1.__assign({}, state, { active: uniques });
        }));
    };
    /**
     * Remove active entities
     *
     * @example
     *
     * store.removeActive(2)
     * store.removeActive([3, 4, 5])
     */
    /**
     * Remove active entities
     *
     * \@example
     *
     * store.removeActive(2)
     * store.removeActive([3, 4, 5])
     * @template T
     * @param {?} ids
     * @return {?}
     */
    EntityStore.prototype.removeActive = /**
     * Remove active entities
     *
     * \@example
     *
     * store.removeActive(2)
     * store.removeActive([3, 4, 5])
     * @template T
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        var _this = this;
        /** @type {?} */
        var toArray = coerceArray(ids);
        if (isEmpty(toArray))
            return;
        /** @type {?} */
        var someExist = toArray.some((/**
         * @param {?} id
         * @return {?}
         */
        function (id) { return _this.active.indexOf(id) > -1; }));
        if (!someExist)
            return;
        isDev() && setAction('Remove Active', ids);
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            return tslib_1.__assign({}, state, { active: Array.isArray(state.active) ? state.active.filter((/**
                 * @param {?} currentId
                 * @return {?}
                 */
                function (currentId) { return toArray.indexOf(currentId) === -1; })) : null });
        }));
    };
    /**
     * Toggle active entities
     *
     * @example
     *
     * store.toggle(2)
     * store.toggle([3, 4, 5])
     */
    /**
     * Toggle active entities
     *
     * \@example
     *
     * store.toggle(2)
     * store.toggle([3, 4, 5])
     * @template T
     * @param {?} ids
     * @return {?}
     */
    EntityStore.prototype.toggleActive = /**
     * Toggle active entities
     *
     * \@example
     *
     * store.toggle(2)
     * store.toggle([3, 4, 5])
     * @template T
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        var _this = this;
        /** @type {?} */
        var toArray = coerceArray(ids);
        /** @type {?} */
        var filterExists = (/**
         * @param {?} remove
         * @return {?}
         */
        function (remove) { return (/**
         * @param {?} id
         * @return {?}
         */
        function (id) { return _this.active.includes(id) === remove; }); });
        /** @type {?} */
        var remove = toArray.filter(filterExists(true));
        /** @type {?} */
        var add = toArray.filter(filterExists(false));
        this.removeActive(remove);
        this.addActive(add);
        isDev() && logAction('Toggle Active');
    };
    /**
     *
     * Create sub UI store for managing Entity's UI state
     *
     * @example
     *
     * export type ProductUI = {
     *   isLoading: boolean;
     *   isOpen: boolean
     * }
     *
     * interface ProductsUIState extends EntityState<ProductUI> {}
     *
     * export class ProductsStore EntityStore<ProductsState, Product> {
     *   ui: EntityUIStore<ProductsUIState, ProductUI>;
     *
     *   constructor() {
     *     super();
     *     this.createUIStore();
     *   }
     *
     * }
     */
    /**
     *
     * Create sub UI store for managing Entity's UI state
     *
     * \@example
     *
     * export type ProductUI = {
     *   isLoading: boolean;
     *   isOpen: boolean
     * }
     *
     * interface ProductsUIState extends EntityState<ProductUI> {}
     *
     * export class ProductsStore EntityStore<ProductsState, Product> {
     *   ui: EntityUIStore<ProductsUIState, ProductUI>;
     *
     *   constructor() {
     *     super();
     *     this.createUIStore();
     *   }
     *
     * }
     * @param {?=} initialState
     * @param {?=} storeConfig
     * @return {?}
     */
    EntityStore.prototype.createUIStore = /**
     *
     * Create sub UI store for managing Entity's UI state
     *
     * \@example
     *
     * export type ProductUI = {
     *   isLoading: boolean;
     *   isOpen: boolean
     * }
     *
     * interface ProductsUIState extends EntityState<ProductUI> {}
     *
     * export class ProductsStore EntityStore<ProductsState, Product> {
     *   ui: EntityUIStore<ProductsUIState, ProductUI>;
     *
     *   constructor() {
     *     super();
     *     this.createUIStore();
     *   }
     *
     * }
     * @param {?=} initialState
     * @param {?=} storeConfig
     * @return {?}
     */
    function (initialState, storeConfig) {
        if (initialState === void 0) { initialState = {}; }
        if (storeConfig === void 0) { storeConfig = {}; }
        /** @type {?} */
        var defaults = { name: "UI/" + this.storeName, idKey: this.idKey };
        this.ui = new EntityUIStore(initialState, tslib_1.__assign({}, defaults, storeConfig));
        return this.ui;
    };
    // @internal
    // @internal
    /**
     * @return {?}
     */
    EntityStore.prototype.destroy = 
    // @internal
    /**
     * @return {?}
     */
    function () {
        _super.prototype.destroy.call(this);
        if (this.ui instanceof EntityStore) {
            this.ui.destroy();
        }
        this.entityActions.complete();
    };
    // @internal
    // @internal
    /**
     * @param {?} _
     * @param {?} nextEntity
     * @return {?}
     */
    EntityStore.prototype.akitaPreUpdateEntity = 
    // @internal
    /**
     * @param {?} _
     * @param {?} nextEntity
     * @return {?}
     */
    function (_, nextEntity) {
        return (/** @type {?} */ (nextEntity));
    };
    // @internal
    // @internal
    /**
     * @param {?} newEntity
     * @return {?}
     */
    EntityStore.prototype.akitaPreAddEntity = 
    // @internal
    /**
     * @param {?} newEntity
     * @return {?}
     */
    function (newEntity) {
        return (/** @type {?} */ (newEntity));
    };
    // @internal
    // @internal
    /**
     * @param {?} newEntity
     * @return {?}
     */
    EntityStore.prototype.akitaPreCheckEntity = 
    // @internal
    /**
     * @param {?} newEntity
     * @return {?}
     */
    function (newEntity) {
        return newEntity;
    };
    Object.defineProperty(EntityStore.prototype, "ids", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this._value().ids;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EntityStore.prototype, "entities", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this._value().entities;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EntityStore.prototype, "active", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this._value().active;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} ids
     * @return {?}
     */
    EntityStore.prototype._setActive = /**
     * @private
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            return tslib_1.__assign({}, state, { active: ids });
        }));
    };
    /**
     * @private
     * @param {?=} add
     * @return {?}
     */
    EntityStore.prototype.handleUICreation = /**
     * @private
     * @param {?=} add
     * @return {?}
     */
    function (add) {
        var _this = this;
        if (add === void 0) { add = false; }
        /** @type {?} */
        var ids = this.ids;
        /** @type {?} */
        var isFunc = isFunction(this.ui._akitaCreateEntityFn);
        /** @type {?} */
        var uiEntities;
        /** @type {?} */
        var createFn = (/**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            var _a;
            /** @type {?} */
            var current = _this.entities[id];
            /** @type {?} */
            var ui = isFunc ? _this.ui._akitaCreateEntityFn(current) : _this.ui._akitaCreateEntityFn;
            return tslib_1.__assign((_a = {}, _a[_this.idKey] = current[_this.idKey], _a), ui);
        });
        if (add) {
            uiEntities = this.ids.filter((/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return isUndefined(_this.ui.entities[id]); })).map(createFn);
        }
        else {
            uiEntities = ids.map(createFn);
        }
        add ? this.ui.add(uiEntities) : this.ui.set(uiEntities);
    };
    /**
     * @private
     * @return {?}
     */
    EntityStore.prototype.hasInitialUIState = /**
     * @private
     * @return {?}
     */
    function () {
        return this.hasUIStore() && isUndefined(this.ui._akitaCreateEntityFn) === false;
    };
    /**
     * @private
     * @param {?} ids
     * @return {?}
     */
    EntityStore.prototype.handleUIRemove = /**
     * @private
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (this.hasUIStore()) {
            this.ui.remove(ids);
        }
    };
    /**
     * @private
     * @return {?}
     */
    EntityStore.prototype.hasUIStore = /**
     * @private
     * @return {?}
     */
    function () {
        return this.ui instanceof EntityUIStore;
    };
    var _a;
    tslib_1.__decorate([
        transaction(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object, Object, Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], EntityStore.prototype, "upsert", null);
    tslib_1.__decorate([
        transaction(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof T !== "undefined" && T) === "function" ? _a : Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], EntityStore.prototype, "toggleActive", null);
    return EntityStore;
}(Store));
export { EntityStore };
if (false) {
    /** @type {?} */
    EntityStore.prototype.ui;
    /**
     * @type {?}
     * @private
     */
    EntityStore.prototype.entityActions;
    /**
     * @type {?}
     * @protected
     */
    EntityStore.prototype.options;
}
// @internal
/**
 * @template UIState, DEPRECATED
 */
var 
// @internal
/**
 * @template UIState, DEPRECATED
 */
EntityUIStore = /** @class */ (function (_super) {
    tslib_1.__extends(EntityUIStore, _super);
    function EntityUIStore(initialState, storeConfig) {
        if (initialState === void 0) { initialState = {}; }
        if (storeConfig === void 0) { storeConfig = {}; }
        return _super.call(this, initialState, storeConfig) || this;
    }
    /**
     *
     * Set the initial UI entity state. This function will determine the entity's
     * initial state when we call `set()` or `add()`.
     *
     * @example
     *
     * constructor() {
     *   super();
     *   this.createUIStore().setInitialEntityState(entity => ({ isLoading: false, isOpen: true }));
     *   this.createUIStore().setInitialEntityState({ isLoading: false, isOpen: true });
     * }
     *
     */
    /**
     *
     * Set the initial UI entity state. This function will determine the entity's
     * initial state when we call `set()` or `add()`.
     *
     * \@example
     *
     * constructor() {
     *   super();
     *   this.createUIStore().setInitialEntityState(entity => ({ isLoading: false, isOpen: true }));
     *   this.createUIStore().setInitialEntityState({ isLoading: false, isOpen: true });
     * }
     *
     * @template EntityUI, Entity
     * @param {?} createFn
     * @return {?}
     */
    EntityUIStore.prototype.setInitialEntityState = /**
     *
     * Set the initial UI entity state. This function will determine the entity's
     * initial state when we call `set()` or `add()`.
     *
     * \@example
     *
     * constructor() {
     *   super();
     *   this.createUIStore().setInitialEntityState(entity => ({ isLoading: false, isOpen: true }));
     *   this.createUIStore().setInitialEntityState({ isLoading: false, isOpen: true });
     * }
     *
     * @template EntityUI, Entity
     * @param {?} createFn
     * @return {?}
     */
    function (createFn) {
        this._akitaCreateEntityFn = createFn;
    };
    return EntityUIStore;
}(EntityStore));
// @internal
/**
 * @template UIState, DEPRECATED
 */
export { EntityUIStore };
if (false) {
    /** @type {?} */
    EntityUIStore.prototype._akitaCreateEntityFn;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5U3RvcmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGF0b3JhbWEvYWtpdGEvIiwic291cmNlcyI6WyJzcmMvZW50aXR5U3RvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3BDLE9BQU8sRUFBZSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVoQyxPQUFPLEVBQUUsaUJBQWlCLEVBQW9CLE1BQU0scUJBQXFCLENBQUM7QUFDMUUsT0FBTyxFQUFFLFdBQVcsRUFBc0IsTUFBTSxlQUFlLENBQUM7QUFDaEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDcEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN4QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1QyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDMUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU1QyxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNqRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQzlCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDeEMsT0FBTyxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMz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dEIsVUFBdUIsR0FBYTtRQUNsQyxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUNyQixJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNyQjtJQUNILENBQUM7Ozs7O0lBRU8sZ0NBQVU7Ozs7SUFBbEI7UUFDRSxPQUFPLElBQUksQ0FBQyxFQUFFLFlBQVksYUFBYSxDQUFDO0lBQzFDLENBQUM7O0lBbllEO1FBREMsV0FBVyxFQUFFOzs7OzZDQW1CYjtJQTJQRDtRQURDLFdBQVcsRUFBRTs7cUVBQ3lCLENBQUMsb0JBQUQsQ0FBQzs7bURBUXZDO0lBK0dILGtCQUFDO0NBQUEsQUFoakJELENBQW9ILEtBQUssR0FnakJ4SDtTQWhqQlksV0FBVzs7O0lBQ3RCLHlCQUFtQzs7Ozs7SUFDbkMsb0NBQTREOzs7OztJQUVqQiw4QkFBbUQ7Ozs7OztBQStpQmhHOzs7Ozs7SUFBOEQseUNBQW9CO0lBR2hGLHVCQUFZLFlBQWlCLEVBQUUsV0FBNkM7UUFBaEUsNkJBQUEsRUFBQSxpQkFBaUI7UUFBRSw0QkFBQSxFQUFBLGdCQUE2QztlQUMxRSxrQkFBTSxZQUFZLEVBQUUsV0FBVyxDQUFDO0lBQ2xDLENBQUM7SUFFRDs7Ozs7Ozs7Ozs7OztPQWFHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFDSCw2Q0FBcUI7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBQXJCLFVBQW9ELFFBQTRDO1FBQzlGLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxRQUFRLENBQUM7SUFDdkMsQ0FBQztJQUNILG9CQUFDO0FBQUQsQ0FBQyxBQXhCRCxDQUE4RCxXQUFXLEdBd0J4RTs7Ozs7Ozs7SUF2QkMsNkNBQXVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNFbXB0eSB9IGZyb20gJy4vaXNFbXB0eSc7XG5pbXBvcnQgeyBTZXRFbnRpdGllcywgc2V0RW50aXRpZXMgfSBmcm9tICcuL3NldEVudGl0aWVzJztcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSAnLi9zdG9yZSc7XG5pbXBvcnQgeyBDb25zdHJ1Y3RvciwgRW50aXR5U3RhdGUsIEVudGl0eVVJQ3JlYXRlRm4sIElEUywgT3JBcnJheSwgU3RhdGVXaXRoQWN0aXZlLCBVcGRhdGVFbnRpdHlQcmVkaWNhdGUsIFVwZGF0ZVN0YXRlQ2FsbGJhY2ssIGdldEVudGl0eVR5cGUsIGdldElEVHlwZSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgZ2V0QWN0aXZlRW50aXRpZXMsIFNldEFjdGl2ZU9wdGlvbnMgfSBmcm9tICcuL2dldEFjdGl2ZUVudGl0aWVzJztcbmltcG9ydCB7IGFkZEVudGl0aWVzLCBBZGRFbnRpdGllc09wdGlvbnMgfSBmcm9tICcuL2FkZEVudGl0aWVzJztcbmltcG9ydCB7IGNvZXJjZUFycmF5IH0gZnJvbSAnLi9jb2VyY2VBcnJheSc7XG5pbXBvcnQgeyByZW1vdmVFbnRpdGllcyB9IGZyb20gJy4vcmVtb3ZlRW50aXRpZXMnO1xuaW1wb3J0IHsgZ2V0SW5pdGlhbEVudGl0aWVzU3RhdGUgfSBmcm9tICcuL2dldEluaXRpYWxFbnRpdGllc1N0YXRlJztcbmltcG9ydCB7IGlzRGVmaW5lZCB9IGZyb20gJy4vaXNEZWZpbmVkJztcbmltcG9ydCB7IHVwZGF0ZUVudGl0aWVzIH0gZnJvbSAnLi91cGRhdGVFbnRpdGllcyc7XG5pbXBvcnQgeyB0cmFuc2FjdGlvbiB9IGZyb20gJy4vdHJhbnNhY3Rpb24nO1xuaW1wb3J0IHsgaXNOaWwgfSBmcm9tICcuL2lzTmlsJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgaXNVbmRlZmluZWQgfSBmcm9tICcuL2lzVW5kZWZpbmVkJztcbmltcG9ydCB7IFN0b3JlQ29uZmlnT3B0aW9ucyB9IGZyb20gJy4vc3RvcmVDb25maWcnO1xuaW1wb3J0IHsgbG9nQWN0aW9uLCBzZXRBY3Rpb24gfSBmcm9tICcuL2FjdGlvbnMnO1xuaW1wb3J0IHsgaXNEZXYgfSBmcm9tICcuL2Vudic7XG5pbXBvcnQgeyBoYXNFbnRpdHkgfSBmcm9tICcuL2hhc0VudGl0eSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBFbnRpdHlBY3Rpb24sIEVudGl0eUFjdGlvbnMgfSBmcm9tICcuL2VudGl0eUFjdGlvbnMnO1xuaW1wb3J0IHsgREVGQVVMVF9JRF9LRVkgfSBmcm9tICcuL2RlZmF1bHRJREtleSc7XG5cbi8qKlxuICpcbiAqIFN0b3JlIGZvciBtYW5hZ2luZyBhIGNvbGxlY3Rpb24gb2YgZW50aXRpZXNcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGV4cG9ydCBpbnRlcmZhY2UgV2lkZ2V0c1N0YXRlIGV4dGVuZHMgRW50aXR5U3RhdGU8V2lkZ2V0PiB7IH1cbiAqXG4gKiBAU3RvcmVDb25maWcoeyBuYW1lOiAnd2lkZ2V0cycgfSlcbiAqICBleHBvcnQgY2xhc3MgV2lkZ2V0c1N0b3JlIGV4dGVuZHMgRW50aXR5U3RvcmU8V2lkZ2V0c1N0YXRlPiB7XG4gKiAgIGNvbnN0cnVjdG9yKCkge1xuICogICAgIHN1cGVyKCk7XG4gKiAgIH1cbiAqIH1cbiAqXG4gKlxuICovXG5leHBvcnQgY2xhc3MgRW50aXR5U3RvcmU8UyBleHRlbmRzIEVudGl0eVN0YXRlID0gYW55LCBFbnRpdHlUeXBlID0gZ2V0RW50aXR5VHlwZTxTPiwgSURUeXBlID0gZ2V0SURUeXBlPFM+PiBleHRlbmRzIFN0b3JlPFM+IHtcbiAgdWk6IEVudGl0eVVJU3RvcmU8YW55LCBFbnRpdHlUeXBlPjtcbiAgcHJpdmF0ZSBlbnRpdHlBY3Rpb25zID0gbmV3IFN1YmplY3Q8RW50aXR5QWN0aW9uPElEVHlwZT4+KCk7XG5cbiAgY29uc3RydWN0b3IoaW5pdGlhbFN0YXRlOiBQYXJ0aWFsPFM+ID0ge30sIHByb3RlY3RlZCBvcHRpb25zOiBQYXJ0aWFsPFN0b3JlQ29uZmlnT3B0aW9ucz4gPSB7fSkge1xuICAgIHN1cGVyKHsgLi4uZ2V0SW5pdGlhbEVudGl0aWVzU3RhdGUoKSwgLi4uaW5pdGlhbFN0YXRlIH0sIG9wdGlvbnMpO1xuICB9XG5cbiAgLy8gQGludGVybmFsXG4gIGdldCBzZWxlY3RFbnRpdHlBY3Rpb24kKCk6IE9ic2VydmFibGU8RW50aXR5QWN0aW9uPElEVHlwZT4+IHtcbiAgICByZXR1cm4gdGhpcy5lbnRpdHlBY3Rpb25zLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgLy8gQGludGVybmFsXG4gIGdldCBpZEtleSgpIHtcbiAgICByZXR1cm4gKHRoaXMuY29uZmlnIGFzIFN0b3JlQ29uZmlnT3B0aW9ucykuaWRLZXkgfHwgdGhpcy5vcHRpb25zLmlkS2V5IHx8IERFRkFVTFRfSURfS0VZO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIFJlcGxhY2UgY3VycmVudCBjb2xsZWN0aW9uIHdpdGggcHJvdmlkZWQgY29sbGVjdGlvblxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiB0aGlzLnN0b3JlLnNldChbRW50aXR5LCBFbnRpdHldKVxuICAgKiB0aGlzLnN0b3JlLnNldCh7aWRzOiBbXSwgZW50aXRpZXM6IHt9fSlcbiAgICogdGhpcy5zdG9yZS5zZXQoeyAxOiB7fSwgMjoge319KVxuICAgKlxuICAgKi9cbiAgc2V0KGVudGl0aWVzOiBTZXRFbnRpdGllczxFbnRpdHlUeXBlPiwgb3B0aW9uczogeyBhY3RpdmVJZD86IElEVHlwZSB8IG51bGwgfSA9IHt9KSB7XG4gICAgaWYgKGlzTmlsKGVudGl0aWVzKSkgcmV0dXJuO1xuXG4gICAgaXNEZXYoKSAmJiBzZXRBY3Rpb24oJ1NldCBFbnRpdHknKTtcblxuICAgIGNvbnN0IGlzTmF0aXZlUHJlQWRkID0gdGhpcy5ha2l0YVByZUFkZEVudGl0eSA9PT0gRW50aXR5U3RvcmUucHJvdG90eXBlLmFraXRhUHJlQWRkRW50aXR5O1xuXG4gICAgdGhpcy5fc2V0U3RhdGUoc3RhdGUgPT4ge1xuICAgICAgY29uc3QgbmV3U3RhdGUgPSBzZXRFbnRpdGllcyh7XG4gICAgICAgIHN0YXRlLFxuICAgICAgICBlbnRpdGllcyxcbiAgICAgICAgaWRLZXk6IHRoaXMuaWRLZXksXG4gICAgICAgIHByZUFkZEVudGl0eTogdGhpcy5ha2l0YVByZUFkZEVudGl0eSxcbiAgICAgICAgaXNOYXRpdmVQcmVBZGRcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaXNVbmRlZmluZWQob3B0aW9ucy5hY3RpdmVJZCkgPT09IGZhbHNlKSB7XG4gICAgICAgIChuZXdTdGF0ZSBhcyBhbnkpLmFjdGl2ZSA9IG9wdGlvbnMuYWN0aXZlSWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICB9KTtcblxuICAgIHRoaXMuc2V0SGFzQ2FjaGUodHJ1ZSwgeyByZXN0YXJ0VFRMOiB0cnVlIH0pO1xuXG4gICAgaWYgKHRoaXMuaGFzSW5pdGlhbFVJU3RhdGUoKSkge1xuICAgICAgdGhpcy5oYW5kbGVVSUNyZWF0aW9uKCk7XG4gICAgfVxuXG4gICAgdGhpcy5lbnRpdHlBY3Rpb25zLm5leHQoeyB0eXBlOiBFbnRpdHlBY3Rpb25zLlNldCwgaWRzOiB0aGlzLmlkcyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgZW50aXRpZXNcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogdGhpcy5zdG9yZS5hZGQoW0VudGl0eSwgRW50aXR5XSlcbiAgICogdGhpcy5zdG9yZS5hZGQoRW50aXR5KVxuICAgKiB0aGlzLnN0b3JlLmFkZChFbnRpdHksIHsgcHJlcGVuZDogdHJ1ZSB9KVxuICAgKlxuICAgKiB0aGlzLnN0b3JlLmFkZChFbnRpdHksIHsgbG9hZGluZzogZmFsc2UgfSlcbiAgICovXG4gIGFkZChlbnRpdGllczogT3JBcnJheTxFbnRpdHlUeXBlPiwgb3B0aW9uczogQWRkRW50aXRpZXNPcHRpb25zID0geyBsb2FkaW5nOiBmYWxzZSB9KSB7XG4gICAgY29uc3QgY29sbGVjdGlvbiA9IGNvZXJjZUFycmF5KGVudGl0aWVzKTtcblxuICAgIGlmIChpc0VtcHR5KGNvbGxlY3Rpb24pKSByZXR1cm47XG5cbiAgICBjb25zdCBkYXRhID0gYWRkRW50aXRpZXMoe1xuICAgICAgc3RhdGU6IHRoaXMuX3ZhbHVlKCksXG4gICAgICBwcmVBZGRFbnRpdHk6IHRoaXMuYWtpdGFQcmVBZGRFbnRpdHksXG4gICAgICBlbnRpdGllczogY29sbGVjdGlvbixcbiAgICAgIGlkS2V5OiB0aGlzLmlkS2V5LFxuICAgICAgb3B0aW9uc1xuICAgIH0pO1xuXG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIGlzRGV2KCkgJiYgc2V0QWN0aW9uKCdBZGQgRW50aXR5Jyk7XG4gICAgICBkYXRhLm5ld1N0YXRlLmxvYWRpbmcgPSBvcHRpb25zLmxvYWRpbmc7XG5cbiAgICAgIHRoaXMuX3NldFN0YXRlKCgpID0+IGRhdGEubmV3U3RhdGUpO1xuXG4gICAgICBpZiAodGhpcy5oYXNJbml0aWFsVUlTdGF0ZSgpKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlVUlDcmVhdGlvbih0cnVlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5lbnRpdHlBY3Rpb25zLm5leHQoeyB0eXBlOiBFbnRpdHlBY3Rpb25zLkFkZCwgaWRzOiBkYXRhLm5ld0lkcyB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogVXBkYXRlIGVudGl0aWVzXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHN0b3JlLnVwZGF0ZSgxLCBlbnRpdHkgPT4gLi4uKVxuICAgKiBzdG9yZS51cGRhdGUoWzEsIDIsIDNdLCBlbnRpdHkgPT4gLi4uKVxuICAgKiBzdG9yZS51cGRhdGUobnVsbCwgZW50aXR5ID0+IC4uLilcbiAgICovXG4gIHVwZGF0ZShpZDogT3JBcnJheTxJRFR5cGU+IHwgbnVsbCwgbmV3U3RhdGVGbjogVXBkYXRlU3RhdGVDYWxsYmFjazxFbnRpdHlUeXBlPik7XG4gIC8qKlxuICAgKiBzdG9yZS51cGRhdGUoMSwgeyBuYW1lOiBuZXdOYW1lIH0pXG4gICAqL1xuICB1cGRhdGUoaWQ6IE9yQXJyYXk8SURUeXBlPiB8IG51bGwsIG5ld1N0YXRlOiBQYXJ0aWFsPEVudGl0eVR5cGU+KTtcbiAgLyoqXG4gICAqIHN0b3JlLnVwZGF0ZShlbnRpdHkgPT4gZW50aXR5LnByaWNlID4gMywgZW50aXR5ID0+ICh7IG5hbWU6IG5ld05hbWUgfSkpXG4gICAqL1xuICB1cGRhdGUocHJlZGljYXRlOiBVcGRhdGVFbnRpdHlQcmVkaWNhdGU8RW50aXR5VHlwZT4sIG5ld1N0YXRlRm46IFVwZGF0ZVN0YXRlQ2FsbGJhY2s8RW50aXR5VHlwZT4pO1xuICAvKipcbiAgICogc3RvcmUudXBkYXRlKGVudGl0eSA9PiBlbnRpdHkucHJpY2UgPiAzLCB7IG5hbWU6IG5ld05hbWUgfSlcbiAgICovXG4gIHVwZGF0ZShwcmVkaWNhdGU6IFVwZGF0ZUVudGl0eVByZWRpY2F0ZTxFbnRpdHlUeXBlPiwgbmV3U3RhdGU6IFBhcnRpYWw8RW50aXR5VHlwZT4pO1xuICAvKiogU3VwcG9ydCBub24tZW50aXR5IHVwZGF0ZXMgKi9cbiAgdXBkYXRlKG5ld1N0YXRlOiBVcGRhdGVTdGF0ZUNhbGxiYWNrPFM+KTtcbiAgdXBkYXRlKG5ld1N0YXRlOiBQYXJ0aWFsPFM+KTtcbiAgdXBkYXRlKFxuICAgIGlkc09yRm5PclN0YXRlOiBPckFycmF5PElEVHlwZT4gfCBudWxsIHwgUGFydGlhbDxTPiB8IFVwZGF0ZVN0YXRlQ2FsbGJhY2s8Uz4gfCBVcGRhdGVFbnRpdHlQcmVkaWNhdGU8RW50aXR5VHlwZT4sXG4gICAgbmV3U3RhdGVPckZuPzogVXBkYXRlU3RhdGVDYWxsYmFjazxFbnRpdHlUeXBlPiB8IFBhcnRpYWw8RW50aXR5VHlwZT4gfCBQYXJ0aWFsPFM+XG4gICkge1xuICAgIGlmIChpc1VuZGVmaW5lZChuZXdTdGF0ZU9yRm4pKSB7XG4gICAgICBzdXBlci51cGRhdGUoaWRzT3JGbk9yU3RhdGUgYXMgUGFydGlhbDxTPik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBpZHM6IElEVHlwZVtdID0gW107XG5cbiAgICBpZiAoaXNGdW5jdGlvbihpZHNPckZuT3JTdGF0ZSkpIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gZmlsdGVyIGFjY29yZGluZyB0aGUgcHJlZGljYXRlIGZ1bmN0aW9uXG4gICAgICBpZHMgPSB0aGlzLmlkcy5maWx0ZXIoaWQgPT4gKGlkc09yRm5PclN0YXRlIGFzIFVwZGF0ZUVudGl0eVByZWRpY2F0ZTxFbnRpdHlUeXBlPikodGhpcy5lbnRpdGllc1tpZF0pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgaXQncyBuaWwgd2Ugd2FudCBhbGwgb2YgdGhlbVxuICAgICAgaWRzID0gaXNOaWwoaWRzT3JGbk9yU3RhdGUpID8gdGhpcy5pZHMgOiBjb2VyY2VBcnJheShpZHNPckZuT3JTdGF0ZSBhcyBPckFycmF5PElEVHlwZT4pO1xuICAgIH1cblxuICAgIGlmIChpc0VtcHR5KGlkcykpIHJldHVybjtcblxuICAgIGlzRGV2KCkgJiYgc2V0QWN0aW9uKCdVcGRhdGUgRW50aXR5JywgaWRzKTtcbiAgICB0aGlzLl9zZXRTdGF0ZShzdGF0ZSA9PlxuICAgICAgdXBkYXRlRW50aXRpZXMoe1xuICAgICAgICBpZEtleTogdGhpcy5pZEtleSxcbiAgICAgICAgaWRzLFxuICAgICAgICBwcmVVcGRhdGVFbnRpdHk6IHRoaXMuYWtpdGFQcmVVcGRhdGVFbnRpdHksXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBuZXdTdGF0ZU9yRm4sXG4gICAgICAgIHByb2R1Y2VyRm46IHRoaXMuX3Byb2R1Y2VyRm5cbiAgICAgIH0pXG4gICAgKTtcblxuICAgIHRoaXMuZW50aXR5QWN0aW9ucy5uZXh0KHsgdHlwZTogRW50aXR5QWN0aW9ucy5VcGRhdGUsIGlkcyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBDcmVhdGUgb3IgdXBkYXRlXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHN0b3JlLnVwc2VydCgxLCB7IGFjdGl2ZTogdHJ1ZSB9KVxuICAgKiBzdG9yZS51cHNlcnQoWzIsIDNdLCB7IGFjdGl2ZTogdHJ1ZSB9KVxuICAgKiBzdG9yZS51cHNlcnQoWzIsIDNdLCBlbnRpdHkgPT4gKHsgaXNPcGVuOiAhZW50aXR5LmlzT3Blbn0pKVxuICAgKlxuICAgKi9cbiAgQHRyYW5zYWN0aW9uKClcbiAgdXBzZXJ0KGlkczogT3JBcnJheTxJRFR5cGU+LCBuZXdTdGF0ZTogUGFydGlhbDxFbnRpdHlUeXBlPiB8IEVudGl0eVR5cGUgfCBVcGRhdGVTdGF0ZUNhbGxiYWNrPEVudGl0eVR5cGU+IHwgRW50aXR5VHlwZVtdLCBvcHRpb25zOiB7IGJhc2VDbGFzcz86IENvbnN0cnVjdG9yIH0gPSB7fSkge1xuICAgIGNvbnN0IHRvQXJyYXkgPSBjb2VyY2VBcnJheShpZHMpO1xuICAgIGNvbnN0IHByZWRpY2F0ZSA9IGlzVXBkYXRlID0+IGlkID0+IGhhc0VudGl0eSh0aGlzLmVudGl0aWVzLCBpZCkgPT09IGlzVXBkYXRlO1xuICAgIGNvbnN0IGlzQ2xhc3NCYXNlZCA9IGlzRnVuY3Rpb24ob3B0aW9ucy5iYXNlQ2xhc3MpO1xuICAgIGNvbnN0IHVwZGF0ZUlkcyA9IHRvQXJyYXkuZmlsdGVyKHByZWRpY2F0ZSh0cnVlKSk7XG4gICAgY29uc3QgbmV3RW50aXRpZXMgPSB0b0FycmF5LmZpbHRlcihwcmVkaWNhdGUoZmFsc2UpKS5tYXAoaWQgPT4ge1xuICAgICAgbGV0IGVudGl0eSA9IGlzRnVuY3Rpb24obmV3U3RhdGUpID8gbmV3U3RhdGUoe30gYXMgRW50aXR5VHlwZSkgOiBuZXdTdGF0ZTtcbiAgICAgIGNvbnN0IHdpdGhJZCA9IHsgLi4uKGVudGl0eSBhcyBFbnRpdHlUeXBlKSwgW3RoaXMuaWRLZXldOiBpZCB9O1xuICAgICAgaWYgKGlzQ2xhc3NCYXNlZCkge1xuICAgICAgICByZXR1cm4gbmV3IG9wdGlvbnMuYmFzZUNsYXNzKHdpdGhJZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd2l0aElkO1xuICAgIH0pO1xuXG4gICAgLy8gaXQgY2FuIGJlIGFueSBvZiB0aGUgdGhyZWUgdHlwZXNcbiAgICB0aGlzLnVwZGF0ZSh1cGRhdGVJZHMgYXMgYW55LCBuZXdTdGF0ZSBhcyBhbnkpO1xuICAgIHRoaXMuYWRkKG5ld0VudGl0aWVzKTtcbiAgICBpc0RldigpICYmIGxvZ0FjdGlvbignVXBzZXJ0IEVudGl0eScpO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIFVwc2VydCBlbnRpdHkgY29sbGVjdGlvbiAoaWRLZXkgbXVzdCBiZSBwcmVzZW50KVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBzdG9yZS51cHNlcnRNYW55KFsgeyBpZDogMSB9LCB7IGlkOiAyIH1dKTtcbiAgICpcbiAgICogc3RvcmUudXBzZXJ0TWFueShbIHsgaWQ6IDEgfSwgeyBpZDogMiB9XSwgeyBsb2FkaW5nOiB0cnVlICB9KTtcbiAgICogc3RvcmUudXBzZXJ0TWFueShbIHsgaWQ6IDEgfSwgeyBpZDogMiB9XSwgeyBiYXNlQ2xhc3M6IFRvZG8gIH0pO1xuICAgKlxuICAgKi9cbiAgdXBzZXJ0TWFueShlbnRpdGllczogRW50aXR5VHlwZVtdLCBvcHRpb25zOiB7IGJhc2VDbGFzcz86IENvbnN0cnVjdG9yOyBsb2FkaW5nPzogYm9vbGVhbiB9ID0ge30pIHtcbiAgICBjb25zdCBhZGRlZElkcyA9IFtdO1xuICAgIGNvbnN0IHVwZGF0ZWRJZHMgPSBbXTtcbiAgICBjb25zdCB1cGRhdGVkRW50aXRpZXMgPSB7fTtcblxuICAgIC8vIFVwZGF0ZSB0aGUgc3RhdGUgZGlyZWN0bHkgdG8gb3B0aW1pemUgcGVyZm9ybWFuY2VcbiAgICBmb3IgKGNvbnN0IGVudGl0eSBvZiBlbnRpdGllcykge1xuICAgICAgY29uc3Qgd2l0aFByZUNoZWNrSG9vayA9IHRoaXMuYWtpdGFQcmVDaGVja0VudGl0eShlbnRpdHkpO1xuICAgICAgY29uc3QgaWQgPSB3aXRoUHJlQ2hlY2tIb29rW3RoaXMuaWRLZXldO1xuICAgICAgaWYgKGhhc0VudGl0eSh0aGlzLmVudGl0aWVzLCBpZCkpIHtcbiAgICAgICAgY29uc3QgcHJldiA9IHRoaXMuX3ZhbHVlKCkuZW50aXRpZXNbaWRdO1xuICAgICAgICBjb25zdCBtZXJnZWQgPSB7IC4uLnRoaXMuX3ZhbHVlKCkuZW50aXRpZXNbaWRdLCAuLi53aXRoUHJlQ2hlY2tIb29rIH07XG4gICAgICAgIGNvbnN0IG5leHQgPSBvcHRpb25zLmJhc2VDbGFzcyA/IG5ldyBvcHRpb25zLmJhc2VDbGFzcyhtZXJnZWQpIDogbWVyZ2VkO1xuICAgICAgICBjb25zdCB3aXRoSG9vayA9IHRoaXMuYWtpdGFQcmVVcGRhdGVFbnRpdHkocHJldiwgbmV4dCk7XG4gICAgICAgIGNvbnN0IG5leHRJZCA9IHdpdGhIb29rW3RoaXMuaWRLZXldO1xuICAgICAgICB1cGRhdGVkRW50aXRpZXNbbmV4dElkXSA9IHdpdGhIb29rO1xuICAgICAgICB1cGRhdGVkSWRzLnB1c2gobmV4dElkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG5ld0VudGl0eSA9IG9wdGlvbnMuYmFzZUNsYXNzID8gbmV3IG9wdGlvbnMuYmFzZUNsYXNzKHdpdGhQcmVDaGVja0hvb2spIDogd2l0aFByZUNoZWNrSG9vaztcbiAgICAgICAgY29uc3Qgd2l0aEhvb2sgPSB0aGlzLmFraXRhUHJlQWRkRW50aXR5KG5ld0VudGl0eSk7XG4gICAgICAgIGNvbnN0IG5leHRJZCA9IHdpdGhIb29rW3RoaXMuaWRLZXldO1xuICAgICAgICBhZGRlZElkcy5wdXNoKG5leHRJZCk7XG4gICAgICAgIHVwZGF0ZWRFbnRpdGllc1tuZXh0SWRdID0gd2l0aEhvb2s7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaXNEZXYoKSAmJiBsb2dBY3Rpb24oJ1Vwc2VydCBNYW55Jyk7XG5cbiAgICB0aGlzLl9zZXRTdGF0ZShzdGF0ZSA9PiAoe1xuICAgICAgLi4uc3RhdGUsXG4gICAgICBpZHM6IGFkZGVkSWRzLmxlbmd0aCA/IFsuLi5zdGF0ZS5pZHMsIC4uLmFkZGVkSWRzXSA6IHN0YXRlLmlkcyxcbiAgICAgIGVudGl0aWVzOiB7XG4gICAgICAgIC4uLnN0YXRlLmVudGl0aWVzLFxuICAgICAgICAuLi51cGRhdGVkRW50aXRpZXNcbiAgICAgIH0sXG4gICAgICBsb2FkaW5nOiAhIW9wdGlvbnMubG9hZGluZ1xuICAgIH0pKTtcblxuICAgIHVwZGF0ZWRJZHMubGVuZ3RoICYmIHRoaXMuZW50aXR5QWN0aW9ucy5uZXh0KHsgdHlwZTogRW50aXR5QWN0aW9ucy5VcGRhdGUsIGlkczogdXBkYXRlZElkcyB9KTtcbiAgICBhZGRlZElkcy5sZW5ndGggJiYgdGhpcy5lbnRpdHlBY3Rpb25zLm5leHQoeyB0eXBlOiBFbnRpdHlBY3Rpb25zLkFkZCwgaWRzOiBhZGRlZElkcyB9KTtcbiAgICBpZiAoYWRkZWRJZHMubGVuZ3RoICYmIHRoaXMuaGFzVUlTdG9yZSgpKSB7XG4gICAgICB0aGlzLmhhbmRsZVVJQ3JlYXRpb24odHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIFJlcGxhY2Ugb25lIG9yIG1vcmUgZW50aXRpZXMgKGV4Y2VwdCB0aGUgaWQgcHJvcGVydHkpXG4gICAqXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHRoaXMuc3RvcmUucmVwbGFjZSg1LCBuZXdFbnRpdHkpXG4gICAqIHRoaXMuc3RvcmUucmVwbGFjZShbMSwyLDNdLCBuZXdFbnRpdHkpXG4gICAqL1xuICByZXBsYWNlKGlkczogSURTLCBuZXdTdGF0ZTogUGFydGlhbDxFbnRpdHlUeXBlPikge1xuICAgIGNvbnN0IHRvQXJyYXkgPSBjb2VyY2VBcnJheShpZHMpO1xuICAgIGlmIChpc0VtcHR5KHRvQXJyYXkpKSByZXR1cm47XG4gICAgbGV0IHJlcGxhY2VkID0ge307XG4gICAgZm9yIChjb25zdCBpZCBvZiB0b0FycmF5KSB7XG4gICAgICBuZXdTdGF0ZVt0aGlzLmlkS2V5XSA9IGlkO1xuICAgICAgcmVwbGFjZWRbaWRdID0gbmV3U3RhdGU7XG4gICAgfVxuICAgIGlzRGV2KCkgJiYgc2V0QWN0aW9uKCdSZXBsYWNlIEVudGl0eScsIGlkcyk7XG4gICAgdGhpcy5fc2V0U3RhdGUoc3RhdGUgPT4gKHtcbiAgICAgIC4uLnN0YXRlLFxuICAgICAgZW50aXRpZXM6IHtcbiAgICAgICAgLi4uc3RhdGUuZW50aXRpZXMsXG4gICAgICAgIC4uLnJlcGxhY2VkXG4gICAgICB9XG4gICAgfSkpO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIE1vdmUgZW50aXR5IGluc2lkZSB0aGUgY29sbGVjdGlvblxuICAgKlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiB0aGlzLnN0b3JlLm1vdmUoZnJvbUluZGV4LCB0b0luZGV4KVxuICAgKi9cbiAgbW92ZShmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIpIHtcbiAgICBjb25zdCBpZHMgPSB0aGlzLmlkcy5zbGljZSgpO1xuICAgIGlkcy5zcGxpY2UodG8gPCAwID8gaWRzLmxlbmd0aCArIHRvIDogdG8sIDAsIGlkcy5zcGxpY2UoZnJvbSwgMSlbMF0pO1xuXG4gICAgaXNEZXYoKSAmJiBzZXRBY3Rpb24oJ01vdmUgRW50aXR5Jyk7XG4gICAgdGhpcy5fc2V0U3RhdGUoc3RhdGUgPT4gKHtcbiAgICAgIC4uLnN0YXRlLFxuICAgICAgLy8gQ2hhbmdlIHRoZSBlbnRpdGllcyByZWZlcmVuY2Ugc28gdGhhdCBzZWxlY3RBbGwgZW1pdFxuICAgICAgZW50aXRpZXM6IHtcbiAgICAgICAgLi4uc3RhdGUuZW50aXRpZXNcbiAgICAgIH0sXG4gICAgICBpZHNcbiAgICB9KSk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogUmVtb3ZlIG9uZSBvciBtb3JlIGVudGl0aWVzXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHRoaXMuc3RvcmUucmVtb3ZlKDUpXG4gICAqIHRoaXMuc3RvcmUucmVtb3ZlKFsxLDIsM10pXG4gICAqIHRoaXMuc3RvcmUucmVtb3ZlKClcbiAgICovXG4gIHJlbW92ZShpZD86IE9yQXJyYXk8SURUeXBlPik7XG4gIC8qKlxuICAgKiB0aGlzLnN0b3JlLnJlbW92ZShlbnRpdHkgPT4gZW50aXR5LmlkID09PSAxKVxuICAgKi9cbiAgcmVtb3ZlKHByZWRpY2F0ZTogKGVudGl0eTogUmVhZG9ubHk8RW50aXR5VHlwZT4pID0+IGJvb2xlYW4pO1xuICByZW1vdmUoaWRzT3JGbj86IE9yQXJyYXk8SURUeXBlPiB8ICgoZW50aXR5OiBSZWFkb25seTxFbnRpdHlUeXBlPikgPT4gYm9vbGVhbikpIHtcbiAgICBpZiAoaXNFbXB0eSh0aGlzLmlkcykpIHJldHVybjtcblxuICAgIGNvbnN0IGlkUGFzc2VkID0gaXNEZWZpbmVkKGlkc09yRm4pO1xuXG4gICAgLy8gbnVsbCBtZWFucyByZW1vdmUgYWxsXG4gICAgbGV0IGlkczogSURUeXBlW10gfCBudWxsID0gW107XG5cbiAgICBpZiAoaXNGdW5jdGlvbihpZHNPckZuKSkge1xuICAgICAgaWRzID0gdGhpcy5pZHMuZmlsdGVyKGVudGl0eUlkID0+IGlkc09yRm4odGhpcy5lbnRpdGllc1tlbnRpdHlJZF0pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWRzID0gaWRQYXNzZWQgPyBjb2VyY2VBcnJheShpZHNPckZuKSA6IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGlzRW1wdHkoaWRzKSkgcmV0dXJuO1xuXG4gICAgaXNEZXYoKSAmJiBzZXRBY3Rpb24oJ1JlbW92ZSBFbnRpdHknLCBpZHMpO1xuICAgIHRoaXMuX3NldFN0YXRlKChzdGF0ZTogU3RhdGVXaXRoQWN0aXZlPFM+KSA9PiByZW1vdmVFbnRpdGllcyh7IHN0YXRlLCBpZHMgfSkpO1xuICAgIGlmIChpZHMgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuc2V0SGFzQ2FjaGUoZmFsc2UpO1xuICAgIH1cblxuICAgIHRoaXMuaGFuZGxlVUlSZW1vdmUoaWRzKTtcbiAgICB0aGlzLmVudGl0eUFjdGlvbnMubmV4dCh7IHR5cGU6IEVudGl0eUFjdGlvbnMuUmVtb3ZlLCBpZHMgfSk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogVXBkYXRlIHRoZSBhY3RpdmUgZW50aXR5XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHRoaXMuc3RvcmUudXBkYXRlQWN0aXZlKHsgY29tcGxldGVkOiB0cnVlIH0pXG4gICAqIHRoaXMuc3RvcmUudXBkYXRlQWN0aXZlKGFjdGl2ZSA9PiB7XG4gICAqICAgcmV0dXJuIHtcbiAgICogICAgIGNvbmZpZzoge1xuICAgKiAgICAgIC4uYWN0aXZlLmNvbmZpZyxcbiAgICogICAgICBkYXRlXG4gICAqICAgICB9XG4gICAqICAgfVxuICAgKiB9KVxuICAgKi9cbiAgdXBkYXRlQWN0aXZlKG5ld1N0YXRlT3JDYWxsYmFjazogVXBkYXRlU3RhdGVDYWxsYmFjazxFbnRpdHlUeXBlPiB8IFBhcnRpYWw8RW50aXR5VHlwZT4pIHtcbiAgICBjb25zdCBpZHMgPSBjb2VyY2VBcnJheSh0aGlzLmFjdGl2ZSk7XG4gICAgaXNEZXYoKSAmJiBzZXRBY3Rpb24oJ1VwZGF0ZSBBY3RpdmUnLCBpZHMpO1xuICAgIHRoaXMudXBkYXRlKGlkcywgbmV3U3RhdGVPckNhbGxiYWNrIGFzIFBhcnRpYWw8RW50aXR5VHlwZT4pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgZ2l2ZW4gZW50aXR5IGFzIGFjdGl2ZVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBzdG9yZS5zZXRBY3RpdmUoMSlcbiAgICogc3RvcmUuc2V0QWN0aXZlKFsxLCAyLCAzXSlcbiAgICovXG4gIHNldEFjdGl2ZShpZE9yT3B0aW9uczogU1snYWN0aXZlJ10gZXh0ZW5kcyBhbnlbXSA/IFNbJ2FjdGl2ZSddIDogKFNldEFjdGl2ZU9wdGlvbnMgfCBTWydhY3RpdmUnXSkpO1xuICBzZXRBY3RpdmUoaWRPck9wdGlvbnM6IElEVHlwZSB8IFNldEFjdGl2ZU9wdGlvbnMgfCBudWxsKSB7XG4gICAgY29uc3QgYWN0aXZlID0gZ2V0QWN0aXZlRW50aXRpZXMoaWRPck9wdGlvbnMsIHRoaXMuaWRzLCB0aGlzLmFjdGl2ZSk7XG5cbiAgICBpZiAoYWN0aXZlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpc0RldigpICYmIHNldEFjdGlvbignU2V0IEFjdGl2ZScsIGFjdGl2ZSk7XG4gICAgdGhpcy5fc2V0QWN0aXZlKGFjdGl2ZSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGFjdGl2ZSBlbnRpdGllc1xuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBzdG9yZS5hZGRBY3RpdmUoMik7XG4gICAqIHN0b3JlLmFkZEFjdGl2ZShbMywgNCwgNV0pO1xuICAgKi9cbiAgYWRkQWN0aXZlPFQgPSBPckFycmF5PElEVHlwZT4+KGlkczogVCkge1xuICAgIGNvbnN0IHRvQXJyYXkgPSBjb2VyY2VBcnJheShpZHMpO1xuICAgIGlmIChpc0VtcHR5KHRvQXJyYXkpKSByZXR1cm47XG4gICAgY29uc3QgZXZlcnlFeGlzdCA9IHRvQXJyYXkuZXZlcnkoaWQgPT4gdGhpcy5hY3RpdmUuaW5kZXhPZihpZCkgPiAtMSk7XG4gICAgaWYgKGV2ZXJ5RXhpc3QpIHJldHVybjtcblxuICAgIGlzRGV2KCkgJiYgc2V0QWN0aW9uKCdBZGQgQWN0aXZlJywgaWRzKTtcbiAgICB0aGlzLl9zZXRTdGF0ZShzdGF0ZSA9PiB7XG4gICAgICAvKiogUHJvdGVjdCBhZ2FpbnN0IGNhc2UgdGhhdCBvbmUgb2YgdGhlIGl0ZW1zIGluIHRoZSBhcnJheSBleGlzdCAqL1xuICAgICAgY29uc3QgdW5pcXVlcyA9IEFycmF5LmZyb20obmV3IFNldChbLi4uKHN0YXRlLmFjdGl2ZSBhcyBJRFR5cGVbXSksIC4uLnRvQXJyYXldKSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgYWN0aXZlOiB1bmlxdWVzXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhY3RpdmUgZW50aXRpZXNcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogc3RvcmUucmVtb3ZlQWN0aXZlKDIpXG4gICAqIHN0b3JlLnJlbW92ZUFjdGl2ZShbMywgNCwgNV0pXG4gICAqL1xuICByZW1vdmVBY3RpdmU8VCA9IE9yQXJyYXk8SURUeXBlPj4oaWRzOiBUKSB7XG4gICAgY29uc3QgdG9BcnJheSA9IGNvZXJjZUFycmF5KGlkcyk7XG4gICAgaWYgKGlzRW1wdHkodG9BcnJheSkpIHJldHVybjtcbiAgICBjb25zdCBzb21lRXhpc3QgPSB0b0FycmF5LnNvbWUoaWQgPT4gdGhpcy5hY3RpdmUuaW5kZXhPZihpZCkgPiAtMSk7XG4gICAgaWYgKCFzb21lRXhpc3QpIHJldHVybjtcblxuICAgIGlzRGV2KCkgJiYgc2V0QWN0aW9uKCdSZW1vdmUgQWN0aXZlJywgaWRzKTtcbiAgICB0aGlzLl9zZXRTdGF0ZShzdGF0ZSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgYWN0aXZlOiBBcnJheS5pc0FycmF5KHN0YXRlLmFjdGl2ZSkgPyBzdGF0ZS5hY3RpdmUuZmlsdGVyKGN1cnJlbnRJZCA9PiB0b0FycmF5LmluZGV4T2YoY3VycmVudElkKSA9PT0gLTEpIDogbnVsbFxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGUgYWN0aXZlIGVudGl0aWVzXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHN0b3JlLnRvZ2dsZSgyKVxuICAgKiBzdG9yZS50b2dnbGUoWzMsIDQsIDVdKVxuICAgKi9cbiAgQHRyYW5zYWN0aW9uKClcbiAgdG9nZ2xlQWN0aXZlPFQgPSBPckFycmF5PElEVHlwZT4+KGlkczogVCkge1xuICAgIGNvbnN0IHRvQXJyYXkgPSBjb2VyY2VBcnJheShpZHMpO1xuICAgIGNvbnN0IGZpbHRlckV4aXN0cyA9IHJlbW92ZSA9PiBpZCA9PiB0aGlzLmFjdGl2ZS5pbmNsdWRlcyhpZCkgPT09IHJlbW92ZTtcbiAgICBjb25zdCByZW1vdmUgPSB0b0FycmF5LmZpbHRlcihmaWx0ZXJFeGlzdHModHJ1ZSkpO1xuICAgIGNvbnN0IGFkZCA9IHRvQXJyYXkuZmlsdGVyKGZpbHRlckV4aXN0cyhmYWxzZSkpO1xuICAgIHRoaXMucmVtb3ZlQWN0aXZlKHJlbW92ZSk7XG4gICAgdGhpcy5hZGRBY3RpdmUoYWRkKTtcbiAgICBpc0RldigpICYmIGxvZ0FjdGlvbignVG9nZ2xlIEFjdGl2ZScpO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIENyZWF0ZSBzdWIgVUkgc3RvcmUgZm9yIG1hbmFnaW5nIEVudGl0eSdzIFVJIHN0YXRlXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIGV4cG9ydCB0eXBlIFByb2R1Y3RVSSA9IHtcbiAgICogICBpc0xvYWRpbmc6IGJvb2xlYW47XG4gICAqICAgaXNPcGVuOiBib29sZWFuXG4gICAqIH1cbiAgICpcbiAgICogaW50ZXJmYWNlIFByb2R1Y3RzVUlTdGF0ZSBleHRlbmRzIEVudGl0eVN0YXRlPFByb2R1Y3RVST4ge31cbiAgICpcbiAgICogZXhwb3J0IGNsYXNzIFByb2R1Y3RzU3RvcmUgRW50aXR5U3RvcmU8UHJvZHVjdHNTdGF0ZSwgUHJvZHVjdD4ge1xuICAgKiAgIHVpOiBFbnRpdHlVSVN0b3JlPFByb2R1Y3RzVUlTdGF0ZSwgUHJvZHVjdFVJPjtcbiAgICpcbiAgICogICBjb25zdHJ1Y3RvcigpIHtcbiAgICogICAgIHN1cGVyKCk7XG4gICAqICAgICB0aGlzLmNyZWF0ZVVJU3RvcmUoKTtcbiAgICogICB9XG4gICAqXG4gICAqIH1cbiAgICovXG4gIGNyZWF0ZVVJU3RvcmUoaW5pdGlhbFN0YXRlID0ge30sIHN0b3JlQ29uZmlnOiBQYXJ0aWFsPFN0b3JlQ29uZmlnT3B0aW9ucz4gPSB7fSkge1xuICAgIGNvbnN0IGRlZmF1bHRzOiBQYXJ0aWFsPFN0b3JlQ29uZmlnT3B0aW9ucz4gPSB7IG5hbWU6IGBVSS8ke3RoaXMuc3RvcmVOYW1lfWAsIGlkS2V5OiB0aGlzLmlkS2V5IH07XG4gICAgdGhpcy51aSA9IG5ldyBFbnRpdHlVSVN0b3JlKGluaXRpYWxTdGF0ZSwgeyAuLi5kZWZhdWx0cywgLi4uc3RvcmVDb25maWcgfSk7XG4gICAgcmV0dXJuIHRoaXMudWk7XG4gIH1cblxuICAvLyBAaW50ZXJuYWxcbiAgZGVzdHJveSgpIHtcbiAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgaWYgKHRoaXMudWkgaW5zdGFuY2VvZiBFbnRpdHlTdG9yZSkge1xuICAgICAgdGhpcy51aS5kZXN0cm95KCk7XG4gICAgfVxuICAgIHRoaXMuZW50aXR5QWN0aW9ucy5jb21wbGV0ZSgpO1xuICB9XG5cbiAgLy8gQGludGVybmFsXG4gIGFraXRhUHJlVXBkYXRlRW50aXR5KF86IFJlYWRvbmx5PEVudGl0eVR5cGU+LCBuZXh0RW50aXR5OiBhbnkpOiBFbnRpdHlUeXBlIHtcbiAgICByZXR1cm4gbmV4dEVudGl0eSBhcyBFbnRpdHlUeXBlO1xuICB9XG5cbiAgLy8gQGludGVybmFsXG4gIGFraXRhUHJlQWRkRW50aXR5KG5ld0VudGl0eTogYW55KTogRW50aXR5VHlwZSB7XG4gICAgcmV0dXJuIG5ld0VudGl0eSBhcyBFbnRpdHlUeXBlO1xuICB9XG5cbiAgLy8gQGludGVybmFsXG4gIGFraXRhUHJlQ2hlY2tFbnRpdHkobmV3RW50aXR5OiBSZWFkb25seTxFbnRpdHlUeXBlPik6IEVudGl0eVR5cGUge1xuICAgIHJldHVybiBuZXdFbnRpdHk7XG4gIH1cblxuICBwcml2YXRlIGdldCBpZHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlKCkuaWRzO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXQgZW50aXRpZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlKCkuZW50aXRpZXM7XG4gIH1cblxuICBwcml2YXRlIGdldCBhY3RpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlKCkuYWN0aXZlO1xuICB9XG5cbiAgcHJpdmF0ZSBfc2V0QWN0aXZlKGlkczogT3JBcnJheTxJRFR5cGU+KSB7XG4gICAgdGhpcy5fc2V0U3RhdGUoc3RhdGUgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGFjdGl2ZTogaWRzXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVVSUNyZWF0aW9uKGFkZCA9IGZhbHNlKSB7XG4gICAgY29uc3QgaWRzID0gdGhpcy5pZHM7XG4gICAgY29uc3QgaXNGdW5jID0gaXNGdW5jdGlvbih0aGlzLnVpLl9ha2l0YUNyZWF0ZUVudGl0eUZuKTtcbiAgICBsZXQgdWlFbnRpdGllcztcbiAgICBjb25zdCBjcmVhdGVGbiA9IGlkID0+IHtcbiAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmVudGl0aWVzW2lkXTtcbiAgICAgIGNvbnN0IHVpID0gaXNGdW5jID8gdGhpcy51aS5fYWtpdGFDcmVhdGVFbnRpdHlGbihjdXJyZW50KSA6IHRoaXMudWkuX2FraXRhQ3JlYXRlRW50aXR5Rm47XG4gICAgICByZXR1cm4ge1xuICAgICAgICBbdGhpcy5pZEtleV06IGN1cnJlbnRbdGhpcy5pZEtleV0sXG4gICAgICAgIC4uLnVpXG4gICAgICB9O1xuICAgIH07XG5cbiAgICBpZiAoYWRkKSB7XG4gICAgICB1aUVudGl0aWVzID0gdGhpcy5pZHMuZmlsdGVyKGlkID0+IGlzVW5kZWZpbmVkKHRoaXMudWkuZW50aXRpZXNbaWRdKSkubWFwKGNyZWF0ZUZuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdWlFbnRpdGllcyA9IGlkcy5tYXAoY3JlYXRlRm4pO1xuICAgIH1cblxuICAgIGFkZCA/IHRoaXMudWkuYWRkKHVpRW50aXRpZXMpIDogdGhpcy51aS5zZXQodWlFbnRpdGllcyk7XG4gIH1cblxuICBwcml2YXRlIGhhc0luaXRpYWxVSVN0YXRlKCkge1xuICAgIHJldHVybiB0aGlzLmhhc1VJU3RvcmUoKSAmJiBpc1VuZGVmaW5lZCh0aGlzLnVpLl9ha2l0YUNyZWF0ZUVudGl0eUZuKSA9PT0gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZVVJUmVtb3ZlKGlkczogSURUeXBlW10pIHtcbiAgICBpZiAodGhpcy5oYXNVSVN0b3JlKCkpIHtcbiAgICAgIHRoaXMudWkucmVtb3ZlKGlkcyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBoYXNVSVN0b3JlKCkge1xuICAgIHJldHVybiB0aGlzLnVpIGluc3RhbmNlb2YgRW50aXR5VUlTdG9yZTtcbiAgfVxufVxuXG4vLyBAaW50ZXJuYWxcbmV4cG9ydCBjbGFzcyBFbnRpdHlVSVN0b3JlPFVJU3RhdGUsIERFUFJFQ0FURUQgPSBhbnk+IGV4dGVuZHMgRW50aXR5U3RvcmU8VUlTdGF0ZT4ge1xuICBfYWtpdGFDcmVhdGVFbnRpdHlGbjogRW50aXR5VUlDcmVhdGVGbjtcblxuICBjb25zdHJ1Y3Rvcihpbml0aWFsU3RhdGUgPSB7fSwgc3RvcmVDb25maWc6IFBhcnRpYWw8U3RvcmVDb25maWdPcHRpb25zPiA9IHt9KSB7XG4gICAgc3VwZXIoaW5pdGlhbFN0YXRlLCBzdG9yZUNvbmZpZyk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogU2V0IHRoZSBpbml0aWFsIFVJIGVudGl0eSBzdGF0ZS4gVGhpcyBmdW5jdGlvbiB3aWxsIGRldGVybWluZSB0aGUgZW50aXR5J3NcbiAgICogaW5pdGlhbCBzdGF0ZSB3aGVuIHdlIGNhbGwgYHNldCgpYCBvciBgYWRkKClgLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBjb25zdHJ1Y3RvcigpIHtcbiAgICogICBzdXBlcigpO1xuICAgKiAgIHRoaXMuY3JlYXRlVUlTdG9yZSgpLnNldEluaXRpYWxFbnRpdHlTdGF0ZShlbnRpdHkgPT4gKHsgaXNMb2FkaW5nOiBmYWxzZSwgaXNPcGVuOiB0cnVlIH0pKTtcbiAgICogICB0aGlzLmNyZWF0ZVVJU3RvcmUoKS5zZXRJbml0aWFsRW50aXR5U3RhdGUoeyBpc0xvYWRpbmc6IGZhbHNlLCBpc09wZW46IHRydWUgfSk7XG4gICAqIH1cbiAgICpcbiAgICovXG4gIHNldEluaXRpYWxFbnRpdHlTdGF0ZTxFbnRpdHlVSSA9IGFueSwgRW50aXR5ID0gYW55PihjcmVhdGVGbjogRW50aXR5VUlDcmVhdGVGbjxFbnRpdHlVSSwgRW50aXR5Pikge1xuICAgIHRoaXMuX2FraXRhQ3JlYXRlRW50aXR5Rm4gPSBjcmVhdGVGbjtcbiAgfVxufVxuIl19