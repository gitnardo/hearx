/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { AkitaPlugin } from '../plugin';
import { QueryEntity } from '../../queryEntity';
import { BehaviorSubject, combineLatest, Subject } from 'rxjs';
import { distinctUntilChanged, map, skip } from 'rxjs/operators';
import { isUndefined } from '../../isUndefined';
import { coerceArray } from '../../coerceArray';
import { isFunction } from '../../isFunction';
import { logAction } from '../../actions';
/** @type {?} */
export var dirtyCheckDefaultParams = {
    comparator: (/**
     * @param {?} head
     * @param {?} current
     * @return {?}
     */
    function (head, current) { return JSON.stringify(head) !== JSON.stringify(current); })
};
/**
 * @param {?} nestedObj
 * @param {?} path
 * @return {?}
 */
export function getNestedPath(nestedObj, path) {
    /** @type {?} */
    var pathAsArray = path.split('.');
    return pathAsArray.reduce((/**
     * @param {?} obj
     * @param {?} key
     * @return {?}
     */
    function (obj, key) { return (obj && obj[key] !== 'undefined' ? obj[key] : undefined); }), nestedObj);
}
/**
 * @template State
 */
var /**
 * @template State
 */
DirtyCheckPlugin = /** @class */ (function (_super) {
    tslib_1.__extends(DirtyCheckPlugin, _super);
    function DirtyCheckPlugin(query, params, _entityId) {
        var _this = _super.call(this, query) || this;
        _this.query = query;
        _this.params = params;
        _this._entityId = _entityId;
        _this.dirty = new BehaviorSubject(false);
        _this.active = false;
        _this._reset = new Subject();
        _this.isDirty$ = _this.dirty.asObservable().pipe(distinctUntilChanged());
        _this.reset$ = _this._reset.asObservable();
        _this.params = tslib_1.__assign({}, dirtyCheckDefaultParams, params);
        if (_this.params.watchProperty) {
            /** @type {?} */
            var watchProp = (/** @type {?} */ (coerceArray(_this.params.watchProperty)));
            if (query instanceof QueryEntity && watchProp.includes('entities') && !watchProp.includes('ids')) {
                watchProp.push('ids');
            }
            _this.params.watchProperty = watchProp;
        }
        return _this;
    }
    /**
     * @param {?=} params
     * @return {?}
     */
    DirtyCheckPlugin.prototype.reset = /**
     * @param {?=} params
     * @return {?}
     */
    function (params) {
        if (params === void 0) { params = {}; }
        /** @type {?} */
        var currentValue = this.head;
        if (isFunction(params.updateFn)) {
            if (this.isEntityBased(this._entityId)) {
                currentValue = params.updateFn(this.head, ((/** @type {?} */ (this.getQuery()))).getEntity(this._entityId));
            }
            else {
                currentValue = params.updateFn(this.head, ((/** @type {?} */ (this.getQuery()))).getValue());
            }
        }
        logAction("@DirtyCheck - Revert");
        this.updateStore(currentValue, this._entityId);
        this._reset.next();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    DirtyCheckPlugin.prototype.setHead = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        if (!(/** @type {?} */ (this)).active) {
            (/** @type {?} */ (this)).activate();
            (/** @type {?} */ (this)).active = true;
        }
        else {
            (/** @type {?} */ (this)).head = (/** @type {?} */ (this))._getHead();
        }
        (/** @type {?} */ (this)).updateDirtiness(false);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    DirtyCheckPlugin.prototype.isDirty = /**
     * @return {?}
     */
    function () {
        return !!this.dirty.value;
    };
    /**
     * @return {?}
     */
    DirtyCheckPlugin.prototype.hasHead = /**
     * @return {?}
     */
    function () {
        return !!this.getHead();
    };
    /**
     * @return {?}
     */
    DirtyCheckPlugin.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.head = null;
        this.subscription && this.subscription.unsubscribe();
        this._reset && this._reset.complete();
    };
    /**
     * @param {?} path
     * @return {?}
     */
    DirtyCheckPlugin.prototype.isPathDirty = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var head = this.getHead();
        /** @type {?} */
        var current = ((/** @type {?} */ (this.getQuery()))).getValue();
        /** @type {?} */
        var currentPathValue = getNestedPath(current, path);
        /** @type {?} */
        var headPathValue = getNestedPath(head, path);
        return this.params.comparator(currentPathValue, headPathValue);
    };
    /**
     * @protected
     * @return {?}
     */
    DirtyCheckPlugin.prototype.getHead = /**
     * @protected
     * @return {?}
     */
    function () {
        return this.head;
    };
    /**
     * @private
     * @return {?}
     */
    DirtyCheckPlugin.prototype.activate = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.head = this._getHead();
        /**
         * if we are tracking specific properties select only the relevant ones
         * @type {?}
         */
        var source = this.params.watchProperty
            ? ((/** @type {?} */ (this.params.watchProperty))).map((/**
             * @param {?} prop
             * @return {?}
             */
            function (prop) {
                return _this.query
                    .select((/**
                 * @param {?} state
                 * @return {?}
                 */
                function (state) { return state[prop]; }))
                    .pipe(map((/**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) { return ({
                    val: val,
                    __akitaKey: prop
                }); })));
            }))
            : [this.selectSource(this._entityId)];
        this.subscription = combineLatest.apply(void 0, tslib_1.__spread(source)).pipe(skip(1))
            .subscribe((/**
         * @param {?} currentState
         * @return {?}
         */
        function (currentState) {
            if (isUndefined(_this.head))
                return;
            /**
             * __akitaKey is used to determine if we are tracking a specific property or a store change
             * @type {?}
             */
            var isChange = currentState.some((/**
             * @param {?} state
             * @return {?}
             */
            function (state) {
                /** @type {?} */
                var head = state.__akitaKey ? _this.head[(/** @type {?} */ (state.__akitaKey))] : _this.head;
                /** @type {?} */
                var compareTo = state.__akitaKey ? state.val : state;
                return _this.params.comparator(head, compareTo);
            }));
            _this.updateDirtiness(isChange);
        }));
    };
    /**
     * @private
     * @param {?} isDirty
     * @return {?}
     */
    DirtyCheckPlugin.prototype.updateDirtiness = /**
     * @private
     * @param {?} isDirty
     * @return {?}
     */
    function (isDirty) {
        this.dirty.next(isDirty);
    };
    /**
     * @private
     * @return {?}
     */
    DirtyCheckPlugin.prototype._getHead = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var head = this.getSource(this._entityId);
        if (this.params.watchProperty) {
            head = this.getWatchedValues((/** @type {?} */ (head)));
        }
        return head;
    };
    /**
     * @private
     * @param {?} source
     * @return {?}
     */
    DirtyCheckPlugin.prototype.getWatchedValues = /**
     * @private
     * @param {?} source
     * @return {?}
     */
    function (source) {
        return ((/** @type {?} */ (this.params.watchProperty))).reduce((/**
         * @param {?} watched
         * @param {?} prop
         * @return {?}
         */
        function (watched, prop) {
            watched[prop] = source[prop];
            return watched;
        }), (/** @type {?} */ ({})));
    };
    return DirtyCheckPlugin;
}(AkitaPlugin));
/**
 * @template State
 */
export { DirtyCheckPlugin };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DirtyCheckPlugin.prototype.head;
    /**
     * @type {?}
     * @private
     */
    DirtyCheckPlugin.prototype.dirty;
    /**
     * @type {?}
     * @private
     */
    DirtyCheckPlugin.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    DirtyCheckPlugin.prototype.active;
    /**
     * @type {?}
     * @private
     */
    DirtyCheckPlugin.prototype._reset;
    /** @type {?} */
    DirtyCheckPlugin.prototype.isDirty$;
    /** @type {?} */
    DirtyCheckPlugin.prototype.reset$;
    /**
     * @type {?}
     * @protected
     */
    DirtyCheckPlugin.prototype.query;
    /**
     * @type {?}
     * @private
     */
    DirtyCheckPlugin.prototype.params;
    /**
     * @type {?}
     * @private
     */
    DirtyCheckPlugin.prototype._entityId;
}
//# sourceMappingURL=data:application/json;base64,