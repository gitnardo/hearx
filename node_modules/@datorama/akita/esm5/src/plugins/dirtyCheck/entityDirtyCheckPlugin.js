/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { dirtyCheckDefaultParams, DirtyCheckPlugin, getNestedPath } from './dirtyCheckPlugin';
import { EntityCollectionPlugin } from '../entityCollectionPlugin';
import { auditTime, map, skip } from 'rxjs/operators';
import { merge, Subject } from 'rxjs';
import { coerceArray } from '../../coerceArray';
/**
 * @template State, P
 */
var /**
 * @template State, P
 */
EntityDirtyCheckPlugin = /** @class */ (function (_super) {
    tslib_1.__extends(EntityDirtyCheckPlugin, _super);
    function EntityDirtyCheckPlugin(query, params) {
        if (params === void 0) { params = {}; }
        var _this = _super.call(this, query, params.entityIds) || this;
        _this.query = query;
        _this.params = params;
        _this._someDirty = new Subject();
        _this.someDirty$ = merge(_this.query.select((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return state.entities; })), _this._someDirty.asObservable()).pipe(auditTime(0), map((/**
         * @return {?}
         */
        function () { return _this.checkSomeDirty(); })));
        _this.params = tslib_1.__assign({}, dirtyCheckDefaultParams, params);
        // TODO lazy activate?
        _this.activate();
        _this.selectIds()
            .pipe(skip(1))
            .subscribe((/**
         * @param {?} ids
         * @return {?}
         */
        function (ids) {
            _super.prototype.rebase.call(_this, ids, { afterAdd: (/**
                 * @param {?} plugin
                 * @return {?}
                 */
                function (plugin) { return plugin.setHead(); }) });
        }));
        return _this;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?=} ids
     * @return {THIS}
     */
    EntityDirtyCheckPlugin.prototype.setHead = /**
     * @template THIS
     * @this {THIS}
     * @param {?=} ids
     * @return {THIS}
     */
    function (ids) {
        if ((/** @type {?} */ (this)).params.entityIds && ids) {
            /** @type {?} */
            var toArray_1 = (/** @type {?} */ (coerceArray(ids)));
            /** @type {?} */
            var someAreWatched = coerceArray((/** @type {?} */ (this)).params.entityIds).some((/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return toArray_1.indexOf(id) > -1; }));
            if (someAreWatched === false) {
                return (/** @type {?} */ (this));
            }
        }
        (/** @type {?} */ (this)).forEachId(ids, (/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return e.setHead(); }));
        (/** @type {?} */ (this))._someDirty.next();
        return (/** @type {?} */ (this));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.hasHead = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (this.entities.has(id)) {
            /** @type {?} */
            var entity = this.getEntity(id);
            return entity.hasHead();
        }
        return false;
    };
    /**
     * @param {?=} ids
     * @param {?=} params
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.reset = /**
     * @param {?=} ids
     * @param {?=} params
     * @return {?}
     */
    function (ids, params) {
        if (params === void 0) { params = {}; }
        this.forEachId(ids, (/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return e.reset(params); }));
    };
    /**
     * @param {?} id
     * @param {?=} asObservable
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.isDirty = /**
     * @param {?} id
     * @param {?=} asObservable
     * @return {?}
     */
    function (id, asObservable) {
        if (asObservable === void 0) { asObservable = true; }
        if (this.entities.has(id)) {
            /** @type {?} */
            var entity = this.getEntity(id);
            return asObservable ? entity.isDirty$ : entity.isDirty();
        }
        return false;
    };
    /**
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.someDirty = /**
     * @return {?}
     */
    function () {
        return this.checkSomeDirty();
    };
    /**
     * @param {?} id
     * @param {?} path
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.isPathDirty = /**
     * @param {?} id
     * @param {?} path
     * @return {?}
     */
    function (id, path) {
        if (this.entities.has(id)) {
            /** @type {?} */
            var head = ((/** @type {?} */ (this.getEntity(id)))).getHead();
            /** @type {?} */
            var current = this.query.getEntity(id);
            /** @type {?} */
            var currentPathValue = getNestedPath(current, path);
            /** @type {?} */
            var headPathValue = getNestedPath(head, path);
            return this.params.comparator(currentPathValue, headPathValue);
        }
        return null;
    };
    /**
     * @param {?=} ids
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.destroy = /**
     * @param {?=} ids
     * @return {?}
     */
    function (ids) {
        this.forEachId(ids, (/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return e.destroy(); }));
        /** complete only when the plugin destroys */
        if (!ids) {
            this._someDirty.complete();
        }
    };
    /**
     * @protected
     * @param {?} id
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.instantiatePlugin = /**
     * @protected
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return (/** @type {?} */ (new DirtyCheckPlugin(this.query, this.params, id)));
    };
    /**
     * @private
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.checkSomeDirty = /**
     * @private
     * @return {?}
     */
    function () {
        var e_1, _a;
        /** @type {?} */
        var entitiesIds = this.resolvedIds();
        try {
            for (var entitiesIds_1 = tslib_1.__values(entitiesIds), entitiesIds_1_1 = entitiesIds_1.next(); !entitiesIds_1_1.done; entitiesIds_1_1 = entitiesIds_1.next()) {
                var id = entitiesIds_1_1.value;
                if (this.getEntity(id).isDirty()) {
                    return true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (entitiesIds_1_1 && !entitiesIds_1_1.done && (_a = entitiesIds_1.return)) _a.call(entitiesIds_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return false;
    };
    return EntityDirtyCheckPlugin;
}(EntityCollectionPlugin));
/**
 * @template State, P
 */
export { EntityDirtyCheckPlugin };
if (false) {
    /**
     * @type {?}
     * @private
     */
    EntityDirtyCheckPlugin.prototype._someDirty;
    /** @type {?} */
    EntityDirtyCheckPlugin.prototype.someDirty$;
    /**
     * @type {?}
     * @protected
     */
    EntityDirtyCheckPlugin.prototype.query;
    /**
     * @type {?}
     * @private
     */
    EntityDirtyCheckPlugin.prototype.params;
}
//# sourceMappingURL=data:application/json;base64,