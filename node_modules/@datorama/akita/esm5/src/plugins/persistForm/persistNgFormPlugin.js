/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { AkitaPlugin } from '../plugin';
import { debounceTime } from 'rxjs/operators';
import { getValue } from '../../getValueByString';
import { toBoolean } from '../../toBoolean';
import { isString } from '../../isString';
import { setValue } from '../../setValueByString';
import { logAction } from '../../actions';
// Todo: Return  AbstractControl interface
/**
 * @template T
 */
var 
// Todo: Return  AbstractControl interface
/**
 * @template T
 */
PersistNgFormPlugin = /** @class */ (function (_super) {
    tslib_1.__extends(PersistNgFormPlugin, _super);
    function PersistNgFormPlugin(query, factoryFnOrPath, params) {
        if (params === void 0) { params = {}; }
        var _this = _super.call(this, query) || this;
        _this.query = query;
        _this.factoryFnOrPath = factoryFnOrPath;
        _this.params = params;
        _this.params = tslib_1.__assign({ debounceTime: 300, formKey: 'akitaForm', emitEvent: false, arrControlFactory: (/**
             * @param {?} v
             * @return {?}
             */
            function (v) { return _this.builder.control(v); }) }, params);
        _this.isRootKeys = toBoolean(factoryFnOrPath) === false;
        _this.isKeyBased = isString(factoryFnOrPath) || _this.isRootKeys;
        return _this;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} form
     * @param {?=} builder
     * @return {THIS}
     */
    PersistNgFormPlugin.prototype.setForm = /**
     * @template THIS
     * @this {THIS}
     * @param {?} form
     * @param {?=} builder
     * @return {THIS}
     */
    function (form, builder) {
        (/** @type {?} */ (this)).form = form;
        (/** @type {?} */ (this)).builder = builder;
        (/** @type {?} */ (this)).activate();
        return (/** @type {?} */ (this));
    };
    /**
     * @param {?=} initialState
     * @return {?}
     */
    PersistNgFormPlugin.prototype.reset = /**
     * @param {?=} initialState
     * @return {?}
     */
    function (initialState) {
        var _this = this;
        var _a;
        /** @type {?} */
        var value;
        if (initialState) {
            value = initialState;
        }
        else {
            value = this.isKeyBased ? this.initialValue : ((/** @type {?} */ (this))).factoryFnOrPath();
        }
        if (this.isKeyBased) {
            Object.keys(this.initialValue).forEach((/**
             * @param {?} stateKey
             * @return {?}
             */
            function (stateKey) {
                /** @type {?} */
                var value = _this.initialValue[stateKey];
                if (Array.isArray(value) && _this.builder) {
                    /** @type {?} */
                    var formArray = _this.form.controls[stateKey];
                    _this.cleanArray(formArray);
                    value.forEach((/**
                     * @param {?} v
                     * @param {?} i
                     * @return {?}
                     */
                    function (v, i) {
                        _this.form.get(stateKey).insert(i, ((/** @type {?} */ (_this.params.arrControlFactory)))(v));
                    }));
                }
            }));
        }
        this.form.patchValue(value, { emitEvent: this.params.emitEvent });
        /** @type {?} */
        var storeValue = this.isKeyBased ? setValue(this.getQuery().getValue(), this.getStore().storeName + "." + this.factoryFnOrPath, value) : (_a = {}, _a[this.params.formKey] = value, _a);
        this.updateStore(storeValue);
    };
    /**
     * @private
     * @param {?} control
     * @return {?}
     */
    PersistNgFormPlugin.prototype.cleanArray = /**
     * @private
     * @param {?} control
     * @return {?}
     */
    function (control) {
        while (control.length !== 0) {
            control.removeAt(0);
        }
    };
    /**
     * @private
     * @param {?} formValue
     * @param {?} root
     * @return {?}
     */
    PersistNgFormPlugin.prototype.resolveInitialValue = /**
     * @private
     * @param {?} formValue
     * @param {?} root
     * @return {?}
     */
    function (formValue, root) {
        var _this = this;
        if (!formValue)
            return;
        return Object.keys(formValue).reduce((/**
         * @param {?} acc
         * @param {?} stateKey
         * @return {?}
         */
        function (acc, stateKey) {
            /** @type {?} */
            var value = root[stateKey];
            if (Array.isArray(value) && _this.builder) {
                /** @type {?} */
                var factory_1 = _this.params.arrControlFactory;
                _this.cleanArray(_this.form.get(stateKey));
                value.forEach((/**
                 * @param {?} v
                 * @param {?} i
                 * @return {?}
                 */
                function (v, i) {
                    _this.form.get(stateKey).insert(i, ((/** @type {?} */ (factory_1)))(v));
                }));
            }
            acc[stateKey] = root[stateKey];
            return acc;
        }), {});
    };
    /**
     * @private
     * @return {?}
     */
    PersistNgFormPlugin.prototype.activate = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        var _a;
        /** @type {?} */
        var path;
        if (this.isKeyBased) {
            if (this.isRootKeys) {
                this.initialValue = this.resolveInitialValue(this.form.value, this.getQuery().getValue());
                this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });
            }
            else {
                path = this.getStore().storeName + "." + this.factoryFnOrPath;
                /** @type {?} */
                var root = getValue(this.getQuery().getValue(), path);
                this.initialValue = this.resolveInitialValue(root, root);
                this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });
            }
        }
        else {
            if (!((/** @type {?} */ (this.getQuery().getValue())))[this.params.formKey]) {
                logAction('@PersistNgFormPlugin activate');
                this.updateStore((_a = {}, _a[this.params.formKey] = ((/** @type {?} */ (this))).factoryFnOrPath(), _a));
            }
            /** @type {?} */
            var value = this.getQuery().getValue()[this.params.formKey];
            this.form.patchValue(value);
        }
        this.formChanges = this.form.valueChanges.pipe(debounceTime(this.params.debounceTime)).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            logAction('@PersistForm - Update');
            /** @type {?} */
            var newState;
            if (_this.isKeyBased) {
                if (_this.isRootKeys) {
                    newState = (/**
                     * @param {?} state
                     * @return {?}
                     */
                    function (state) { return (tslib_1.__assign({}, state, value)); });
                }
                else {
                    newState = (/**
                     * @param {?} state
                     * @return {?}
                     */
                    function (state) { return setValue(state, path, value); });
                }
            }
            else {
                newState = (/**
                 * @return {?}
                 */
                function () {
                    var _a;
                    return (_a = {}, _a[_this.params.formKey] = value, _a);
                });
            }
            _this.updateStore(newState(_this.getQuery().getValue()));
        }));
    };
    /**
     * @return {?}
     */
    PersistNgFormPlugin.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.formChanges && this.formChanges.unsubscribe();
        this.form = null;
        this.builder = null;
    };
    return PersistNgFormPlugin;
}(AkitaPlugin));
// Todo: Return  AbstractControl interface
/**
 * @template T
 */
export { PersistNgFormPlugin };
if (false) {
    /** @type {?} */
    PersistNgFormPlugin.prototype.formChanges;
    /**
     * @type {?}
     * @private
     */
    PersistNgFormPlugin.prototype.isRootKeys;
    /**
     * @type {?}
     * @private
     */
    PersistNgFormPlugin.prototype.form;
    /**
     * @type {?}
     * @private
     */
    PersistNgFormPlugin.prototype.isKeyBased;
    /**
     * @type {?}
     * @private
     */
    PersistNgFormPlugin.prototype.initialValue;
    /**
     * @type {?}
     * @private
     */
    PersistNgFormPlugin.prototype.builder;
    /**
     * @type {?}
     * @protected
     */
    PersistNgFormPlugin.prototype.query;
    /**
     * @type {?}
     * @private
     */
    PersistNgFormPlugin.prototype.factoryFnOrPath;
    /**
     * @type {?}
     * @private
     */
    PersistNgFormPlugin.prototype.params;
}
//# sourceMappingURL=data:application/json;base64,