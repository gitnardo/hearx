/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { filterNil } from '../filterNil';
import { toBoolean } from '../toBoolean';
import { getAkitaConfig } from '../config';
import { getValue } from '../getValueByString';
import { setValue } from '../setValueByString';
/**
 * @abstract
 * @template State
 */
var /**
 * @abstract
 * @template State
 */
AkitaPlugin = /** @class */ (function () {
    function AkitaPlugin(query, config) {
        this.query = query;
        if (config && config.resetFn) {
            if (getAkitaConfig().resettable) {
                this.onReset(config.resetFn);
            }
        }
    }
    /** This method is responsible for getting access to the query. */
    /**
     * This method is responsible for getting access to the query.
     * @protected
     * @return {?}
     */
    AkitaPlugin.prototype.getQuery = /**
     * This method is responsible for getting access to the query.
     * @protected
     * @return {?}
     */
    function () {
        return this.query;
    };
    /** This method is responsible for getting access to the store. */
    /**
     * This method is responsible for getting access to the store.
     * @protected
     * @return {?}
     */
    AkitaPlugin.prototype.getStore = /**
     * This method is responsible for getting access to the store.
     * @protected
     * @return {?}
     */
    function () {
        return this.getQuery().__store__;
    };
    /** This method is responsible tells whether the plugin is entityBased or not.  */
    /**
     * This method is responsible tells whether the plugin is entityBased or not.
     * @protected
     * @param {?} entityId
     * @return {?}
     */
    AkitaPlugin.prototype.isEntityBased = /**
     * This method is responsible tells whether the plugin is entityBased or not.
     * @protected
     * @param {?} entityId
     * @return {?}
     */
    function (entityId) {
        return toBoolean(entityId);
    };
    /** This method is responsible for selecting the source; it can be the whole store or one entity. */
    /**
     * This method is responsible for selecting the source; it can be the whole store or one entity.
     * @protected
     * @param {?} entityId
     * @param {?=} property
     * @return {?}
     */
    AkitaPlugin.prototype.selectSource = /**
     * This method is responsible for selecting the source; it can be the whole store or one entity.
     * @protected
     * @param {?} entityId
     * @param {?=} property
     * @return {?}
     */
    function (entityId, property) {
        var _this = this;
        if (this.isEntityBased(entityId)) {
            return ((/** @type {?} */ (this.getQuery()))).selectEntity(entityId).pipe(filterNil);
        }
        if (property) {
            return this.getQuery().select((/**
             * @param {?} state
             * @return {?}
             */
            function (state) { return getValue(state, _this.withStoreName(property)); }));
        }
        return this.getQuery().select();
    };
    /**
     * @protected
     * @param {?} entityId
     * @param {?=} property
     * @return {?}
     */
    AkitaPlugin.prototype.getSource = /**
     * @protected
     * @param {?} entityId
     * @param {?=} property
     * @return {?}
     */
    function (entityId, property) {
        if (this.isEntityBased(entityId)) {
            return ((/** @type {?} */ (this.getQuery()))).getEntity(entityId);
        }
        /** @type {?} */
        var state = this.getQuery().getValue();
        if (property) {
            return getValue(state, this.withStoreName(property));
        }
        return state;
    };
    /**
     * @protected
     * @param {?} prop
     * @return {?}
     */
    AkitaPlugin.prototype.withStoreName = /**
     * @protected
     * @param {?} prop
     * @return {?}
     */
    function (prop) {
        return this.storeName + "." + prop;
    };
    Object.defineProperty(AkitaPlugin.prototype, "storeName", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            return this.getStore().storeName;
        },
        enumerable: true,
        configurable: true
    });
    /** This method is responsible for updating the store or one entity; it can be the whole store or one entity. */
    /**
     * This method is responsible for updating the store or one entity; it can be the whole store or one entity.
     * @protected
     * @param {?} newState
     * @param {?=} entityId
     * @param {?=} property
     * @return {?}
     */
    AkitaPlugin.prototype.updateStore = /**
     * This method is responsible for updating the store or one entity; it can be the whole store or one entity.
     * @protected
     * @param {?} newState
     * @param {?=} entityId
     * @param {?=} property
     * @return {?}
     */
    function (newState, entityId, property) {
        var _this = this;
        if (this.isEntityBased(entityId)) {
            this.getStore().update(entityId, newState);
        }
        else {
            if (property) {
                this.getStore()._setState((/**
                 * @param {?} state
                 * @return {?}
                 */
                function (state) {
                    return setValue(state, _this.withStoreName(property), newState);
                }));
                return;
            }
            this.getStore()._setState((/**
             * @param {?} state
             * @return {?}
             */
            function (state) { return (tslib_1.__assign({}, state, newState)); }));
        }
    };
    /**
     * Function to invoke upon reset
     */
    /**
     * Function to invoke upon reset
     * @private
     * @param {?} fn
     * @return {?}
     */
    AkitaPlugin.prototype.onReset = /**
     * Function to invoke upon reset
     * @private
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        var _this = this;
        /** @type {?} */
        var original = this.getStore().reset;
        this.getStore().reset = (/**
         * @param {...?} params
         * @return {?}
         */
        function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            /** It should run after the plugin destroy method */
            setTimeout((/**
             * @return {?}
             */
            function () {
                original.apply(_this.getStore(), params);
                fn();
            }));
        });
    };
    return AkitaPlugin;
}());
/**
 * @abstract
 * @template State
 */
export { AkitaPlugin };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    AkitaPlugin.prototype.query;
    /**
     * This method is responsible for cleaning.
     * @abstract
     * @return {?}
     */
    AkitaPlugin.prototype.destroy = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRhdG9yYW1hL2FraXRhLyIsInNvdXJjZXMiOlsic3JjL3BsdWdpbnMvcGx1Z2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7Ozs7QUFJL0M7Ozs7O0lBQ0UscUJBQWdDLEtBQXFCLEVBQUUsTUFBK0I7UUFBdEQsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFDbkQsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRTtZQUM1QixJQUFJLGNBQWMsRUFBRSxDQUFDLFVBQVUsRUFBRTtnQkFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDOUI7U0FDRjtJQUNILENBQUM7SUFFRCxrRUFBa0U7Ozs7OztJQUN4RCw4QkFBUTs7Ozs7SUFBbEI7UUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVELGtFQUFrRTs7Ozs7O0lBQ3hELDhCQUFROzs7OztJQUFsQjtRQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLFNBQVMsQ0FBQztJQUNuQyxDQUFDO0lBS0Qsa0ZBQWtGOzs7Ozs7O0lBQ3hFLG1DQUFhOzs7Ozs7SUFBdkIsVUFBd0IsUUFBYTtRQUNuQyxPQUFPLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQsb0dBQW9HOzs7Ozs7OztJQUMxRixrQ0FBWTs7Ozs7OztJQUF0QixVQUF1QixRQUFhLEVBQUUsUUFBaUI7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QUFDO1lBQ1AsQ0FBQyxFQUFDLENBQUM7UUFDTCxDQUFDLENBQUEsQ0FBQztJQUNKLENBQUM7SUFDSCxrQkFBQztBQUFELENBQUMsQUExRkQsSUEwRkM7Ozs7Ozs7Ozs7O0lBekZ1Qiw0QkFBK0I7Ozs7OztJQW1CckQsZ0RBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUXVlcnlFbnRpdHkgfSBmcm9tICcuLi9xdWVyeUVudGl0eSc7XG5pbXBvcnQgeyBRdWVyeSB9IGZyb20gJy4uL3F1ZXJ5JztcbmltcG9ydCB7IGZpbHRlck5pbCB9IGZyb20gJy4uL2ZpbHRlck5pbCc7XG5pbXBvcnQgeyB0b0Jvb2xlYW4gfSBmcm9tICcuLi90b0Jvb2xlYW4nO1xuaW1wb3J0IHsgZ2V0QWtpdGFDb25maWcgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IHsgZ2V0VmFsdWUgfSBmcm9tICcuLi9nZXRWYWx1ZUJ5U3RyaW5nJztcbmltcG9ydCB7IHNldFZhbHVlIH0gZnJvbSAnLi4vc2V0VmFsdWVCeVN0cmluZyc7XG5cbmV4cG9ydCB0eXBlIFF1ZXJpZXM8U3RhdGU+ID0gUXVlcnk8U3RhdGU+IHwgUXVlcnlFbnRpdHk8U3RhdGU+O1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWtpdGFQbHVnaW48U3RhdGUgPSBhbnk+IHtcbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBxdWVyeTogUXVlcmllczxTdGF0ZT4sIGNvbmZpZz86IHsgcmVzZXRGbj86IEZ1bmN0aW9uIH0pIHtcbiAgICBpZiAoY29uZmlnICYmIGNvbmZpZy5yZXNldEZuKSB7XG4gICAgICBpZiAoZ2V0QWtpdGFDb25maWcoKS5yZXNldHRhYmxlKSB7XG4gICAgICAgIHRoaXMub25SZXNldChjb25maWcucmVzZXRGbik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqIFRoaXMgbWV0aG9kIGlzIHJlc3BvbnNpYmxlIGZvciBnZXR0aW5nIGFjY2VzcyB0byB0aGUgcXVlcnkuICovXG4gIHByb3RlY3RlZCBnZXRRdWVyeSgpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeTtcbiAgfVxuXG4gIC8qKiBUaGlzIG1ldGhvZCBpcyByZXNwb25zaWJsZSBmb3IgZ2V0dGluZyBhY2Nlc3MgdG8gdGhlIHN0b3JlLiAqL1xuICBwcm90ZWN0ZWQgZ2V0U3RvcmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UXVlcnkoKS5fX3N0b3JlX187XG4gIH1cblxuICAvKiogVGhpcyBtZXRob2QgaXMgcmVzcG9uc2libGUgZm9yIGNsZWFuaW5nLiAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZGVzdHJveSgpO1xuXG4gIC8qKiBUaGlzIG1ldGhvZCBpcyByZXNwb25zaWJsZSB0ZWxscyB3aGV0aGVyIHRoZSBwbHVnaW4gaXMgZW50aXR5QmFzZWQgb3Igbm90LiAgKi9cbiAgcHJvdGVjdGVkIGlzRW50aXR5QmFzZWQoZW50aXR5SWQ6IGFueSkge1xuICAgIHJldHVybiB0b0Jvb2xlYW4oZW50aXR5SWQpO1xuICB9XG5cbiAgLyoqIFRoaXMgbWV0aG9kIGlzIHJlc3BvbnNpYmxlIGZvciBzZWxlY3RpbmcgdGhlIHNvdXJjZTsgaXQgY2FuIGJlIHRoZSB3aG9sZSBzdG9yZSBvciBvbmUgZW50aXR5LiAqL1xuICBwcm90ZWN0ZWQgc2VsZWN0U291cmNlKGVudGl0eUlkOiBhbnksIHByb3BlcnR5Pzogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMuaXNFbnRpdHlCYXNlZChlbnRpdHlJZCkpIHtcbiAgICAgIHJldHVybiAodGhpcy5nZXRRdWVyeSgpIGFzIFF1ZXJ5RW50aXR5PFN0YXRlPikuc2VsZWN0RW50aXR5KGVudGl0eUlkKS5waXBlKGZpbHRlck5pbCk7XG4gICAgfVxuXG4gICAgaWYgKHByb3BlcnR5KSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRRdWVyeSgpLnNlbGVjdChzdGF0ZSA9PiBnZXRWYWx1ZShzdGF0ZSwgdGhpcy53aXRoU3RvcmVOYW1lKHByb3BlcnR5KSkpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmdldFF1ZXJ5KCkuc2VsZWN0KCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0U291cmNlKGVudGl0eUlkOiBhbnksIHByb3BlcnR5Pzogc3RyaW5nKTogYW55IHtcbiAgICBpZiAodGhpcy5pc0VudGl0eUJhc2VkKGVudGl0eUlkKSkge1xuICAgICAgcmV0dXJuICh0aGlzLmdldFF1ZXJ5KCkgYXMgUXVlcnlFbnRpdHk8U3RhdGU+KS5nZXRFbnRpdHkoZW50aXR5SWQpO1xuICAgIH1cblxuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5nZXRRdWVyeSgpLmdldFZhbHVlKCk7XG5cbiAgICBpZiAocHJvcGVydHkpIHtcbiAgICAgIHJldHVybiBnZXRWYWx1ZShzdGF0ZSwgdGhpcy53aXRoU3RvcmVOYW1lKHByb3BlcnR5KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgcHJvdGVjdGVkIHdpdGhTdG9yZU5hbWUocHJvcDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGAke3RoaXMuc3RvcmVOYW1lfS4ke3Byb3B9YDtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXQgc3RvcmVOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0b3JlKCkuc3RvcmVOYW1lO1xuICB9XG5cbiAgLyoqIFRoaXMgbWV0aG9kIGlzIHJlc3BvbnNpYmxlIGZvciB1cGRhdGluZyB0aGUgc3RvcmUgb3Igb25lIGVudGl0eTsgaXQgY2FuIGJlIHRoZSB3aG9sZSBzdG9yZSBvciBvbmUgZW50aXR5LiAqL1xuICBwcm90ZWN0ZWQgdXBkYXRlU3RvcmUobmV3U3RhdGUsIGVudGl0eUlkPywgcHJvcGVydHk/OiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5pc0VudGl0eUJhc2VkKGVudGl0eUlkKSkge1xuICAgICAgdGhpcy5nZXRTdG9yZSgpLnVwZGF0ZShlbnRpdHlJZCwgbmV3U3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcGVydHkpIHtcbiAgICAgICAgdGhpcy5nZXRTdG9yZSgpLl9zZXRTdGF0ZShzdGF0ZSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHNldFZhbHVlKHN0YXRlLCB0aGlzLndpdGhTdG9yZU5hbWUocHJvcGVydHkpLCBuZXdTdGF0ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmdldFN0b3JlKCkuX3NldFN0YXRlKHN0YXRlID0+ICh7IC4uLnN0YXRlLCAuLi5uZXdTdGF0ZSB9KSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIGludm9rZSB1cG9uIHJlc2V0XG4gICAqL1xuICBwcml2YXRlIG9uUmVzZXQoZm46IEZ1bmN0aW9uKSB7XG4gICAgY29uc3Qgb3JpZ2luYWwgPSB0aGlzLmdldFN0b3JlKCkucmVzZXQ7XG4gICAgdGhpcy5nZXRTdG9yZSgpLnJlc2V0ID0gKC4uLnBhcmFtcykgPT4ge1xuICAgICAgLyoqIEl0IHNob3VsZCBydW4gYWZ0ZXIgdGhlIHBsdWdpbiBkZXN0cm95IG1ldGhvZCAqL1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIG9yaWdpbmFsLmFwcGx5KHRoaXMuZ2V0U3RvcmUoKSwgcGFyYW1zKTtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cbn1cbiJdfQ==