/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { currentAction, setSkipAction } from './actions';
import { isDefined } from './isDefined';
import { $$addStore, $$deleteStore, $$updateStore } from './dispatchers';
import { __stores__ } from './stores';
import { capitalize } from './captialize';
import { isNotBrowser } from './root';
/** @type {?} */
var subs = [];
/**
 * @param {?=} ngZoneOrOptions
 * @param {?=} options
 * @return {?}
 */
export function akitaDevtools(ngZoneOrOptions, options) {
    if (options === void 0) { options = {}; }
    if (isNotBrowser)
        return;
    if (!((/** @type {?} */ (window))).__REDUX_DEVTOOLS_EXTENSION__) {
        return;
    }
    subs.length &&
        subs.forEach((/**
         * @param {?} s
         * @return {?}
         */
        function (s) {
            if (s.unsubscribe) {
                s.unsubscribe();
            }
            else {
                s && s();
            }
        }));
    /** @type {?} */
    var isAngular = ngZoneOrOptions && ngZoneOrOptions['run'];
    if (!isAngular) {
        ngZoneOrOptions = ngZoneOrOptions || {};
        ((/** @type {?} */ (ngZoneOrOptions))).run = (/**
         * @param {?} cb
         * @return {?}
         */
        function (cb) { return cb(); });
        options = (/** @type {?} */ (ngZoneOrOptions));
    }
    /** @type {?} */
    var defaultOptions = { name: 'Akita', shallow: true, storesWhitelist: [] };
    /** @type {?} */
    var merged = Object.assign({}, defaultOptions, options);
    /** @type {?} */
    var storesWhitelist = merged.storesWhitelist;
    /** @type {?} */
    var devTools = ((/** @type {?} */ (window))).__REDUX_DEVTOOLS_EXTENSION__.connect(merged);
    /** @type {?} */
    var appState = {};
    /** @type {?} */
    var isAllowed = (/**
     * @param {?} storeName
     * @return {?}
     */
    function (storeName) {
        if (!storesWhitelist.length) {
            return true;
        }
        return storesWhitelist.indexOf(storeName) > -1;
    });
    subs.push($$addStore.subscribe((/**
     * @param {?} storeName
     * @return {?}
     */
    function (storeName) {
        var _a;
        if (isAllowed(storeName) === false)
            return;
        appState = tslib_1.__assign({}, appState, (_a = {}, _a[storeName] = __stores__[storeName]._value(), _a));
        devTools.send({ type: "[" + capitalize(storeName) + "] - @@INIT" }, appState);
    })));
    subs.push($$deleteStore.subscribe((/**
     * @param {?} storeName
     * @return {?}
     */
    function (storeName) {
        if (isAllowed(storeName) === false)
            return;
        delete appState[storeName];
        devTools.send({ type: "[" + storeName + "] - Delete Store" }, appState);
    })));
    subs.push($$updateStore.subscribe((/**
     * @param {?} storeName
     * @return {?}
     */
    function (storeName) {
        var _a;
        if (isAllowed(storeName) === false)
            return;
        var type = currentAction.type, entityIds = currentAction.entityIds, skip = currentAction.skip;
        if (skip) {
            setSkipAction(false);
            return;
        }
        /** @type {?} */
        var store = __stores__[storeName];
        if (!store) {
            return;
        }
        if (options.shallow === false && appState[storeName]) {
            /** @type {?} */
            var isEqual = JSON.stringify(store._value()) === JSON.stringify(appState[storeName]);
            if (isEqual)
                return;
        }
        appState = tslib_1.__assign({}, appState, (_a = {}, _a[storeName] = store._value(), _a));
        /** @type {?} */
        var normalize = capitalize(storeName);
        /** @type {?} */
        var msg = isDefined(entityIds) ? "[" + normalize + "] - " + type + " (ids: " + entityIds + ")" : "[" + normalize + "] - " + type;
        if (options.logTrace) {
            console.group(msg);
            console.trace();
            console.groupEnd();
        }
        if (options.sortAlphabetically) {
            /** @type {?} */
            var sortedAppState = Object.keys(appState)
                .sort()
                .reduce((/**
             * @param {?} acc
             * @param {?} storeName
             * @return {?}
             */
            function (acc, storeName) {
                acc[storeName] = appState[storeName];
                return acc;
            }), {});
            devTools.send({ type: msg }, sortedAppState);
            return;
        }
        devTools.send({ type: msg }, appState);
    })));
    subs.push(devTools.subscribe((/**
     * @param {?} message
     * @return {?}
     */
    function (message) {
        if (message.type === 'DISPATCH') {
            /** @type {?} */
            var payloadType = message.payload.type;
            if (payloadType === 'COMMIT') {
                devTools.init(appState);
                return;
            }
            if (message.state) {
                /** @type {?} */
                var rootState_1 = JSON.parse(message.state);
                var _loop_1 = function (i, keys) {
                    /** @type {?} */
                    var storeName = keys[i];
                    if (__stores__[storeName]) {
                        ((/** @type {?} */ (ngZoneOrOptions))).run((/**
                         * @return {?}
                         */
                        function () {
                            __stores__[storeName]._setState((/**
                             * @return {?}
                             */
                            function () { return rootState_1[storeName]; }), false);
                        }));
                    }
                };
                for (var i = 0, keys = Object.keys(rootState_1); i < keys.length; i++) {
                    _loop_1(i, keys);
                }
            }
        }
    })));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2dG9vbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGF0b3JhbWEvYWtpdGEvIiwic291cmNlcyI6WyJzcmMvZGV2dG9vbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN6RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDMUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFFBQVEsQ0FBQzs7SUFpQmxDLElBQUksR0FBRyxFQUFFOzs7Ozs7QUFNYixNQUFNLFVBQVUsYUFBYSxDQUFDLGVBQXVELEVBQUUsT0FBc0M7SUFBdEMsd0JBQUEsRUFBQSxZQUFzQztJQUMzSCxJQUFJLFlBQVk7UUFBRSxPQUFPO0lBRXpCLElBQUksQ0FBQyxDQUFDLG1CQUFBLE1BQU0sRUFBTyxDQUFDLENBQUMsNEJBQTRCLEVBQUU7UUFDakQsT0FBTztLQUNSO0lBRUQsSUFBSSxDQUFDLE1BQU07UUFDVCxJQUFJLENBQUMsT0FBTzs7OztRQUFDLFVBQUEsQ0FBQztZQUNaLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRTtnQkFDakIsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO2FBQ2pCO2lCQUFNO2dCQUNMLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQzthQUNWO1FBQ0gsQ0FBQyxFQUFDLENBQUM7O1FBRUMsU0FBUyxHQUFHLGVBQWUsSUFBSSxlQUFlLENBQUMsS0FBSyxDQUFDO0lBRTNELElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDZCxlQUFlLEdBQUcsZUFBZSxJQUFJLEVBQUUsQ0FBQztRQUN4QyxDQUFDLG1CQUFBLGVBQWUsRUFBTyxDQUFDLENBQUMsR0FBRzs7OztRQUFHLFVBQUEsRUFBRSxJQUFJLE9BQUEsRUFBRSxFQUFFLEVBQUosQ0FBSSxDQUFBLENBQUM7UUFDMUMsT0FBTyxHQUFHLG1CQUFBLGVBQWUsRUFBNEIsQ0FBQztLQUN2RDs7UUFFSyxjQUFjLEdBQWdELEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRSxFQUFFLEVBQUU7O1FBQ25ILE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxjQUFjLEVBQUUsT0FBTyxDQUFDOztRQUNuRCxlQUFlLEdBQUcsTUFBTSxDQUFDLGVBQWU7O1FBQ3hDLFFBQVEsR0FBRyxDQUFDLG1CQUFBLE1BQU0sRUFBTyxDQUFDLENBQUMsNEJBQTRCLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQzs7UUFDekUsUUFBUSxHQUFHLEVBQUU7O1FBRVgsU0FBUzs7OztJQUFHLFVBQUEsU0FBUztRQUN6QixJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRTtZQUMzQixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsT0FBTyxlQUFlLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2pELENBQUMsQ0FBQTtJQUVELElBQUksQ0FBQyxJQUFJLENBQ1AsVUFBVSxDQUFDLFNBQVM7Ozs7SUFBQyxVQUFBLFNBQVM7O1FBQzVCLElBQUksU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEtBQUs7WUFBRSxPQUFPO1FBQzNDLFFBQVEsd0JBQ0gsUUFBUSxlQUNWLFNBQVMsSUFBRyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLE1BQzVDLENBQUM7UUFDRixRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQUksVUFBVSxDQUFDLFNBQVMsQ0FBQyxlQUFZLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUMzRSxDQUFDLEVBQUMsQ0FDSCxDQUFDO0lBRUYsSUFBSSxDQUFDLElBQUksQ0FDUCxhQUFhLENBQUMsU0FBUzs7OztJQUFDLFVBQUEsU0FBUztRQUMvQixJQUFJLFNBQVMsQ0FBQyxTQUFTLENBQUMsS0FBSyxLQUFLO1lBQUUsT0FBTztRQUMzQyxPQUFPLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMzQixRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQUksU0FBUyxxQkFBa0IsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3JFLENBQUMsRUFBQyxDQUNILENBQUM7SUFFRixJQUFJLENBQUMsSUFBSSxDQUNQLGFBQWEsQ0FBQyxTQUFTOzs7O0lBQUMsVUFBQSxTQUFTOztRQUMvQixJQUFJLFNBQVMsQ0FBQyxTQUFTLENBQUMsS0FBSyxLQUFLO1lBQUUsT0FBTztRQUNuQyxJQUFBLHlCQUFJLEVBQUUsbUNBQVMsRUFBRSx5QkFBSTtRQUU3QixJQUFJLElBQUksRUFBRTtZQUNSLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNyQixPQUFPO1NBQ1I7O1lBRUssS0FBSyxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUM7UUFDbkMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNWLE9BQU87U0FDUjtRQUVELElBQUksT0FBTyxDQUFDLE9BQU8sS0FBSyxLQUFLLElBQUksUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFOztnQkFDOUMsT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDdEYsSUFBSSxPQUFPO2dCQUFFLE9BQU87U0FDckI7UUFFRCxRQUFRLHdCQUNILFFBQVEsZUFDVixTQUFTLElBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUM1QixDQUFDOztZQUVJLFNBQVMsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDOztZQUNuQyxHQUFHLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFJLFNBQVMsWUFBTyxJQUFJLGVBQVUsU0FBUyxNQUFHLENBQUMsQ0FBQyxDQUFDLE1BQUksU0FBUyxZQUFPLElBQU07UUFFNUcsSUFBSSxPQUFPLENBQUMsUUFBUSxFQUFFO1lBQ3BCLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbkIsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2hCLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUNwQjtRQUVELElBQUksT0FBTyxDQUFDLGtCQUFrQixFQUFFOztnQkFDeEIsY0FBYyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO2lCQUN6QyxJQUFJLEVBQUU7aUJBQ04sTUFBTTs7Ozs7WUFBQyxVQUFDLEdBQUcsRUFBRSxTQUFTO2dCQUNyQixHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNyQyxPQUFPLEdBQUcsQ0FBQztZQUNiLENBQUMsR0FBRSxFQUFFLENBQUM7WUFFUixRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1lBQzdDLE9BQU87U0FDUjtRQUVELFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDekMsQ0FBQyxFQUFDLENBQ0gsQ0FBQztJQUVGLElBQUksQ0FBQyxJQUFJLENBQ1AsUUFBUSxDQUFDLFNBQVM7Ozs7SUFBQyxVQUFBLE9BQU87UUFDeEIsSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLFVBQVUsRUFBRTs7Z0JBQ3pCLFdBQVcsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUk7WUFFeEMsSUFBSSxXQUFXLEtBQUssUUFBUSxFQUFFO2dCQUM1QixRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUN4QixPQUFPO2FBQ1I7WUFFRCxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUU7O29CQUNYLFdBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7d0NBQ2xDLENBQUMsRUFBTSxJQUFJOzt3QkFDWixTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDekIsSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDLEVBQUU7d0JBQ3pCLENBQUMsbUJBQUEsZUFBZSxFQUFjLENBQUMsQ0FBQyxHQUFHOzs7d0JBQUM7NEJBQ2xDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTOzs7NEJBQUMsY0FBTSxPQUFBLFdBQVMsQ0FBQyxTQUFTLENBQUMsRUFBcEIsQ0FBb0IsR0FBRSxLQUFLLENBQUMsQ0FBQzt3QkFDckUsQ0FBQyxFQUFDLENBQUM7cUJBQ0o7O2dCQU5ILEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRTs0QkFBMUQsQ0FBQyxFQUFNLElBQUk7aUJBT25CO2FBQ0Y7U0FDRjtJQUNILENBQUMsRUFBQyxDQUNILENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3VycmVudEFjdGlvbiwgc2V0U2tpcEFjdGlvbiB9IGZyb20gJy4vYWN0aW9ucyc7XG5pbXBvcnQgeyBpc0RlZmluZWQgfSBmcm9tICcuL2lzRGVmaW5lZCc7XG5pbXBvcnQgeyAkJGFkZFN0b3JlLCAkJGRlbGV0ZVN0b3JlLCAkJHVwZGF0ZVN0b3JlIH0gZnJvbSAnLi9kaXNwYXRjaGVycyc7XG5pbXBvcnQgeyBfX3N0b3Jlc19fIH0gZnJvbSAnLi9zdG9yZXMnO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gJy4vY2FwdGlhbGl6ZSc7XG5pbXBvcnQgeyBpc05vdEJyb3dzZXIgfSBmcm9tICcuL3Jvb3QnO1xuXG5leHBvcnQgdHlwZSBEZXZ0b29sc09wdGlvbnMgPSB7XG4gIC8qKiBpbnN0YW5jZSBuYW1lIHZpc2libGUgaW4gZGV2dG9vbHMgKi9cbiAgbmFtZTogc3RyaW5nO1xuICAvKiogIG1heGltdW0gYWxsb3dlZCBhY3Rpb25zIHRvIGJlIHN0b3JlZCBpbiB0aGUgaGlzdG9yeSB0cmVlICovXG4gIG1heEFnZTogbnVtYmVyO1xuICBsYXRlbmN5OiBudW1iZXI7XG4gIGFjdGlvbnNCbGFja2xpc3Q6IHN0cmluZ1tdO1xuICBhY3Rpb25zV2hpdGVsaXN0OiBzdHJpbmdbXTtcbiAgc3RvcmVzV2hpdGVsaXN0OiBzdHJpbmdbXTtcbiAgc2hvdWxkQ2F0Y2hFcnJvcnM6IGJvb2xlYW47XG4gIGxvZ1RyYWNlOiBib29sZWFuO1xuICBwcmVkaWNhdGU6IChzdGF0ZTogYW55LCBhY3Rpb246IGFueSkgPT4gYm9vbGVhbjtcbiAgc2hhbGxvdzogYm9vbGVhbjtcbiAgc29ydEFscGhhYmV0aWNhbGx5OiBib29sZWFuO1xufTtcbmxldCBzdWJzID0gW107XG5cbmV4cG9ydCB0eXBlIE5nWm9uZUxpa2UgPSB7IHJ1bjogYW55IH07XG5cbmV4cG9ydCBmdW5jdGlvbiBha2l0YURldnRvb2xzKG5nWm9uZTogTmdab25lTGlrZSwgb3B0aW9ucz86IFBhcnRpYWw8RGV2dG9vbHNPcHRpb25zPik7XG5leHBvcnQgZnVuY3Rpb24gYWtpdGFEZXZ0b29scyhvcHRpb25zPzogUGFydGlhbDxEZXZ0b29sc09wdGlvbnM+KTtcbmV4cG9ydCBmdW5jdGlvbiBha2l0YURldnRvb2xzKG5nWm9uZU9yT3B0aW9ucz86IE5nWm9uZUxpa2UgfCBQYXJ0aWFsPERldnRvb2xzT3B0aW9ucz4sIG9wdGlvbnM6IFBhcnRpYWw8RGV2dG9vbHNPcHRpb25zPiA9IHt9KSB7XG4gIGlmIChpc05vdEJyb3dzZXIpIHJldHVybjtcblxuICBpZiAoISh3aW5kb3cgYXMgYW55KS5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3Vicy5sZW5ndGggJiZcbiAgICBzdWJzLmZvckVhY2gocyA9PiB7XG4gICAgICBpZiAocy51bnN1YnNjcmliZSkge1xuICAgICAgICBzLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzICYmIHMoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICBjb25zdCBpc0FuZ3VsYXIgPSBuZ1pvbmVPck9wdGlvbnMgJiYgbmdab25lT3JPcHRpb25zWydydW4nXTtcblxuICBpZiAoIWlzQW5ndWxhcikge1xuICAgIG5nWm9uZU9yT3B0aW9ucyA9IG5nWm9uZU9yT3B0aW9ucyB8fCB7fTtcbiAgICAobmdab25lT3JPcHRpb25zIGFzIGFueSkucnVuID0gY2IgPT4gY2IoKTtcbiAgICBvcHRpb25zID0gbmdab25lT3JPcHRpb25zIGFzIFBhcnRpYWw8RGV2dG9vbHNPcHRpb25zPjtcbiAgfVxuXG4gIGNvbnN0IGRlZmF1bHRPcHRpb25zOiBQYXJ0aWFsPERldnRvb2xzT3B0aW9ucz4gJiB7IG5hbWU6IHN0cmluZyB9ID0geyBuYW1lOiAnQWtpdGEnLCBzaGFsbG93OiB0cnVlLCBzdG9yZXNXaGl0ZWxpc3Q6IFtdIH07XG4gIGNvbnN0IG1lcmdlZCA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcbiAgY29uc3Qgc3RvcmVzV2hpdGVsaXN0ID0gbWVyZ2VkLnN0b3Jlc1doaXRlbGlzdDtcbiAgY29uc3QgZGV2VG9vbHMgPSAod2luZG93IGFzIGFueSkuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXy5jb25uZWN0KG1lcmdlZCk7XG4gIGxldCBhcHBTdGF0ZSA9IHt9O1xuXG4gIGNvbnN0IGlzQWxsb3dlZCA9IHN0b3JlTmFtZSA9PiB7XG4gICAgaWYgKCFzdG9yZXNXaGl0ZWxpc3QubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RvcmVzV2hpdGVsaXN0LmluZGV4T2Yoc3RvcmVOYW1lKSA+IC0xO1xuICB9O1xuXG4gIHN1YnMucHVzaChcbiAgICAkJGFkZFN0b3JlLnN1YnNjcmliZShzdG9yZU5hbWUgPT4ge1xuICAgICAgaWYgKGlzQWxsb3dlZChzdG9yZU5hbWUpID09PSBmYWxzZSkgcmV0dXJuO1xuICAgICAgYXBwU3RhdGUgPSB7XG4gICAgICAgIC4uLmFwcFN0YXRlLFxuICAgICAgICBbc3RvcmVOYW1lXTogX19zdG9yZXNfX1tzdG9yZU5hbWVdLl92YWx1ZSgpXG4gICAgICB9O1xuICAgICAgZGV2VG9vbHMuc2VuZCh7IHR5cGU6IGBbJHtjYXBpdGFsaXplKHN0b3JlTmFtZSl9XSAtIEBASU5JVGAgfSwgYXBwU3RhdGUpO1xuICAgIH0pXG4gICk7XG5cbiAgc3Vicy5wdXNoKFxuICAgICQkZGVsZXRlU3RvcmUuc3Vic2NyaWJlKHN0b3JlTmFtZSA9PiB7XG4gICAgICBpZiAoaXNBbGxvd2VkKHN0b3JlTmFtZSkgPT09IGZhbHNlKSByZXR1cm47XG4gICAgICBkZWxldGUgYXBwU3RhdGVbc3RvcmVOYW1lXTtcbiAgICAgIGRldlRvb2xzLnNlbmQoeyB0eXBlOiBgWyR7c3RvcmVOYW1lfV0gLSBEZWxldGUgU3RvcmVgIH0sIGFwcFN0YXRlKTtcbiAgICB9KVxuICApO1xuXG4gIHN1YnMucHVzaChcbiAgICAkJHVwZGF0ZVN0b3JlLnN1YnNjcmliZShzdG9yZU5hbWUgPT4ge1xuICAgICAgaWYgKGlzQWxsb3dlZChzdG9yZU5hbWUpID09PSBmYWxzZSkgcmV0dXJuO1xuICAgICAgY29uc3QgeyB0eXBlLCBlbnRpdHlJZHMsIHNraXAgfSA9IGN1cnJlbnRBY3Rpb247XG5cbiAgICAgIGlmIChza2lwKSB7XG4gICAgICAgIHNldFNraXBBY3Rpb24oZmFsc2UpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHN0b3JlID0gX19zdG9yZXNfX1tzdG9yZU5hbWVdO1xuICAgICAgaWYgKCFzdG9yZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLnNoYWxsb3cgPT09IGZhbHNlICYmIGFwcFN0YXRlW3N0b3JlTmFtZV0pIHtcbiAgICAgICAgY29uc3QgaXNFcXVhbCA9IEpTT04uc3RyaW5naWZ5KHN0b3JlLl92YWx1ZSgpKSA9PT0gSlNPTi5zdHJpbmdpZnkoYXBwU3RhdGVbc3RvcmVOYW1lXSk7XG4gICAgICAgIGlmIChpc0VxdWFsKSByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwcFN0YXRlID0ge1xuICAgICAgICAuLi5hcHBTdGF0ZSxcbiAgICAgICAgW3N0b3JlTmFtZV06IHN0b3JlLl92YWx1ZSgpXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBub3JtYWxpemUgPSBjYXBpdGFsaXplKHN0b3JlTmFtZSk7XG4gICAgICBsZXQgbXNnID0gaXNEZWZpbmVkKGVudGl0eUlkcykgPyBgWyR7bm9ybWFsaXplfV0gLSAke3R5cGV9IChpZHM6ICR7ZW50aXR5SWRzfSlgIDogYFske25vcm1hbGl6ZX1dIC0gJHt0eXBlfWA7XG5cbiAgICAgIGlmIChvcHRpb25zLmxvZ1RyYWNlKSB7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXAobXNnKTtcbiAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLnNvcnRBbHBoYWJldGljYWxseSkge1xuICAgICAgICBjb25zdCBzb3J0ZWRBcHBTdGF0ZSA9IE9iamVjdC5rZXlzKGFwcFN0YXRlKVxuICAgICAgICAgIC5zb3J0KClcbiAgICAgICAgICAucmVkdWNlKChhY2MsIHN0b3JlTmFtZSkgPT4ge1xuICAgICAgICAgICAgYWNjW3N0b3JlTmFtZV0gPSBhcHBTdGF0ZVtzdG9yZU5hbWVdO1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICB9LCB7fSk7XG5cbiAgICAgICAgZGV2VG9vbHMuc2VuZCh7IHR5cGU6IG1zZyB9LCBzb3J0ZWRBcHBTdGF0ZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZGV2VG9vbHMuc2VuZCh7IHR5cGU6IG1zZyB9LCBhcHBTdGF0ZSk7XG4gICAgfSlcbiAgKTtcblxuICBzdWJzLnB1c2goXG4gICAgZGV2VG9vbHMuc3Vic2NyaWJlKG1lc3NhZ2UgPT4ge1xuICAgICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gJ0RJU1BBVENIJykge1xuICAgICAgICBjb25zdCBwYXlsb2FkVHlwZSA9IG1lc3NhZ2UucGF5bG9hZC50eXBlO1xuXG4gICAgICAgIGlmIChwYXlsb2FkVHlwZSA9PT0gJ0NPTU1JVCcpIHtcbiAgICAgICAgICBkZXZUb29scy5pbml0KGFwcFN0YXRlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWVzc2FnZS5zdGF0ZSkge1xuICAgICAgICAgIGNvbnN0IHJvb3RTdGF0ZSA9IEpTT04ucGFyc2UobWVzc2FnZS5zdGF0ZSk7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGtleXMgPSBPYmplY3Qua2V5cyhyb290U3RhdGUpOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgc3RvcmVOYW1lID0ga2V5c1tpXTtcbiAgICAgICAgICAgIGlmIChfX3N0b3Jlc19fW3N0b3JlTmFtZV0pIHtcbiAgICAgICAgICAgICAgKG5nWm9uZU9yT3B0aW9ucyBhcyBOZ1pvbmVMaWtlKS5ydW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIF9fc3RvcmVzX19bc3RvcmVOYW1lXS5fc2V0U3RhdGUoKCkgPT4gcm9vdFN0YXRlW3N0b3JlTmFtZV0sIGZhbHNlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgKTtcbn1cbiJdfQ==