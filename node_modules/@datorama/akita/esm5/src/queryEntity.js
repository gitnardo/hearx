/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { of } from 'rxjs';
import { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';
import { distinctUntilArrayItemChanged } from './arrayFind';
import { entitiesToArray } from './entitiesToArray';
import { entitiesToMap } from './entitiesToMap';
import { findEntityByPredicate, getEntity } from './getEntity';
import { isArray } from './isArray';
import { isDefined } from './isDefined';
import { isFunction } from './isFunction';
import { isNil } from './isNil';
import { isUndefined } from './isUndefined';
import { mapSkipUndefined } from './mapSkipUndefined';
import { Query } from './query';
import { sortByOptions } from './sortByOptions';
import { toBoolean } from './toBoolean';
/**
 *
 *  The Entity Query is similar to the general Query, with additional functionality tailored for EntityStores.
 *
 *  class WidgetsQuery extends QueryEntity<WidgetsState> {
 *     constructor(protected store: WidgetsStore) {
 *       super(store);
 *     }
 *  }
 *
 *
 *
 * @template S, EntityType, IDType
 */
var /**
 *
 *  The Entity Query is similar to the general Query, with additional functionality tailored for EntityStores.
 *
 *  class WidgetsQuery extends QueryEntity<WidgetsState> {
 *     constructor(protected store: WidgetsStore) {
 *       super(store);
 *     }
 *  }
 *
 *
 *
 * @template S, EntityType, IDType
 */
QueryEntity = /** @class */ (function (_super) {
    tslib_1.__extends(QueryEntity, _super);
    function QueryEntity(store, options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, store) || this;
        _this.options = options;
        _this.__store__ = store;
        return _this;
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    QueryEntity.prototype.selectAll = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        if (options === void 0) { options = {
            asObject: false
        }; }
        return this.select((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return state.entities; })).pipe(map((/**
         * @return {?}
         */
        function () { return _this.getAll(options); })));
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    QueryEntity.prototype.getAll = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        if (options === void 0) { options = { asObject: false, filterBy: undefined, limitTo: undefined }; }
        if (options.asObject) {
            return entitiesToMap(this.getValue(), options);
        }
        sortByOptions(options, this.config || this.options);
        return entitiesToArray(this.getValue(), options);
    };
    /**
     * @template R
     * @param {?} ids
     * @param {?=} project
     * @return {?}
     */
    QueryEntity.prototype.selectMany = /**
     * @template R
     * @param {?} ids
     * @param {?=} project
     * @return {?}
     */
    function (ids, project) {
        if (!ids || !ids.length)
            return of([]);
        return this.select((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return state.entities; })).pipe(map((/**
         * @param {?} entities
         * @return {?}
         */
        function (entities) { return mapSkipUndefined(ids, (/**
         * @param {?} id
         * @return {?}
         */
        function (id) { return getEntity(id, project)(entities); })); })), distinctUntilArrayItemChanged());
    };
    /**
     * @template R
     * @param {?} idOrPredicate
     * @param {?=} project
     * @return {?}
     */
    QueryEntity.prototype.selectEntity = /**
     * @template R
     * @param {?} idOrPredicate
     * @param {?=} project
     * @return {?}
     */
    function (idOrPredicate, project) {
        /** @type {?} */
        var id = idOrPredicate;
        if (isFunction(idOrPredicate)) {
            // For performance reason we expect the entity to be in the store
            ((/** @type {?} */ (id))) = findEntityByPredicate(idOrPredicate, this.getValue().entities);
        }
        return this.select((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return state.entities; })).pipe(map(getEntity(id, project)), distinctUntilChanged());
    };
    /**
     * Get an entity by id
     *
     * @example
     *
     * this.query.getEntity(1);
     */
    /**
     * Get an entity by id
     *
     * \@example
     *
     * this.query.getEntity(1);
     * @param {?} id
     * @return {?}
     */
    QueryEntity.prototype.getEntity = /**
     * Get an entity by id
     *
     * \@example
     *
     * this.query.getEntity(1);
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.getValue().entities[(/** @type {?} */ (id))];
    };
    /**
     * Select the active entity's id
     *
     * @example
     *
     * this.query.selectActiveId()
     */
    /**
     * Select the active entity's id
     *
     * \@example
     *
     * this.query.selectActiveId()
     * @return {?}
     */
    QueryEntity.prototype.selectActiveId = /**
     * Select the active entity's id
     *
     * \@example
     *
     * this.query.selectActiveId()
     * @return {?}
     */
    function () {
        return this.select((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return ((/** @type {?} */ (state))).active; }));
    };
    /**
     * Get the active id
     *
     * @example
     *
     * this.query.getActiveId()
     */
    /**
     * Get the active id
     *
     * \@example
     *
     * this.query.getActiveId()
     * @return {?}
     */
    QueryEntity.prototype.getActiveId = /**
     * Get the active id
     *
     * \@example
     *
     * this.query.getActiveId()
     * @return {?}
     */
    function () {
        return this.getValue().active;
    };
    /**
     * @template R
     * @param {?=} project
     * @return {?}
     */
    QueryEntity.prototype.selectActive = /**
     * @template R
     * @param {?=} project
     * @return {?}
     */
    function (project) {
        var _this = this;
        if (isArray(this.getActive())) {
            return this.selectActiveId().pipe(switchMap((/**
             * @param {?} ids
             * @return {?}
             */
            function (ids) { return _this.selectMany(ids, project); })));
        }
        return this.selectActiveId().pipe(switchMap((/**
         * @param {?} ids
         * @return {?}
         */
        function (ids) { return _this.selectEntity(ids, project); })));
    };
    /**
     * @return {?}
     */
    QueryEntity.prototype.getActive = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var activeId = this.getActiveId();
        if (isArray(activeId)) {
            return activeId.map((/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return _this.getValue().entities[(/** @type {?} */ (id))]; }));
        }
        return toBoolean(activeId) ? this.getEntity(activeId) : undefined;
    };
    /**
     * Select the store's entity collection length
     *
     * @example
     *
     * this.query.selectCount()
     * this.query.selectCount(entity => entity.completed)
     */
    /**
     * Select the store's entity collection length
     *
     * \@example
     *
     * this.query.selectCount()
     * this.query.selectCount(entity => entity.completed)
     * @param {?=} predicate
     * @return {?}
     */
    QueryEntity.prototype.selectCount = /**
     * Select the store's entity collection length
     *
     * \@example
     *
     * this.query.selectCount()
     * this.query.selectCount(entity => entity.completed)
     * @param {?=} predicate
     * @return {?}
     */
    function (predicate) {
        var _this = this;
        return this.select((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return state.entities; })).pipe(map((/**
         * @return {?}
         */
        function () { return _this.getCount(predicate); })));
    };
    /**
     * Get the store's entity collection length
     *
     * @example
     *
     * this.query.getCount()
     * this.query.getCount(entity => entity.completed)
     */
    /**
     * Get the store's entity collection length
     *
     * \@example
     *
     * this.query.getCount()
     * this.query.getCount(entity => entity.completed)
     * @param {?=} predicate
     * @return {?}
     */
    QueryEntity.prototype.getCount = /**
     * Get the store's entity collection length
     *
     * \@example
     *
     * this.query.getCount()
     * this.query.getCount(entity => entity.completed)
     * @param {?=} predicate
     * @return {?}
     */
    function (predicate) {
        if (isFunction(predicate)) {
            return this.getAll().filter(predicate).length;
        }
        return this.getValue().ids.length;
    };
    /**
     * @template R
     * @param {?=} project
     * @return {?}
     */
    QueryEntity.prototype.selectLast = /**
     * @template R
     * @param {?=} project
     * @return {?}
     */
    function (project) {
        return this.selectAt((/**
         * @param {?} ids
         * @return {?}
         */
        function (ids) { return ids[ids.length - 1]; }), project);
    };
    /**
     * @template R
     * @param {?=} project
     * @return {?}
     */
    QueryEntity.prototype.selectFirst = /**
     * @template R
     * @param {?=} project
     * @return {?}
     */
    function (project) {
        return this.selectAt((/**
         * @param {?} ids
         * @return {?}
         */
        function (ids) { return ids[0]; }), project);
    };
    /**
     * @param {?=} action
     * @return {?}
     */
    QueryEntity.prototype.selectEntityAction = /**
     * @param {?=} action
     * @return {?}
     */
    function (action) {
        if (isUndefined(action)) {
            return this.store.selectEntityAction$;
        }
        return this.store.selectEntityAction$.pipe(filter((/**
         * @param {?} ac
         * @return {?}
         */
        function (ac) { return ac.type === action; })), map((/**
         * @param {?} action
         * @return {?}
         */
        function (action) { return action.ids; })));
    };
    /**
     * @param {?=} projectOrIds
     * @return {?}
     */
    QueryEntity.prototype.hasEntity = /**
     * @param {?=} projectOrIds
     * @return {?}
     */
    function (projectOrIds) {
        var _this = this;
        if (isNil(projectOrIds)) {
            return this.getValue().ids.length > 0;
        }
        if (isFunction(projectOrIds)) {
            return this.getAll().some(projectOrIds);
        }
        if (isArray(projectOrIds)) {
            return projectOrIds.every((/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return ((/** @type {?} */ (id))) in _this.getValue().entities; }));
        }
        return ((/** @type {?} */ (projectOrIds))) in this.getValue().entities;
    };
    /**
     * Returns whether entity store has an active entity
     *
     * @example
     *
     * this.query.hasActive()
     * this.query.hasActive(3)
     *
     */
    /**
     * Returns whether entity store has an active entity
     *
     * \@example
     *
     * this.query.hasActive()
     * this.query.hasActive(3)
     *
     * @param {?=} id
     * @return {?}
     */
    QueryEntity.prototype.hasActive = /**
     * Returns whether entity store has an active entity
     *
     * \@example
     *
     * this.query.hasActive()
     * this.query.hasActive(3)
     *
     * @param {?=} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var active = this.getValue().active;
        /** @type {?} */
        var isIdProvided = isDefined(id);
        if (Array.isArray(active)) {
            if (isIdProvided) {
                return active.includes(id);
            }
            return active.length > 0;
        }
        return isIdProvided ? active === id : isDefined(active);
    };
    /**
     *
     * Create sub UI query for querying Entity's UI state
     *
     * @example
     *
     *
     * export class ProductsQuery extends QueryEntity<ProductsState> {
     *   ui: EntityUIQuery<ProductsUIState>;
     *
     *   constructor(protected store: ProductsStore) {
     *     super(store);
     *     this.createUIQuery();
     *   }
     *
     * }
     */
    /**
     *
     * Create sub UI query for querying Entity's UI state
     *
     * \@example
     *
     *
     * export class ProductsQuery extends QueryEntity<ProductsState> {
     *   ui: EntityUIQuery<ProductsUIState>;
     *
     *   constructor(protected store: ProductsStore) {
     *     super(store);
     *     this.createUIQuery();
     *   }
     *
     * }
     * @return {?}
     */
    QueryEntity.prototype.createUIQuery = /**
     *
     * Create sub UI query for querying Entity's UI state
     *
     * \@example
     *
     *
     * export class ProductsQuery extends QueryEntity<ProductsState> {
     *   ui: EntityUIQuery<ProductsUIState>;
     *
     *   constructor(protected store: ProductsStore) {
     *     super(store);
     *     this.createUIQuery();
     *   }
     *
     * }
     * @return {?}
     */
    function () {
        this.ui = new EntityUIQuery(this.__store__.ui);
    };
    /**
     * @private
     * @template R
     * @param {?} mapFn
     * @param {?=} project
     * @return {?}
     */
    QueryEntity.prototype.selectAt = /**
     * @private
     * @template R
     * @param {?} mapFn
     * @param {?=} project
     * @return {?}
     */
    function (mapFn, project) {
        var _this = this;
        return this.select((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return (/** @type {?} */ (state.ids)); })).pipe(map(mapFn), distinctUntilChanged(), switchMap((/**
         * @param {?} id
         * @return {?}
         */
        function (id) { return _this.selectEntity(id, project); })));
    };
    return QueryEntity;
}(Query));
/**
 *
 *  The Entity Query is similar to the general Query, with additional functionality tailored for EntityStores.
 *
 *  class WidgetsQuery extends QueryEntity<WidgetsState> {
 *     constructor(protected store: WidgetsStore) {
 *       super(store);
 *     }
 *  }
 *
 *
 *
 * @template S, EntityType, IDType
 */
export { QueryEntity };
if (false) {
    /** @type {?} */
    QueryEntity.prototype.ui;
    /**
     * @type {?}
     * @protected
     */
    QueryEntity.prototype.store;
    /** @type {?} */
    QueryEntity.prototype.__store__;
    /**
     * @type {?}
     * @private
     */
    QueryEntity.prototype.options;
}
// @internal
/**
 * @template UIState, DEPRECATED
 */
var 
// @internal
/**
 * @template UIState, DEPRECATED
 */
EntityUIQuery = /** @class */ (function (_super) {
    tslib_1.__extends(EntityUIQuery, _super);
    function EntityUIQuery(store) {
        return _super.call(this, store) || this;
    }
    return EntityUIQuery;
}(QueryEntity));
// @internal
/**
 * @template UIState, DEPRECATED
 */
export { EntityUIQuery };
//# sourceMappingURL=data:application/json;base64,