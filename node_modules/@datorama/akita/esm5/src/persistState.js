/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { filter, skip } from 'rxjs/operators';
import { from, isObservable, of, ReplaySubject } from 'rxjs';
import { isFunction } from './isFunction';
import { AkitaError } from './errors';
import { __stores__ } from './stores';
import { getValue } from './getValueByString';
import { setAction } from './actions';
import { setValue } from './setValueByString';
import { $$addStore, $$deleteStore } from './dispatchers';
import { isNil } from './isNil';
import { isObject } from './isObject';
import { isNotBrowser, hasLocalStorage, hasSessionStorage } from './root';
/** @type {?} */
var skipStorageUpdate = false;
/** @type {?} */
var _persistStateInit = new ReplaySubject(1);
/**
 * @return {?}
 */
export function selectPersistStateInit() {
    return _persistStateInit.asObservable();
}
/**
 * @param {?} skip
 * @return {?}
 */
export function setSkipStorageUpdate(skip) {
    skipStorageUpdate = skip;
}
/**
 * @return {?}
 */
export function getSkipStorageUpdate() {
    return skipStorageUpdate;
}
/**
 * @record
 */
export function PersistStateStorage() { }
if (false) {
    /**
     * @param {?} key
     * @return {?}
     */
    PersistStateStorage.prototype.getItem = function (key) { };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    PersistStateStorage.prototype.setItem = function (key, value) { };
    /**
     * @return {?}
     */
    PersistStateStorage.prototype.clear = function () { };
}
/**
 * @param {?} v
 * @return {?}
 */
function isPromise(v) {
    return v && isFunction(v.then);
}
/**
 * @param {?} asyncOrValue
 * @return {?}
 */
function observify(asyncOrValue) {
    if (isPromise(asyncOrValue) || isObservable(asyncOrValue)) {
        return from(asyncOrValue);
    }
    return of(asyncOrValue);
}
/**
 * @record
 */
export function PersistStateParams() { }
if (false) {
    /**
     * The storage key
     * @type {?}
     */
    PersistStateParams.prototype.key;
    /**
     * Whether to enable persistState in a non-browser environment
     * @type {?}
     */
    PersistStateParams.prototype.enableInNonBrowser;
    /**
     * Storage strategy to use. This defaults to LocalStorage but you can pass SessionStorage or anything that implements the StorageEngine API.
     * @type {?}
     */
    PersistStateParams.prototype.storage;
    /**
     * Custom deserializer. Defaults to JSON.parse
     * @type {?}
     */
    PersistStateParams.prototype.deserialize;
    /**
     * Custom serializer, defaults to JSON.stringify
     * @type {?}
     */
    PersistStateParams.prototype.serialize;
    /**
     * By default the whole state is saved to storage, use this param to include only the stores you need.
     * Pay attention that you can't use both include and exclude
     * @type {?}
     */
    PersistStateParams.prototype.include;
    /**
     *  By default the whole state is saved to storage, use this param to exclude stores that you don't need.
     *  Pay attention that you can't use both include and exclude
     * @type {?}
     */
    PersistStateParams.prototype.exclude;
    /** @type {?} */
    PersistStateParams.prototype.skipStorageUpdate;
    /** @type {?} */
    PersistStateParams.prototype.preStorageUpdateOperator;
    /**
     * Whether to persist a dynamic store upon destroy
     * @type {?}
     */
    PersistStateParams.prototype.persistOnDestroy;
    /**
     * @param {?} storeName
     * @param {?} state
     * @return {?}
     */
    PersistStateParams.prototype.preStorageUpdate = function (storeName, state) { };
    /**
     * @param {?} storeName
     * @param {?} state
     * @return {?}
     */
    PersistStateParams.prototype.preStoreUpdate = function (storeName, state) { };
}
/**
 * @param {?=} params
 * @return {?}
 */
export function persistState(params) {
    /** @type {?} */
    var defaults = {
        key: 'AkitaStores',
        enableInNonBrowser: false,
        storage: !hasLocalStorage() ? params.storage : localStorage,
        deserialize: JSON.parse,
        serialize: JSON.stringify,
        include: [],
        /**
         * @deprecated use include with a callback
         */
        exclude: [],
        persistOnDestroy: false,
        preStorageUpdate: (/**
         * @param {?} storeName
         * @param {?} state
         * @return {?}
         */
        function (storeName, state) {
            return state;
        }),
        preStoreUpdate: (/**
         * @param {?} storeName
         * @param {?} state
         * @return {?}
         */
        function (storeName, state) {
            return state;
        }),
        skipStorageUpdate: getSkipStorageUpdate,
        preStorageUpdateOperator: (/**
         * @return {?}
         */
        function () { return (/**
         * @param {?} source
         * @return {?}
         */
        function (source) { return source; }); })
    };
    var _a = Object.assign({}, defaults, params), storage = _a.storage, enableInNonBrowser = _a.enableInNonBrowser, deserialize = _a.deserialize, serialize = _a.serialize, include = _a.include, exclude = _a.exclude, key = _a.key, preStorageUpdate = _a.preStorageUpdate, persistOnDestroy = _a.persistOnDestroy, preStorageUpdateOperator = _a.preStorageUpdateOperator, preStoreUpdate = _a.preStoreUpdate, skipStorageUpdate = _a.skipStorageUpdate;
    if ((isNotBrowser && !enableInNonBrowser) || !storage)
        return;
    /** @type {?} */
    var hasInclude = include.length > 0;
    /** @type {?} */
    var hasExclude = exclude.length > 0;
    /** @type {?} */
    var includeStores;
    if (hasInclude && hasExclude) {
        throw new AkitaError("You can't use both include and exclude");
    }
    if (hasInclude) {
        includeStores = include.reduce((/**
         * @param {?} acc
         * @param {?} path
         * @return {?}
         */
        function (acc, path) {
            if (isFunction(path)) {
                acc.fns.push(path);
            }
            else {
                /** @type {?} */
                var storeName = path.split('.')[0];
                acc[storeName] = path;
            }
            return acc;
        }), { fns: [] });
    }
    /** @type {?} */
    var stores = {};
    /** @type {?} */
    var acc = {};
    /** @type {?} */
    var subscriptions = [];
    /** @type {?} */
    var buffer = [];
    /**
     * @param {?} v
     * @return {?}
     */
    function _save(v) {
        observify(v).subscribe((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var next = buffer.shift();
            next && _save(next);
        }));
    }
    // when we use the local/session storage we perform the serialize, otherwise we let the passed storage implementation to do it
    /** @type {?} */
    var isLocalStorage = (hasLocalStorage() && storage === localStorage) || (hasSessionStorage() && storage === sessionStorage);
    observify(storage.getItem(key)).subscribe((/**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var storageState = isObject(value) ? value : deserialize(value || '{}');
        /**
         * @param {?} storeCache
         * @return {?}
         */
        function save(storeCache) {
            storageState['$cache'] = tslib_1.__assign({}, (storageState['$cache'] || {}), storeCache);
            storageState = Object.assign({}, storageState, acc);
            buffer.push(storage.setItem(key, isLocalStorage ? serialize(storageState) : storageState));
            _save(buffer.shift());
        }
        /**
         * @param {?} storeName
         * @param {?} path
         * @return {?}
         */
        function subscribe(storeName, path) {
            stores[storeName] = __stores__[storeName]
                ._select((/**
             * @param {?} state
             * @return {?}
             */
            function (state) { return getValue(state, path); }))
                .pipe(skip(1), filter((/**
             * @return {?}
             */
            function () { return skipStorageUpdate() === false; })), preStorageUpdateOperator())
                .subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                acc[storeName] = preStorageUpdate(storeName, data);
                Promise.resolve().then((/**
                 * @return {?}
                 */
                function () {
                    var _a;
                    return save((_a = {}, _a[storeName] = __stores__[storeName]._cache().getValue(), _a));
                }));
            }));
        }
        /**
         * @param {?} storeName
         * @param {?} store
         * @param {?} path
         * @return {?}
         */
        function setInitial(storeName, store, path) {
            if (storeName in storageState) {
                setAction('@PersistState');
                store._setState((/**
                 * @param {?} state
                 * @return {?}
                 */
                function (state) {
                    return setValue(state, path, preStoreUpdate(storeName, storageState[storeName]));
                }));
                /** @type {?} */
                var hasCache = storageState['$cache'] ? storageState['$cache'][storeName] : false;
                __stores__[storeName].setHasCache(hasCache, { restartTTL: true });
            }
        }
        subscriptions.push($$deleteStore.subscribe((/**
         * @param {?} storeName
         * @return {?}
         */
        function (storeName) {
            var _a;
            if (stores[storeName]) {
                if (persistOnDestroy === false) {
                    save((_a = {}, _a[storeName] = false, _a));
                }
                stores[storeName].unsubscribe();
                delete stores[storeName];
            }
        })));
        subscriptions.push($$addStore.subscribe((/**
         * @param {?} storeName
         * @return {?}
         */
        function (storeName) {
            if (storeName === 'router' || (hasExclude && exclude.includes(storeName))) {
                return;
            }
            /** @type {?} */
            var store = __stores__[storeName];
            if (hasInclude) {
                /** @type {?} */
                var path = includeStores[storeName];
                if (!path) {
                    /** @type {?} */
                    var passPredicate = includeStores.fns.some((/**
                     * @param {?} fn
                     * @return {?}
                     */
                    function (fn) { return fn(storeName); }));
                    if (passPredicate) {
                        path = storeName;
                    }
                    else {
                        return;
                    }
                }
                setInitial(storeName, store, path);
                subscribe(storeName, path);
            }
            else {
                setInitial(storeName, store, storeName);
                subscribe(storeName, storeName);
            }
        })));
        _persistStateInit.next();
    }));
    return {
        destroy: /**
         * @return {?}
         */
        function () {
            subscriptions.forEach((/**
             * @param {?} s
             * @return {?}
             */
            function (s) { return s.unsubscribe(); }));
            for (var i = 0, keys = Object.keys(stores); i < keys.length; i++) {
                /** @type {?} */
                var storeName = keys[i];
                stores[storeName].unsubscribe();
            }
            stores = {};
        },
        clear: /**
         * @return {?}
         */
        function () {
            storage.clear();
        },
        clearStore: /**
         * @param {?=} storeName
         * @return {?}
         */
        function (storeName) {
            if (isNil(storeName)) {
                /** @type {?} */
                var value_1 = observify(storage.setItem(key, '{}'));
                value_1.subscribe();
                return;
            }
            /** @type {?} */
            var value = storage.getItem(key);
            observify(value).subscribe((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                /** @type {?} */
                var storageState = deserialize(v || '{}');
                if (storageState[storeName]) {
                    delete storageState[storeName];
                    /** @type {?} */
                    var value_2 = observify(storage.setItem(key, serialize(storageState)));
                    value_2.subscribe();
                }
            }));
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc2lzdFN0YXRlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRhdG9yYW1hL2FraXRhLyIsInNvdXJjZXMiOlsic3JjL3BlcnNpc3RTdGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFvQixhQUFhLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBRTdGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDMUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDdEMsT0FBTyxFQUFFLFlBQVksRUFBRSxlQUFlLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxRQUFRLENBQUM7O0lBRXRFLGlCQUFpQixHQUFHLEtBQUs7O0lBRXZCLGlCQUFpQixHQUFHLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQzs7OztBQUU5QyxNQUFNLFVBQVUsc0JBQXNCO0lBQ3BDLE9BQU8saUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDMUMsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsb0JBQW9CLENBQUMsSUFBYTtJQUNoRCxpQkFBaUIs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RCxLQUFLOzs7O1lBQ0gsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2xCLENBQUM7UUFDRCxVQUFVOzs7O2tCQUFDLFNBQWtCO1lBQzNCLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFOztvQkFDZCxPQUFLLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUNuRCxPQUFLLENBQUMsU0FBUyxFQUFFLENBQUM7Z0JBQ2xCLE9BQU87YUFDUjs7Z0JBQ0ssS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1lBQ2xDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTOzs7O1lBQUMsVUFBQSxDQUFDOztvQkFDcEIsWUFBWSxHQUFHLFdBQVcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO2dCQUUzQyxJQUFJLFlBQVksQ0FBQyxTQUFTLENBQUMsRUFBRTtvQkFDM0IsT0FBTyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7O3dCQUN6QixPQUFLLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO29CQUN0RSxPQUFLLENBQUMsU0FBUyxFQUFFLENBQUM7aUJBQ25CO1lBQ0gsQ0FBQyxFQUFDLENBQUM7UUFDTCxDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmaWx0ZXIsIHNraXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBmcm9tLCBpc09ic2VydmFibGUsIG9mLCBPcGVyYXRvckZ1bmN0aW9uLCBSZXBsYXlTdWJqZWN0LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEhhc2hNYXAsIE1heWJlQXN5bmMgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgQWtpdGFFcnJvciB9IGZyb20gJy4vZXJyb3JzJztcbmltcG9ydCB7IF9fc3RvcmVzX18gfSBmcm9tICcuL3N0b3Jlcyc7XG5pbXBvcnQgeyBnZXRWYWx1ZSB9IGZyb20gJy4vZ2V0VmFsdWVCeVN0cmluZyc7XG5pbXBvcnQgeyBzZXRBY3Rpb24gfSBmcm9tICcuL2FjdGlvbnMnO1xuaW1wb3J0IHsgc2V0VmFsdWUgfSBmcm9tICcuL3NldFZhbHVlQnlTdHJpbmcnO1xuaW1wb3J0IHsgJCRhZGRTdG9yZSwgJCRkZWxldGVTdG9yZSB9IGZyb20gJy4vZGlzcGF0Y2hlcnMnO1xuaW1wb3J0IHsgaXNOaWwgfSBmcm9tICcuL2lzTmlsJztcbmltcG9ydCB7IGlzT2JqZWN0IH0gZnJvbSAnLi9pc09iamVjdCc7XG5pbXBvcnQgeyBpc05vdEJyb3dzZXIsIGhhc0xvY2FsU3RvcmFnZSwgaGFzU2Vzc2lvblN0b3JhZ2UgfSBmcm9tICcuL3Jvb3QnO1xuXG5sZXQgc2tpcFN0b3JhZ2VVcGRhdGUgPSBmYWxzZTtcblxuY29uc3QgX3BlcnNpc3RTdGF0ZUluaXQgPSBuZXcgUmVwbGF5U3ViamVjdCgxKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdFBlcnNpc3RTdGF0ZUluaXQoKSB7XG4gIHJldHVybiBfcGVyc2lzdFN0YXRlSW5pdC5hc09ic2VydmFibGUoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFNraXBTdG9yYWdlVXBkYXRlKHNraXA6IGJvb2xlYW4pIHtcbiAgc2tpcFN0b3JhZ2VVcGRhdGUgPSBza2lwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2tpcFN0b3JhZ2VVcGRhdGUoKSB7XG4gIHJldHVybiBza2lwU3RvcmFnZVVwZGF0ZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQZXJzaXN0U3RhdGVTdG9yYWdlIHtcbiAgZ2V0SXRlbShrZXk6IHN0cmluZyk6IE1heWJlQXN5bmM7XG5cbiAgc2V0SXRlbShrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IE1heWJlQXN5bmM7XG5cbiAgY2xlYXIoKTogdm9pZDtcbn1cblxuZnVuY3Rpb24gaXNQcm9taXNlKHY6IGFueSkge1xuICByZXR1cm4gdiAmJiBpc0Z1bmN0aW9uKHYudGhlbik7XG59XG5cbmZ1bmN0aW9uIG9ic2VydmlmeShhc3luY09yVmFsdWU6IGFueSkge1xuICBpZiAoaXNQcm9taXNlKGFzeW5jT3JWYWx1ZSkgfHwgaXNPYnNlcnZhYmxlKGFzeW5jT3JWYWx1ZSkpIHtcbiAgICByZXR1cm4gZnJvbShhc3luY09yVmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIG9mKGFzeW5jT3JWYWx1ZSk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGVyc2lzdFN0YXRlUGFyYW1zIHtcbiAgLyoqIFRoZSBzdG9yYWdlIGtleSAqL1xuICBrZXk6IHN0cmluZztcbiAgLyoqIFdoZXRoZXIgdG8gZW5hYmxlIHBlcnNpc3RTdGF0ZSBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50ICovXG4gIGVuYWJsZUluTm9uQnJvd3NlcjogYm9vbGVhbjtcbiAgLyoqIFN0b3JhZ2Ugc3RyYXRlZ3kgdG8gdXNlLiBUaGlzIGRlZmF1bHRzIHRvIExvY2FsU3RvcmFnZSBidXQgeW91IGNhbiBwYXNzIFNlc3Npb25TdG9yYWdlIG9yIGFueXRoaW5nIHRoYXQgaW1wbGVtZW50cyB0aGUgU3RvcmFnZUVuZ2luZSBBUEkuICovXG4gIHN0b3JhZ2U6IFBlcnNpc3RTdGF0ZVN0b3JhZ2U7XG4gIC8qKiBDdXN0b20gZGVzZXJpYWxpemVyLiBEZWZhdWx0cyB0byBKU09OLnBhcnNlICovXG4gIGRlc2VyaWFsaXplOiBGdW5jdGlvbjtcbiAgLyoqIEN1c3RvbSBzZXJpYWxpemVyLCBkZWZhdWx0cyB0byBKU09OLnN0cmluZ2lmeSAqL1xuICBzZXJpYWxpemU6IEZ1bmN0aW9uO1xuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgd2hvbGUgc3RhdGUgaXMgc2F2ZWQgdG8gc3RvcmFnZSwgdXNlIHRoaXMgcGFyYW0gdG8gaW5jbHVkZSBvbmx5IHRoZSBzdG9yZXMgeW91IG5lZWQuXG4gICAqIFBheSBhdHRlbnRpb24gdGhhdCB5b3UgY2FuJ3QgdXNlIGJvdGggaW5jbHVkZSBhbmQgZXhjbHVkZVxuICAgKi9cbiAgaW5jbHVkZTogKHN0cmluZyB8ICgoc3RvcmVOYW1lOiBzdHJpbmcpID0+IGJvb2xlYW4pKVtdO1xuICAvKipcbiAgICogIEJ5IGRlZmF1bHQgdGhlIHdob2xlIHN0YXRlIGlzIHNhdmVkIHRvIHN0b3JhZ2UsIHVzZSB0aGlzIHBhcmFtIHRvIGV4Y2x1ZGUgc3RvcmVzIHRoYXQgeW91IGRvbid0IG5lZWQuXG4gICAqICBQYXkgYXR0ZW50aW9uIHRoYXQgeW91IGNhbid0IHVzZSBib3RoIGluY2x1ZGUgYW5kIGV4Y2x1ZGVcbiAgICovXG4gIGV4Y2x1ZGU6IHN0cmluZ1tdO1xuXG4gIHByZVN0b3JhZ2VVcGRhdGUoc3RvcmVOYW1lOiBzdHJpbmcsIHN0YXRlOiBhbnkpOiBhbnk7XG5cbiAgcHJlU3RvcmVVcGRhdGUoc3RvcmVOYW1lOiBzdHJpbmcsIHN0YXRlOiBhbnkpOiBhbnk7XG5cbiAgc2tpcFN0b3JhZ2VVcGRhdGU6ICgpID0+IGJvb2xlYW47XG4gIHByZVN0b3JhZ2VVcGRhdGVPcGVyYXRvcjogKCkgPT4gT3BlcmF0b3JGdW5jdGlvbjxhbnksIGFueT47XG4gIC8qKiBXaGV0aGVyIHRvIHBlcnNpc3QgYSBkeW5hbWljIHN0b3JlIHVwb24gZGVzdHJveSAqL1xuICBwZXJzaXN0T25EZXN0cm95OiBib29sZWFuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGVyc2lzdFN0YXRlKHBhcmFtcz86IFBhcnRpYWw8UGVyc2lzdFN0YXRlUGFyYW1zPikge1xuICBjb25zdCBkZWZhdWx0czogUGVyc2lzdFN0YXRlUGFyYW1zID0ge1xuICAgIGtleTogJ0FraXRhU3RvcmVzJyxcbiAgICBlbmFibGVJbk5vbkJyb3dzZXI6IGZhbHNlLFxuICAgIHN0b3JhZ2U6ICFoYXNMb2NhbFN0b3JhZ2UoKSA/IHBhcmFtcy5zdG9yYWdlIDogbG9jYWxTdG9yYWdlLFxuICAgIGRlc2VyaWFsaXplOiBKU09OLnBhcnNlLFxuICAgIHNlcmlhbGl6ZTogSlNPTi5zdHJpbmdpZnksXG4gICAgaW5jbHVkZTogW10sXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgdXNlIGluY2x1ZGUgd2l0aCBhIGNhbGxiYWNrXG4gICAgICovXG4gICAgZXhjbHVkZTogW10sXG4gICAgcGVyc2lzdE9uRGVzdHJveTogZmFsc2UsXG4gICAgcHJlU3RvcmFnZVVwZGF0ZTogZnVuY3Rpb24oc3RvcmVOYW1lLCBzdGF0ZSkge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH0sXG4gICAgcHJlU3RvcmVVcGRhdGU6IGZ1bmN0aW9uKHN0b3JlTmFtZSwgc3RhdGUpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9LFxuICAgIHNraXBTdG9yYWdlVXBkYXRlOiBnZXRTa2lwU3RvcmFnZVVwZGF0ZSxcbiAgICBwcmVTdG9yYWdlVXBkYXRlT3BlcmF0b3I6ICgpID0+IHNvdXJjZSA9PiBzb3VyY2VcbiAgfTtcblxuICBjb25zdCB7IHN0b3JhZ2UsIGVuYWJsZUluTm9uQnJvd3NlciwgZGVzZXJpYWxpemUsIHNlcmlhbGl6ZSwgaW5jbHVkZSwgZXhjbHVkZSwga2V5LCBwcmVTdG9yYWdlVXBkYXRlLCBwZXJzaXN0T25EZXN0cm95LCBwcmVTdG9yYWdlVXBkYXRlT3BlcmF0b3IsIHByZVN0b3JlVXBkYXRlLCBza2lwU3RvcmFnZVVwZGF0ZSB9ID0gT2JqZWN0LmFzc2lnbihcbiAgICB7fSxcbiAgICBkZWZhdWx0cyxcbiAgICBwYXJhbXNcbiAgKTtcblxuICBpZiAoKGlzTm90QnJvd3NlciAmJiAhZW5hYmxlSW5Ob25Ccm93c2VyKSB8fCAhc3RvcmFnZSkgcmV0dXJuO1xuXG4gIGNvbnN0IGhhc0luY2x1ZGUgPSBpbmNsdWRlLmxlbmd0aCA+IDA7XG4gIGNvbnN0IGhhc0V4Y2x1ZGUgPSBleGNsdWRlLmxlbmd0aCA+IDA7XG4gIGxldCBpbmNsdWRlU3RvcmVzOiB7IGZuczogRnVuY3Rpb25bXTsgW2tleTogc3RyaW5nXTogRnVuY3Rpb25bXSB8IHN0cmluZyB9O1xuXG4gIGlmIChoYXNJbmNsdWRlICYmIGhhc0V4Y2x1ZGUpIHtcbiAgICB0aHJvdyBuZXcgQWtpdGFFcnJvcihcIllvdSBjYW4ndCB1c2UgYm90aCBpbmNsdWRlIGFuZCBleGNsdWRlXCIpO1xuICB9XG5cbiAgaWYgKGhhc0luY2x1ZGUpIHtcbiAgICBpbmNsdWRlU3RvcmVzID0gaW5jbHVkZS5yZWR1Y2UoXG4gICAgICAoYWNjLCBwYXRoKSA9PiB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHBhdGgpKSB7XG4gICAgICAgICAgYWNjLmZucy5wdXNoKHBhdGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHN0b3JlTmFtZSA9IHBhdGguc3BsaXQoJy4nKVswXTtcbiAgICAgICAgICBhY2Nbc3RvcmVOYW1lXSA9IHBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sXG4gICAgICB7IGZuczogW10gfVxuICAgICk7XG4gIH1cblxuICBsZXQgc3RvcmVzOiBIYXNoTWFwPFN1YnNjcmlwdGlvbj4gPSB7fTtcbiAgbGV0IGFjYyA9IHt9O1xuICBsZXQgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uW10gPSBbXTtcblxuICBjb25zdCBidWZmZXIgPSBbXTtcblxuICBmdW5jdGlvbiBfc2F2ZSh2OiBhbnkpIHtcbiAgICBvYnNlcnZpZnkodikuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGNvbnN0IG5leHQgPSBidWZmZXIuc2hpZnQoKTtcbiAgICAgIG5leHQgJiYgX3NhdmUobmV4dCk7XG4gICAgfSk7XG4gIH1cblxuICAvLyB3aGVuIHdlIHVzZSB0aGUgbG9jYWwvc2Vzc2lvbiBzdG9yYWdlIHdlIHBlcmZvcm0gdGhlIHNlcmlhbGl6ZSwgb3RoZXJ3aXNlIHdlIGxldCB0aGUgcGFzc2VkIHN0b3JhZ2UgaW1wbGVtZW50YXRpb24gdG8gZG8gaXRcbiAgY29uc3QgaXNMb2NhbFN0b3JhZ2UgPSAoaGFzTG9jYWxTdG9yYWdlKCkgJiYgc3RvcmFnZSA9PT0gbG9jYWxTdG9yYWdlKSB8fCAoaGFzU2Vzc2lvblN0b3JhZ2UoKSAmJiBzdG9yYWdlID09PSBzZXNzaW9uU3RvcmFnZSk7XG5cbiAgb2JzZXJ2aWZ5KHN0b3JhZ2UuZ2V0SXRlbShrZXkpKS5zdWJzY3JpYmUoKHZhbHVlOiBhbnkpID0+IHtcbiAgICBsZXQgc3RvcmFnZVN0YXRlID0gaXNPYmplY3QodmFsdWUpID8gdmFsdWUgOiBkZXNlcmlhbGl6ZSh2YWx1ZSB8fCAne30nKTtcblxuICAgIGZ1bmN0aW9uIHNhdmUoc3RvcmVDYWNoZSkge1xuICAgICAgc3RvcmFnZVN0YXRlWyckY2FjaGUnXSA9IHsgLi4uKHN0b3JhZ2VTdGF0ZVsnJGNhY2hlJ10gfHwge30pLCAuLi5zdG9yZUNhY2hlIH07XG4gICAgICBzdG9yYWdlU3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdG9yYWdlU3RhdGUsIGFjYyk7XG5cbiAgICAgIGJ1ZmZlci5wdXNoKHN0b3JhZ2Uuc2V0SXRlbShrZXksIGlzTG9jYWxTdG9yYWdlID8gc2VyaWFsaXplKHN0b3JhZ2VTdGF0ZSkgOiBzdG9yYWdlU3RhdGUpKTtcbiAgICAgIF9zYXZlKGJ1ZmZlci5zaGlmdCgpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdWJzY3JpYmUoc3RvcmVOYW1lLCBwYXRoKSB7XG4gICAgICBzdG9yZXNbc3RvcmVOYW1lXSA9IF9fc3RvcmVzX19bc3RvcmVOYW1lXVxuICAgICAgICAuX3NlbGVjdChzdGF0ZSA9PiBnZXRWYWx1ZShzdGF0ZSwgcGF0aCkpXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgIHNraXAoMSksXG4gICAgICAgICAgZmlsdGVyKCgpID0+IHNraXBTdG9yYWdlVXBkYXRlKCkgPT09IGZhbHNlKSxcbiAgICAgICAgICBwcmVTdG9yYWdlVXBkYXRlT3BlcmF0b3IoKVxuICAgICAgICApXG4gICAgICAgIC5zdWJzY3JpYmUoZGF0YSA9PiB7XG4gICAgICAgICAgYWNjW3N0b3JlTmFtZV0gPSBwcmVTdG9yYWdlVXBkYXRlKHN0b3JlTmFtZSwgZGF0YSk7XG4gICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBzYXZlKHsgW3N0b3JlTmFtZV06IF9fc3RvcmVzX19bc3RvcmVOYW1lXS5fY2FjaGUoKS5nZXRWYWx1ZSgpIH0pKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0SW5pdGlhbChzdG9yZU5hbWUsIHN0b3JlLCBwYXRoKSB7XG4gICAgICBpZiAoc3RvcmVOYW1lIGluIHN0b3JhZ2VTdGF0ZSkge1xuICAgICAgICBzZXRBY3Rpb24oJ0BQZXJzaXN0U3RhdGUnKTtcbiAgICAgICAgc3RvcmUuX3NldFN0YXRlKHN0YXRlID0+IHtcbiAgICAgICAgICByZXR1cm4gc2V0VmFsdWUoc3RhdGUsIHBhdGgsIHByZVN0b3JlVXBkYXRlKHN0b3JlTmFtZSwgc3RvcmFnZVN0YXRlW3N0b3JlTmFtZV0pKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGhhc0NhY2hlID0gc3RvcmFnZVN0YXRlWyckY2FjaGUnXSA/IHN0b3JhZ2VTdGF0ZVsnJGNhY2hlJ11bc3RvcmVOYW1lXSA6IGZhbHNlO1xuICAgICAgICBfX3N0b3Jlc19fW3N0b3JlTmFtZV0uc2V0SGFzQ2FjaGUoaGFzQ2FjaGUsIHsgcmVzdGFydFRUTDogdHJ1ZSB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdWJzY3JpcHRpb25zLnB1c2goXG4gICAgICAkJGRlbGV0ZVN0b3JlLnN1YnNjcmliZShzdG9yZU5hbWUgPT4ge1xuICAgICAgICBpZiAoc3RvcmVzW3N0b3JlTmFtZV0pIHtcbiAgICAgICAgICBpZiAocGVyc2lzdE9uRGVzdHJveSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHNhdmUoeyBbc3RvcmVOYW1lXTogZmFsc2UgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0b3Jlc1tzdG9yZU5hbWVdLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgZGVsZXRlIHN0b3Jlc1tzdG9yZU5hbWVdO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG5cbiAgICBzdWJzY3JpcHRpb25zLnB1c2goXG4gICAgICAkJGFkZFN0b3JlLnN1YnNjcmliZShzdG9yZU5hbWUgPT4ge1xuICAgICAgICBpZiAoc3RvcmVOYW1lID09PSAncm91dGVyJyB8fCAoaGFzRXhjbHVkZSAmJiBleGNsdWRlLmluY2x1ZGVzKHN0b3JlTmFtZSkpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RvcmUgPSBfX3N0b3Jlc19fW3N0b3JlTmFtZV07XG4gICAgICAgIGlmIChoYXNJbmNsdWRlKSB7XG4gICAgICAgICAgbGV0IHBhdGggPSBpbmNsdWRlU3RvcmVzW3N0b3JlTmFtZV07XG5cbiAgICAgICAgICBpZiAoIXBhdGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhc3NQcmVkaWNhdGUgPSBpbmNsdWRlU3RvcmVzLmZucy5zb21lKGZuID0+IGZuKHN0b3JlTmFtZSkpO1xuICAgICAgICAgICAgaWYgKHBhc3NQcmVkaWNhdGUpIHtcbiAgICAgICAgICAgICAgcGF0aCA9IHN0b3JlTmFtZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgc2V0SW5pdGlhbChzdG9yZU5hbWUsIHN0b3JlLCBwYXRoKTtcbiAgICAgICAgICBzdWJzY3JpYmUoc3RvcmVOYW1lLCBwYXRoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRJbml0aWFsKHN0b3JlTmFtZSwgc3RvcmUsIHN0b3JlTmFtZSk7XG4gICAgICAgICAgc3Vic2NyaWJlKHN0b3JlTmFtZSwgc3RvcmVOYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICApO1xuXG4gICAgX3BlcnNpc3RTdGF0ZUluaXQubmV4dCgpO1xuICB9KTtcblxuICByZXR1cm4ge1xuICAgIGRlc3Ryb3koKSB7XG4gICAgICBzdWJzY3JpcHRpb25zLmZvckVhY2gocyA9PiBzLnVuc3Vic2NyaWJlKCkpO1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGtleXMgPSBPYmplY3Qua2V5cyhzdG9yZXMpOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBzdG9yZU5hbWUgPSBrZXlzW2ldO1xuICAgICAgICBzdG9yZXNbc3RvcmVOYW1lXS51bnN1YnNjcmliZSgpO1xuICAgICAgfVxuICAgICAgc3RvcmVzID0ge307XG4gICAgfSxcbiAgICBjbGVhcigpIHtcbiAgICAgIHN0b3JhZ2UuY2xlYXIoKTtcbiAgICB9LFxuICAgIGNsZWFyU3RvcmUoc3RvcmVOYW1lPzogc3RyaW5nKSB7XG4gICAgICBpZiAoaXNOaWwoc3RvcmVOYW1lKSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IG9ic2VydmlmeShzdG9yYWdlLnNldEl0ZW0oa2V5LCAne30nKSk7XG4gICAgICAgIHZhbHVlLnN1YnNjcmliZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCB2YWx1ZSA9IHN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgICAgb2JzZXJ2aWZ5KHZhbHVlKS5zdWJzY3JpYmUodiA9PiB7XG4gICAgICAgIGNvbnN0IHN0b3JhZ2VTdGF0ZSA9IGRlc2VyaWFsaXplKHYgfHwgJ3t9Jyk7XG5cbiAgICAgICAgaWYgKHN0b3JhZ2VTdGF0ZVtzdG9yZU5hbWVdKSB7XG4gICAgICAgICAgZGVsZXRlIHN0b3JhZ2VTdGF0ZVtzdG9yZU5hbWVdO1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gb2JzZXJ2aWZ5KHN0b3JhZ2Uuc2V0SXRlbShrZXksIHNlcmlhbGl6ZShzdG9yYWdlU3RhdGUpKSk7XG4gICAgICAgICAgdmFsdWUuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cbiJdfQ==