{"version":3,"file":"datorama-akita-ng-entity-service.js","sources":["ng://@datorama/akita-ng-entity-service/lib/ng-entity-service-notifier.ts","ng://@datorama/akita-ng-entity-service/lib/ng-entity-service.loader.ts","ng://@datorama/akita-ng-entity-service/lib/ng-entity-service.config.ts","ng://@datorama/akita-ng-entity-service/lib/helpers.ts","ng://@datorama/akita-ng-entity-service/lib/action-factory.ts","ng://@datorama/akita-ng-entity-service/lib/ng-entity.service.ts","ng://@datorama/akita-ng-entity-service/lib/types.ts"],"sourcesContent":["import { Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Msg } from './types';\n\nexport enum HttpMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  PATCH = 'PATCH',\n  DELETE = 'DELETE'\n}\n\nexport type ActionType = 'success' | 'error';\n\nexport type EntityServiceAction = {\n  storeName: string;\n  type: ActionType;\n  payload: any;\n  method: HttpMethod;\n} & Msg;\n\nexport const ofType = (type: ActionType) => filter((action: EntityServiceAction) => action.type === type);\n\nexport const filterMethod = (method: HttpMethod | keyof (typeof HttpMethod)) =>\n  filter((action: EntityServiceAction) => action.method === method);\n\nexport const filterStore = (name: string) => filter((action: EntityServiceAction) => action.storeName === name);\n\n@Injectable({ providedIn: 'root' })\nexport class NgEntityServiceNotifier {\n  private dispatcher = new Subject<EntityServiceAction>();\n  action$ = this.dispatcher.asObservable();\n\n  dispatch(event: EntityServiceAction) {\n    this.dispatcher.next(event);\n  }\n}\n","import { Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { filter, map } from 'rxjs/operators';\nimport { isFunction } from '@datorama/akita';\nimport { HttpMethod } from './ng-entity-service-notifier';\n\ntype Event = { method: HttpMethod; loading: boolean; storeName: string; entityId?: any };\n\n@Injectable({ providedIn: 'root' })\nexport class NgEntityServiceLoader {\n  private dispatcher = new Subject<Event>();\n  loading$ = this.dispatcher.asObservable();\n\n  dispatch(event: Event) {\n    this.dispatcher.next(event);\n  }\n\n  loadersFor(name?: string) {\n    const filterStore = filter(({ storeName }: Event) => (name ? storeName === name : true));\n    const filterMethod = mthd =>\n      filter(({ method }: Event) => {\n        return isFunction(mthd) ? mthd(method) : method === mthd;\n      });\n\n    const actionBased = (current: ((method) => boolean) | HttpMethod) =>\n      this.loading$.pipe(\n        filterStore,\n        filterMethod(current),\n        map(action => action.loading)\n      );\n\n    const idBased = (id: any, mthd: ((method) => boolean) | HttpMethod) =>\n      this.loading$.pipe(\n        filterStore,\n        filterMethod(mthd),\n        filter(action => action.entityId === id),\n        map(action => action.loading)\n      );\n\n    return {\n      get$: actionBased(HttpMethod.GET),\n      add$: actionBased(HttpMethod.POST),\n      update$: actionBased(method => method === HttpMethod.PUT || method === HttpMethod.PATCH),\n      delete$: actionBased(HttpMethod.DELETE),\n      getEntity: (id: any) => idBased(id, HttpMethod.GET),\n      updateEntity: (id: any) => idBased(id, method => method === HttpMethod.PUT || method === HttpMethod.PATCH),\n      deleteEntity: (id: any) => idBased(id, HttpMethod.DELETE)\n    };\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { NgEntityServiceParams } from './types';\nimport { HttpMethod } from './ng-entity-service-notifier';\nimport { isObject } from '@datorama/akita';\n\nexport interface NgEntityServiceGlobalConfig {\n  baseUrl?: string;\n  httpMethods?: Partial<{\n    GET: HttpMethod;\n    POST: HttpMethod;\n    PATCH: HttpMethod;\n    PUT: HttpMethod;\n    DELETE: HttpMethod;\n  }>;\n}\n\nexport const NG_ENTITY_SERVICE_CONFIG = new InjectionToken<NgEntityServiceGlobalConfig>('NgEntityServiceGlobalConfig');\n\nexport const defaultConfig: NgEntityServiceGlobalConfig = {\n  httpMethods: {\n    GET: HttpMethod.GET,\n    POST: HttpMethod.POST,\n    PATCH: HttpMethod.PATCH,\n    PUT: HttpMethod.PUT,\n    DELETE: HttpMethod.DELETE\n  }\n};\n\nexport function mergeDeep(target, ...sources) {\n  if (!sources.length) return target;\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, { [key]: {} });\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources);\n}\n\nexport function NgEntityServiceConfig(config: NgEntityServiceParams = {}) {\n  return function(constructor) {\n    if (config.baseUrl) {\n      constructor['baseUrl'] = config.baseUrl;\n    }\n\n    if (config.resourceName) {\n      constructor['resourceName'] = config.resourceName;\n    }\n  };\n}\n","import { isNumber, isString } from '@datorama/akita';\n\nexport function isID(idOrConfig: any) {\n  return isNumber(idOrConfig) || isString(idOrConfig);\n}\n","import { EntityServiceAction, NgEntityServiceNotifier } from './ng-entity-service-notifier';\n\nexport function successAction(\n  storeName: string,\n  notifier: NgEntityServiceNotifier\n): (params: Partial<EntityServiceAction>) => void {\n  return function({ payload, method, successMsg }) {\n    notifier.dispatch({\n      type: 'success',\n      storeName,\n      payload,\n      method,\n      successMsg\n    });\n  };\n}\n\nexport function errorAction(\n  storeName: string,\n  notifier: NgEntityServiceNotifier\n): (params: Partial<EntityServiceAction>) => void {\n  return function({ payload, method, errorMsg }) {\n    notifier.dispatch({\n      type: 'error',\n      storeName,\n      payload,\n      method,\n      errorMsg\n    });\n  };\n}\n","import {\n  AddEntitiesOptions,\n  EntityService,\n  EntityState,\n  EntityStore,\n  getEntityType,\n  getIDType,\n  isDefined\n} from '@datorama/akita';\nimport { Observable, throwError } from 'rxjs';\nimport { inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, finalize, map, tap } from 'rxjs/operators';\nimport { HttpConfig, Msg, NgEntityServiceParams } from './types';\nimport { EntityServiceAction, HttpMethod, NgEntityServiceNotifier } from './ng-entity-service-notifier';\nimport { NgEntityServiceLoader } from './ng-entity-service.loader';\nimport {\n  defaultConfig,\n  mergeDeep,\n  NG_ENTITY_SERVICE_CONFIG,\n  NgEntityServiceGlobalConfig\n} from './ng-entity-service.config';\nimport { isID } from './helpers';\nimport { errorAction, successAction } from './action-factory';\n\nexport const mapResponse = (config: HttpConfig) =>\n  map(res => ((config || {}).mapResponseFn ? config.mapResponseFn(res) : res));\n\nexport class NgEntityService<S extends EntityState = any> extends EntityService<S> {\n  baseUrl: string;\n  loader: NgEntityServiceLoader;\n\n  private http: HttpClient;\n  private notifier: NgEntityServiceNotifier;\n  private globalConfig: NgEntityServiceGlobalConfig = {};\n  private mergedConfig: NgEntityServiceParams & NgEntityServiceGlobalConfig;\n\n  private dispatchSuccess: (action: Partial<EntityServiceAction>) => void;\n  private dispatchError: (action: Partial<EntityServiceAction>) => void;\n\n  constructor(protected store: EntityStore<S>, private config: NgEntityServiceParams = {}) {\n    super();\n    this.http = inject(HttpClient);\n    this.loader = inject(NgEntityServiceLoader);\n    this.notifier = inject(NgEntityServiceNotifier);\n    this.globalConfig = inject(NG_ENTITY_SERVICE_CONFIG);\n\n    this.mergedConfig = mergeDeep(defaultConfig, this.globalConfig, config);\n\n    this.dispatchSuccess = successAction(this.store.storeName, this.notifier);\n    this.dispatchError = errorAction(this.store.storeName, this.notifier);\n  }\n\n  get api() {\n    return `${this.baseUrl || this.getConfigValue('baseUrl')}/${this.resourceName}`;\n  }\n\n  get resourceName() {\n    return this.getConfigValue('resourceName') || this.store.storeName;\n  }\n\n  setBaseUrl(api: string) {\n    this.baseUrl = api;\n  }\n\n  getHttp() {\n    return this.http;\n  }\n\n  getConfig() {\n    return this.mergedConfig;\n  }\n\n  /**\n   *\n   * Get all or one entity - Creates a GET request\n   *\n   * service.get().subscribe()\n   * service.get({ headers, params, url })\n   *\n   * service.get(id)\n   * service.get(id, { headers, params, url })\n   *\n   */\n  get<T>(id?: getIDType<S>, config?: HttpConfig & { append?: boolean } & Msg): Observable<T>;\n  get<T>(config?: HttpConfig & { append?: boolean } & Msg): Observable<T>;\n  get<T>(\n    idOrConfig?: getIDType<S> | HttpConfig,\n    config?: HttpConfig & { append?: boolean; upsert?: boolean } & Msg\n  ): Observable<T> {\n    let url: string;\n    const isSingle = isID(idOrConfig);\n    const _config: HttpConfig & { append?: boolean; upsert?: boolean } & Msg = (isSingle ? config : idOrConfig) || {};\n    const method = this.getHttpMethod(HttpMethod.GET);\n\n    if (_config.url) {\n      url = _config.url;\n    } else {\n      url = isSingle ? `${this.api}/${idOrConfig}` : this.api;\n    }\n\n    this.loader.dispatch({\n      method,\n      loading: true,\n      entityId: isSingle ? idOrConfig : null,\n      storeName: this.store.storeName\n    });\n\n    return this.http[method.toLowerCase()](url, _config).pipe(\n      mapResponse(_config),\n      tap((data: any) => {\n        if (isSingle) {\n          this.store.upsert(idOrConfig as getIDType<S>, data);\n        } else {\n          if (_config.append) {\n            this.store.add(data);\n          } else if (_config.upsert) {\n            this.store.upsertMany(data);\n          } else {\n            this.store.set(data);\n          }\n        }\n\n        this.dispatchSuccess({\n          method,\n          payload: data,\n          successMsg: _config.successMsg\n        });\n      }),\n      catchError(error => this.handleError(method, error, _config.errorMsg)),\n      finalize(() => {\n        this.loader.dispatch({\n          method,\n          loading: false,\n          storeName: this.store.storeName\n        });\n      })\n    ) as Observable<T>;\n  }\n\n  /**\n   *\n   * Add a new entity - Creates a POST request\n   *\n   * service.add(entity)\n   * service.add(entity, config)\n   *\n   */\n  add<T>(entity: getEntityType<S>, config?: HttpConfig & Pick<AddEntitiesOptions, 'prepend'> & Msg): Observable<T> {\n    const method = this.getHttpMethod(HttpMethod.POST);\n\n    this.loader.dispatch({\n      method,\n      loading: true,\n      storeName: this.store.storeName\n    });\n    return this.http[method.toLowerCase()](this.resolveUrl(config), entity, config).pipe(\n      mapResponse(config),\n      tap((entity: any) => {\n        this.store.add(entity, config);\n        this.dispatchSuccess({\n          method,\n          payload: entity,\n          successMsg: config && config.successMsg\n        });\n      }),\n      catchError(error => this.handleError(method, error, config && config.errorMsg)),\n      finalize(() => {\n        this.loader.dispatch({\n          method,\n          loading: false,\n          storeName: this.store.storeName\n        });\n      })\n    ) as Observable<T>;\n  }\n\n  /**\n   *\n   * Update an entity - Creates a PUT/PATCH request\n   *\n   * service.update(id, entity)\n   * service.update(id, entity, config)\n   *\n   */\n  update<T>(\n    id: getIDType<S>,\n    entity: Partial<getEntityType<S>>,\n    config?: HttpConfig & { method: HttpMethod.PUT | HttpMethod.PATCH } & Msg\n  ): Observable<T> {\n    const method = config && config.method ? config.method : this.getHttpMethod(HttpMethod.PUT);\n\n    this.loader.dispatch({\n      method,\n      loading: true,\n      entityId: id,\n      storeName: this.store.storeName\n    });\n\n    return this.http[method.toLocaleLowerCase()](this.resolveUrl(config, id), entity, config).pipe(\n      mapResponse(config),\n      tap(entity => {\n        this.store.update(id, entity as any);\n        this.dispatchSuccess({\n          method,\n          payload: entity,\n          successMsg: config && config.successMsg\n        });\n      }),\n      catchError(error => this.handleError(method, error, config && config.errorMsg)),\n      finalize(() => {\n        this.loader.dispatch({\n          method,\n          loading: false,\n          entityId: id,\n          storeName: this.store.storeName\n        });\n      })\n    ) as Observable<T>;\n  }\n\n  /**\n   *\n   * Delete an entity - Creates a DELETE request\n   *\n   * service.delete(id)\n   * service.delete(id, config)\n   *\n   */\n  delete<T>(id: getIDType<S>, config?: HttpConfig & Msg): Observable<T> {\n    const method = this.getHttpMethod(HttpMethod.DELETE);\n\n    this.loader.dispatch({\n      method,\n      loading: true,\n      entityId: id,\n      storeName: this.store.storeName\n    });\n\n    return this.http[method.toLowerCase()](this.resolveUrl(config, id), config).pipe(\n      mapResponse(config),\n      tap(res => {\n        this.store.remove(id);\n        this.dispatchSuccess({\n          method,\n          payload: res,\n          successMsg: config && config.successMsg\n        });\n      }),\n      catchError(error => this.handleError(method, error, config && config.errorMsg)),\n      finalize(() => {\n        this.loader.dispatch({\n          method,\n          loading: false,\n          entityId: id,\n          storeName: this.store.storeName\n        });\n      })\n    ) as Observable<T>;\n  }\n\n  private getHttpMethod(type: HttpMethod) {\n    return this.mergedConfig.httpMethods[type];\n  }\n\n  private getConfigValue(key: string) {\n    return this.constructor[key] || this.mergedConfig[key];\n  }\n\n  private resolveUrl(config: HttpConfig, id?: any) {\n    const customUrl = (config || {}).url;\n    if (isDefined(id)) {\n      return customUrl || `${this.api}/${id}`;\n    }\n\n    return customUrl || this.api;\n  }\n\n  private handleError(method: HttpMethod, error: any, errorMsg: string) {\n    this.dispatchError({\n      method,\n      errorMsg,\n      payload: error\n    });\n\n    return throwError(error);\n  }\n}\n","import { HttpHeaders, HttpParams } from '@angular/common/http';\n\nexport interface NgEntityServiceParams {\n  baseUrl?: string;\n  resourceName?: string;\n}\n\ntype _HttpHeaders =\n  | HttpHeaders\n  | {\n      [header: string]: string | string[];\n    };\n\ntype _HttpParams =\n  | HttpParams\n  | {\n      [param: string]: string | string[];\n    };\n\nexport type Msg = {\n  successMsg?: string;\n  errorMsg?: string;\n};\n\nexport type HttpConfig<Entity = any> = {\n  params?: _HttpParams;\n  headers?: _HttpHeaders;\n  url?: string;\n  mapResponseFn?: (res: any) => Entity | Entity[];\n};\n"],"names":[],"mappings":"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"}