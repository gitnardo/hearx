{"version":3,"file":"datorama-akita-ng-entity-service.js","sources":["ng:/@datorama/akita-ng-entity-service/lib/ng-entity-service-notifier.ts","ng:/@datorama/akita-ng-entity-service/lib/ng-entity-service.loader.ts","ng:/@datorama/akita-ng-entity-service/lib/ng-entity-service.config.ts","ng:/@datorama/akita-ng-entity-service/lib/helpers.ts","ng:/@datorama/akita-ng-entity-service/lib/action-factory.ts","ng:/@datorama/akita-ng-entity-service/lib/ng-entity.service.ts","ng:/@datorama/akita-ng-entity-service/lib/types.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Msg } from './types';\n\nexport enum HttpMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  PATCH = 'PATCH',\n  DELETE = 'DELETE'\n}\n\nexport type ActionType = 'success' | 'error';\n\nexport type EntityServiceAction = {\n  storeName: string;\n  type: ActionType;\n  payload: any;\n  method: HttpMethod;\n} & Msg;\n\nexport const ofType = (type: ActionType) => filter((action: EntityServiceAction) => action.type === type);\n\nexport const filterMethod = (method: HttpMethod | keyof (typeof HttpMethod)) =>\n  filter((action: EntityServiceAction) => action.method === method);\n\nexport const filterStore = (name: string) => filter((action: EntityServiceAction) => action.storeName === name);\n\n@Injectable({ providedIn: 'root' })\nexport class NgEntityServiceNotifier {\n  private dispatcher = new Subject<EntityServiceAction>();\n  action$ = this.dispatcher.asObservable();\n\n  dispatch(event: EntityServiceAction) {\n    this.dispatcher.next(event);\n  }\n}\n","import { Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { filter, map } from 'rxjs/operators';\nimport { isFunction } from '@datorama/akita';\nimport { HttpMethod } from './ng-entity-service-notifier';\n\ntype Event = { method: HttpMethod; loading: boolean; storeName: string; entityId?: any };\n\n@Injectable({ providedIn: 'root' })\nexport class NgEntityServiceLoader {\n  private dispatcher = new Subject<Event>();\n  loading$ = this.dispatcher.asObservable();\n\n  dispatch(event: Event) {\n    this.dispatcher.next(event);\n  }\n\n  loadersFor(name?: string) {\n    const filterStore = filter(({ storeName }: Event) => (name ? storeName === name : true));\n    const filterMethod = mthd =>\n      filter(({ method }: Event) => {\n        return isFunction(mthd) ? mthd(method) : method === mthd;\n      });\n\n    const actionBased = (current: ((method) => boolean) | HttpMethod) =>\n      this.loading$.pipe(\n        filterStore,\n        filterMethod(current),\n        map(action => action.loading)\n      );\n\n    const idBased = (id: any, mthd: ((method) => boolean) | HttpMethod) =>\n      this.loading$.pipe(\n        filterStore,\n        filterMethod(mthd),\n        filter(action => action.entityId === id),\n        map(action => action.loading)\n      );\n\n    return {\n      get$: actionBased(HttpMethod.GET),\n      add$: actionBased(HttpMethod.POST),\n      update$: actionBased(method => method === HttpMethod.PUT || method === HttpMethod.PATCH),\n      delete$: actionBased(HttpMethod.DELETE),\n      getEntity: (id: any) => idBased(id, HttpMethod.GET),\n      updateEntity: (id: any) => idBased(id, method => method === HttpMethod.PUT || method === HttpMethod.PATCH),\n      deleteEntity: (id: any) => idBased(id, HttpMethod.DELETE)\n    };\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { NgEntityServiceParams } from './types';\nimport { HttpMethod } from './ng-entity-service-notifier';\nimport { isObject } from '@datorama/akita';\n\nexport interface NgEntityServiceGlobalConfig {\n  baseUrl?: string;\n  httpMethods?: Partial<{\n    GET: HttpMethod;\n    POST: HttpMethod;\n    PATCH: HttpMethod;\n    PUT: HttpMethod;\n    DELETE: HttpMethod;\n  }>;\n}\n\nexport const NG_ENTITY_SERVICE_CONFIG = new InjectionToken<NgEntityServiceGlobalConfig>('NgEntityServiceGlobalConfig');\n\nexport const defaultConfig: NgEntityServiceGlobalConfig = {\n  httpMethods: {\n    GET: HttpMethod.GET,\n    POST: HttpMethod.POST,\n    PATCH: HttpMethod.PATCH,\n    PUT: HttpMethod.PUT,\n    DELETE: HttpMethod.DELETE\n  }\n};\n\nexport function mergeDeep(target, ...sources) {\n  if (!sources.length) return target;\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, { [key]: {} });\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources);\n}\n\nexport function NgEntityServiceConfig(config: NgEntityServiceParams = {}) {\n  return function(constructor) {\n    if (config.baseUrl) {\n      constructor['baseUrl'] = config.baseUrl;\n    }\n\n    if (config.resourceName) {\n      constructor['resourceName'] = config.resourceName;\n    }\n  };\n}\n","import { isNumber, isString } from '@datorama/akita';\n\nexport function isID(idOrConfig: any) {\n  return isNumber(idOrConfig) || isString(idOrConfig);\n}\n","import { EntityServiceAction, NgEntityServiceNotifier } from './ng-entity-service-notifier';\n\nexport function successAction(\n  storeName: string,\n  notifier: NgEntityServiceNotifier\n): (params: Partial<EntityServiceAction>) => void {\n  return function({ payload, method, successMsg }) {\n    notifier.dispatch({\n      type: 'success',\n      storeName,\n      payload,\n      method,\n      successMsg\n    });\n  };\n}\n\nexport function errorAction(\n  storeName: string,\n  notifier: NgEntityServiceNotifier\n): (params: Partial<EntityServiceAction>) => void {\n  return function({ payload, method, errorMsg }) {\n    notifier.dispatch({\n      type: 'error',\n      storeName,\n      payload,\n      method,\n      errorMsg\n    });\n  };\n}\n","import {\n  AddEntitiesOptions,\n  EntityService,\n  EntityState,\n  EntityStore,\n  getEntityType,\n  getIDType,\n  isDefined\n} from '@datorama/akita';\nimport { Observable, throwError } from 'rxjs';\nimport { inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, finalize, map, tap } from 'rxjs/operators';\nimport { HttpConfig, Msg, NgEntityServiceParams } from './types';\nimport { EntityServiceAction, HttpMethod, NgEntityServiceNotifier } from './ng-entity-service-notifier';\nimport { NgEntityServiceLoader } from './ng-entity-service.loader';\nimport {\n  defaultConfig,\n  mergeDeep,\n  NG_ENTITY_SERVICE_CONFIG,\n  NgEntityServiceGlobalConfig\n} from './ng-entity-service.config';\nimport { isID } from './helpers';\nimport { errorAction, successAction } from './action-factory';\n\nexport const mapResponse = (config: HttpConfig) =>\n  map(res => ((config || {}).mapResponseFn ? config.mapResponseFn(res) : res));\n\nexport class NgEntityService<S extends EntityState = any> extends EntityService<S> {\n  baseUrl: string;\n  loader: NgEntityServiceLoader;\n\n  private http: HttpClient;\n  private notifier: NgEntityServiceNotifier;\n  private globalConfig: NgEntityServiceGlobalConfig = {};\n  private mergedConfig: NgEntityServiceParams & NgEntityServiceGlobalConfig;\n\n  private dispatchSuccess: (action: Partial<EntityServiceAction>) => void;\n  private dispatchError: (action: Partial<EntityServiceAction>) => void;\n\n  constructor(protected store: EntityStore<S>, private config: NgEntityServiceParams = {}) {\n    super();\n    this.http = inject(HttpClient);\n    this.loader = inject(NgEntityServiceLoader);\n    this.notifier = inject(NgEntityServiceNotifier);\n    this.globalConfig = inject(NG_ENTITY_SERVICE_CONFIG);\n\n    this.mergedConfig = mergeDeep(defaultConfig, this.globalConfig, config);\n\n    this.dispatchSuccess = successAction(this.store.storeName, this.notifier);\n    this.dispatchError = errorAction(this.store.storeName, this.notifier);\n  }\n\n  get api() {\n    return `${this.baseUrl || this.getConfigValue('baseUrl')}/${this.resourceName}`;\n  }\n\n  get resourceName() {\n    return this.getConfigValue('resourceName') || this.store.storeName;\n  }\n\n  setBaseUrl(api: string) {\n    this.baseUrl = api;\n  }\n\n  getHttp() {\n    return this.http;\n  }\n\n  getConfig() {\n    return this.mergedConfig;\n  }\n\n  /**\n   *\n   * Get all or one entity - Creates a GET request\n   *\n   * service.get().subscribe()\n   * service.get({ headers, params, url })\n   *\n   * service.get(id)\n   * service.get(id, { headers, params, url })\n   *\n   */\n  get<T>(id?: getIDType<S>, config?: HttpConfig & { append?: boolean } & Msg): Observable<T>;\n  get<T>(config?: HttpConfig & { append?: boolean } & Msg): Observable<T>;\n  get<T>(\n    idOrConfig?: getIDType<S> | HttpConfig,\n    config?: HttpConfig & { append?: boolean; upsert?: boolean } & Msg\n  ): Observable<T> {\n    let url: string;\n    const isSingle = isID(idOrConfig);\n    const _config: HttpConfig & { append?: boolean; upsert?: boolean } & Msg = (isSingle ? config : idOrConfig) || {};\n    const method = this.getHttpMethod(HttpMethod.GET);\n\n    if (_config.url) {\n      url = _config.url;\n    } else {\n      url = isSingle ? `${this.api}/${idOrConfig}` : this.api;\n    }\n\n    this.loader.dispatch({\n      method,\n      loading: true,\n      entityId: isSingle ? idOrConfig : null,\n      storeName: this.store.storeName\n    });\n\n    return this.http[method.toLowerCase()](url, _config).pipe(\n      mapResponse(_config),\n      tap((data: any) => {\n        if (isSingle) {\n          this.store.upsert(idOrConfig as getIDType<S>, data);\n        } else {\n          if (_config.append) {\n            this.store.add(data);\n          } else if (_config.upsert) {\n            this.store.upsertMany(data);\n          } else {\n            this.store.set(data);\n          }\n        }\n\n        this.dispatchSuccess({\n          method,\n          payload: data,\n          successMsg: _config.successMsg\n        });\n      }),\n      catchError(error => this.handleError(method, error, _config.errorMsg)),\n      finalize(() => {\n        this.loader.dispatch({\n          method,\n          loading: false,\n          storeName: this.store.storeName\n        });\n      })\n    ) as Observable<T>;\n  }\n\n  /**\n   *\n   * Add a new entity - Creates a POST request\n   *\n   * service.add(entity)\n   * service.add(entity, config)\n   *\n   */\n  add<T>(entity: getEntityType<S>, config?: HttpConfig & Pick<AddEntitiesOptions, 'prepend'> & Msg): Observable<T> {\n    const method = this.getHttpMethod(HttpMethod.POST);\n\n    this.loader.dispatch({\n      method,\n      loading: true,\n      storeName: this.store.storeName\n    });\n    return this.http[method.toLowerCase()](this.resolveUrl(config), entity, config).pipe(\n      mapResponse(config),\n      tap((entity: any) => {\n        this.store.add(entity, config);\n        this.dispatchSuccess({\n          method,\n          payload: entity,\n          successMsg: config && config.successMsg\n        });\n      }),\n      catchError(error => this.handleError(method, error, config && config.errorMsg)),\n      finalize(() => {\n        this.loader.dispatch({\n          method,\n          loading: false,\n          storeName: this.store.storeName\n        });\n      })\n    ) as Observable<T>;\n  }\n\n  /**\n   *\n   * Update an entity - Creates a PUT/PATCH request\n   *\n   * service.update(id, entity)\n   * service.update(id, entity, config)\n   *\n   */\n  update<T>(\n    id: getIDType<S>,\n    entity: Partial<getEntityType<S>>,\n    config?: HttpConfig & { method: HttpMethod.PUT | HttpMethod.PATCH } & Msg\n  ): Observable<T> {\n    const method = config && config.method ? config.method : this.getHttpMethod(HttpMethod.PUT);\n\n    this.loader.dispatch({\n      method,\n      loading: true,\n      entityId: id,\n      storeName: this.store.storeName\n    });\n\n    return this.http[method.toLocaleLowerCase()](this.resolveUrl(config, id), entity, config).pipe(\n      mapResponse(config),\n      tap(entity => {\n        this.store.update(id, entity as any);\n        this.dispatchSuccess({\n          method,\n          payload: entity,\n          successMsg: config && config.successMsg\n        });\n      }),\n      catchError(error => this.handleError(method, error, config && config.errorMsg)),\n      finalize(() => {\n        this.loader.dispatch({\n          method,\n          loading: false,\n          entityId: id,\n          storeName: this.store.storeName\n        });\n      })\n    ) as Observable<T>;\n  }\n\n  /**\n   *\n   * Delete an entity - Creates a DELETE request\n   *\n   * service.delete(id)\n   * service.delete(id, config)\n   *\n   */\n  delete<T>(id: getIDType<S>, config?: HttpConfig & Msg): Observable<T> {\n    const method = this.getHttpMethod(HttpMethod.DELETE);\n\n    this.loader.dispatch({\n      method,\n      loading: true,\n      entityId: id,\n      storeName: this.store.storeName\n    });\n\n    return this.http[method.toLowerCase()](this.resolveUrl(config, id), config).pipe(\n      mapResponse(config),\n      tap(res => {\n        this.store.remove(id);\n        this.dispatchSuccess({\n          method,\n          payload: res,\n          successMsg: config && config.successMsg\n        });\n      }),\n      catchError(error => this.handleError(method, error, config && config.errorMsg)),\n      finalize(() => {\n        this.loader.dispatch({\n          method,\n          loading: false,\n          entityId: id,\n          storeName: this.store.storeName\n        });\n      })\n    ) as Observable<T>;\n  }\n\n  private getHttpMethod(type: HttpMethod) {\n    return this.mergedConfig.httpMethods[type];\n  }\n\n  private getConfigValue(key: string) {\n    return this.constructor[key] || this.mergedConfig[key];\n  }\n\n  private resolveUrl(config: HttpConfig, id?: any) {\n    const customUrl = (config || {}).url;\n    if (isDefined(id)) {\n      return customUrl || `${this.api}/${id}`;\n    }\n\n    return customUrl || this.api;\n  }\n\n  private handleError(method: HttpMethod, error: any, errorMsg: string) {\n    this.dispatchError({\n      method,\n      errorMsg,\n      payload: error\n    });\n\n    return throwError(error);\n  }\n}\n","import { HttpHeaders, HttpParams } from '@angular/common/http';\n\nexport interface NgEntityServiceParams {\n  baseUrl?: string;\n  resourceName?: string;\n}\n\ntype _HttpHeaders =\n  | HttpHeaders\n  | {\n      [header: string]: string | string[];\n    };\n\ntype _HttpParams =\n  | HttpParams\n  | {\n      [param: string]: string | string[];\n    };\n\nexport type Msg = {\n  successMsg?: string;\n  errorMsg?: string;\n};\n\nexport type HttpConfig<Entity = any> = {\n  params?: _HttpParams;\n  headers?: _HttpHeaders;\n  url?: string;\n  mapResponseFn?: (res: any) => Entity | Entity[];\n};\n"]}