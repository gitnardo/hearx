var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EntityService, isDefined } from '@datorama/akita';
import { throwError } from 'rxjs';
import { inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { catchError, finalize, map, tap } from 'rxjs/operators';
import { HttpMethod, NgEntityServiceNotifier } from './ng-entity-service-notifier';
import { NgEntityServiceLoader } from './ng-entity-service.loader';
import { defaultConfig, mergeDeep, NG_ENTITY_SERVICE_CONFIG } from './ng-entity-service.config';
import { isID } from './helpers';
import { errorAction, successAction } from './action-factory';
/** @type {?} */
export var mapResponse = (/**
 * @param {?} config
 * @return {?}
 */
function (config) {
    return map((/**
     * @param {?} res
     * @return {?}
     */
    function (res) { return ((config || {}).mapResponseFn ? config.mapResponseFn(res) : res); }));
});
/**
 * @template S
 */
var /**
 * @template S
 */
NgEntityService = /** @class */ (function (_super) {
    __extends(NgEntityService, _super);
    function NgEntityService(store, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this) || this;
        _this.store = store;
        _this.config = config;
        _this.globalConfig = {};
        _this.http = inject(HttpClient);
        _this.loader = inject(NgEntityServiceLoader);
        _this.notifier = inject(NgEntityServiceNotifier);
        _this.globalConfig = inject(NG_ENTITY_SERVICE_CONFIG);
        _this.mergedConfig = mergeDeep(defaultConfig, _this.globalConfig, config);
        _this.dispatchSuccess = successAction(_this.store.storeName, _this.notifier);
        _this.dispatchError = errorAction(_this.store.storeName, _this.notifier);
        return _this;
    }
    Object.defineProperty(NgEntityService.prototype, "api", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.baseUrl || this.getConfigValue('baseUrl')) + "/" + this.resourceName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgEntityService.prototype, "resourceName", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getConfigValue('resourceName') || this.store.storeName;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} api
     * @return {?}
     */
    NgEntityService.prototype.setBaseUrl = /**
     * @param {?} api
     * @return {?}
     */
    function (api) {
        this.baseUrl = api;
    };
    /**
     * @return {?}
     */
    NgEntityService.prototype.getHttp = /**
     * @return {?}
     */
    function () {
        return this.http;
    };
    /**
     * @return {?}
     */
    NgEntityService.prototype.getConfig = /**
     * @return {?}
     */
    function () {
        return this.mergedConfig;
    };
    /**
     * @template T
     * @param {?=} idOrConfig
     * @param {?=} config
     * @return {?}
     */
    NgEntityService.prototype.get = /**
     * @template T
     * @param {?=} idOrConfig
     * @param {?=} config
     * @return {?}
     */
    function (idOrConfig, config) {
        var _this = this;
        /** @type {?} */
        var url;
        /** @type {?} */
        var isSingle = isID(idOrConfig);
        /** @type {?} */
        var _config = (isSingle ? config : idOrConfig) || {};
        /** @type {?} */
        var method = this.getHttpMethod(HttpMethod.GET);
        if (_config.url) {
            url = _config.url;
        }
        else {
            url = isSingle ? this.api + "/" + idOrConfig : this.api;
        }
        this.loader.dispatch({
            method: method,
            loading: true,
            entityId: isSingle ? idOrConfig : null,
            storeName: this.store.storeName
        });
        return (/** @type {?} */ (this.http[method.toLowerCase()](url, _config).pipe(mapResponse(_config), tap((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (isSingle) {
                _this.store.upsert((/** @type {?} */ (idOrConfig)), data);
            }
            else {
                if (_config.append) {
                    _this.store.add(data);
                }
                else if (_config.upsert) {
                    _this.store.upsertMany(data);
                }
                else {
                    _this.store.set(data);
                }
            }
            _this.dispatchSuccess({
                method: method,
                payload: data,
                successMsg: _config.successMsg
            });
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.handleError(method, error, _config.errorMsg); })), finalize((/**
         * @return {?}
         */
        function () {
            _this.loader.dispatch({
                method: method,
                loading: false,
                storeName: _this.store.storeName
            });
        })))));
    };
    /**
     *
     * Add a new entity - Creates a POST request
     *
     * service.add(entity)
     * service.add(entity, config)
     *
     */
    /**
     *
     * Add a new entity - Creates a POST request
     *
     * service.add(entity)
     * service.add(entity, config)
     *
     * @template T
     * @param {?} entity
     * @param {?=} config
     * @return {?}
     */
    NgEntityService.prototype.add = /**
     *
     * Add a new entity - Creates a POST request
     *
     * service.add(entity)
     * service.add(entity, config)
     *
     * @template T
     * @param {?} entity
     * @param {?=} config
     * @return {?}
     */
    function (entity, config) {
        var _this = this;
        /** @type {?} */
        var method = this.getHttpMethod(HttpMethod.POST);
        this.loader.dispatch({
            method: method,
            loading: true,
            storeName: this.store.storeName
        });
        return (/** @type {?} */ (this.http[method.toLowerCase()](this.resolveUrl(config), entity, config).pipe(mapResponse(config), tap((/**
         * @param {?} entity
         * @return {?}
         */
        function (entity) {
            _this.store.add(entity, config);
            _this.dispatchSuccess({
                method: method,
                payload: entity,
                successMsg: config && config.successMsg
            });
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.handleError(method, error, config && config.errorMsg); })), finalize((/**
         * @return {?}
         */
        function () {
            _this.loader.dispatch({
                method: method,
                loading: false,
                storeName: _this.store.storeName
            });
        })))));
    };
    /**
     *
     * Update an entity - Creates a PUT/PATCH request
     *
     * service.update(id, entity)
     * service.update(id, entity, config)
     *
     */
    /**
     *
     * Update an entity - Creates a PUT/PATCH request
     *
     * service.update(id, entity)
     * service.update(id, entity, config)
     *
     * @template T
     * @param {?} id
     * @param {?} entity
     * @param {?=} config
     * @return {?}
     */
    NgEntityService.prototype.update = /**
     *
     * Update an entity - Creates a PUT/PATCH request
     *
     * service.update(id, entity)
     * service.update(id, entity, config)
     *
     * @template T
     * @param {?} id
     * @param {?} entity
     * @param {?=} config
     * @return {?}
     */
    function (id, entity, config) {
        var _this = this;
        /** @type {?} */
        var method = config && config.method ? config.method : this.getHttpMethod(HttpMethod.PUT);
        this.loader.dispatch({
            method: method,
            loading: true,
            entityId: id,
            storeName: this.store.storeName
        });
        return (/** @type {?} */ (this.http[method.toLocaleLowerCase()](this.resolveUrl(config, id), entity, config).pipe(mapResponse(config), tap((/**
         * @param {?} entity
         * @return {?}
         */
        function (entity) {
            _this.store.update(id, (/** @type {?} */ (entity)));
            _this.dispatchSuccess({
                method: method,
                payload: entity,
                successMsg: config && config.successMsg
            });
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.handleError(method, error, config && config.errorMsg); })), finalize((/**
         * @return {?}
         */
        function () {
            _this.loader.dispatch({
                method: method,
                loading: false,
                entityId: id,
                storeName: _this.store.storeName
            });
        })))));
    };
    /**
     *
     * Delete an entity - Creates a DELETE request
     *
     * service.delete(id)
     * service.delete(id, config)
     *
     */
    /**
     *
     * Delete an entity - Creates a DELETE request
     *
     * service.delete(id)
     * service.delete(id, config)
     *
     * @template T
     * @param {?} id
     * @param {?=} config
     * @return {?}
     */
    NgEntityService.prototype.delete = /**
     *
     * Delete an entity - Creates a DELETE request
     *
     * service.delete(id)
     * service.delete(id, config)
     *
     * @template T
     * @param {?} id
     * @param {?=} config
     * @return {?}
     */
    function (id, config) {
        var _this = this;
        /** @type {?} */
        var method = this.getHttpMethod(HttpMethod.DELETE);
        this.loader.dispatch({
            method: method,
            loading: true,
            entityId: id,
            storeName: this.store.storeName
        });
        return (/** @type {?} */ (this.http[method.toLowerCase()](this.resolveUrl(config, id), config).pipe(mapResponse(config), tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            _this.store.remove(id);
            _this.dispatchSuccess({
                method: method,
                payload: res,
                successMsg: config && config.successMsg
            });
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.handleError(method, error, config && config.errorMsg); })), finalize((/**
         * @return {?}
         */
        function () {
            _this.loader.dispatch({
                method: method,
                loading: false,
                entityId: id,
                storeName: _this.store.storeName
            });
        })))));
    };
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    NgEntityService.prototype.getHttpMethod = /**
     * @private
     * @param {?} type
     * @return {?}
     */
    function (type) {
        return this.mergedConfig.httpMethods[type];
    };
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    NgEntityService.prototype.getConfigValue = /**
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.constructor[key] || this.mergedConfig[key];
    };
    /**
     * @private
     * @param {?} config
     * @param {?=} id
     * @return {?}
     */
    NgEntityService.prototype.resolveUrl = /**
     * @private
     * @param {?} config
     * @param {?=} id
     * @return {?}
     */
    function (config, id) {
        /** @type {?} */
        var customUrl = (config || {}).url;
        if (isDefined(id)) {
            return customUrl || this.api + "/" + id;
        }
        return customUrl || this.api;
    };
    /**
     * @private
     * @param {?} method
     * @param {?} error
     * @param {?} errorMsg
     * @return {?}
     */
    NgEntityService.prototype.handleError = /**
     * @private
     * @param {?} method
     * @param {?} error
     * @param {?} errorMsg
     * @return {?}
     */
    function (method, error, errorMsg) {
        this.dispatchError({
            method: method,
            errorMsg: errorMsg,
            payload: error
        });
        return throwError(error);
    };
    return NgEntityService;
}(EntityService));
/**
 * @template S
 */
export { NgEntityService };
if (false) {
    /** @type {?} */
    NgEntityService.prototype.baseUrl;
    /** @type {?} */
    NgEntityService.prototype.loader;
    /**
     * @type {?}
     * @private
     */
    NgEntityService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    NgEntityService.prototype.notifier;
    /**
     * @type {?}
     * @private
     */
    NgEntityService.prototype.globalConfig;
    /**
     * @type {?}
     * @private
     */
    NgEntityService.prototype.mergedConfig;
    /**
     * @type {?}
     * @private
     */
    NgEntityService.prototype.dispatchSuccess;
    /**
     * @type {?}
     * @private
     */
    NgEntityService.prototype.dispatchError;
    /**
     * @type {?}
     * @protected
     */
    NgEntityService.prototype.store;
    /**
     * @type {?}
     * @private
     */
    NgEntityService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZW50aXR5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGF0b3JhbWEvYWtpdGEtbmctZW50aXR5LXNlcnZpY2UvIiwic291cmNlcyI6WyJsaWIvbmctZW50aXR5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLEVBRUwsYUFBYSxFQUtiLFNBQVMsRUFDVixNQUFNLGlCQUFpQixDQUFDO0FBQ3pCLE9BQU8sRUFBYyxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDOUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRWhFLE9BQU8sRUFBdUIsVUFBVSxFQUFFLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDeEcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDbkUsT0FBTyxFQUNMLGFBQWEsRUFDYixTQUFTLEVBQ1Qsd0JBQXdCLEVBRXpCLE1BQU0sNEJBQTRCLENBQUM7QUFDcEMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNqQyxPQUFPLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDOztBQUU5RCxNQUFNLEtBQU8sV0FBVzs7OztBQUFHLFVBQUMsTUFBa0I7SUFDNUMsT0FBQSxHQUFHOzs7O0lBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxDQUFDLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQWhFLENBQWdFLEVBQUM7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b0IsTUFBa0IsRUFBRSxLQUFVLEVBQUUsUUFBZ0I7UUFDbEUsSUFBSSxDQUFDLGFBQWEsQ0FBQztZQUNqQixNQUFNLFFBQUE7WUFDTixRQUFRLFVBQUE7WUFDUixPQUFPLEVBQUUsS0FBSztTQUNmLENBQUMsQ0FBQztRQUVILE9BQU8sVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFDSCxzQkFBQztBQUFELENBQUMsQUFuUUQsQ0FBa0UsYUFBYSxHQW1ROUU7Ozs7Ozs7SUFsUUMsa0NBQWdCOztJQUNoQixpQ0FBOEI7Ozs7O0lBRTlCLCtCQUF5Qjs7Ozs7SUFDekIsbUNBQTBDOzs7OztJQUMxQyx1Q0FBdUQ7Ozs7O0lBQ3ZELHVDQUEwRTs7Ozs7SUFFMUUsMENBQXdFOzs7OztJQUN4RSx3Q0FBc0U7Ozs7O0lBRTFELGdDQUErQjs7Ozs7SUFBRSxpQ0FBMEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZGRFbnRpdGllc09wdGlvbnMsXG4gIEVudGl0eVNlcnZpY2UsXG4gIEVudGl0eVN0YXRlLFxuICBFbnRpdHlTdG9yZSxcbiAgZ2V0RW50aXR5VHlwZSxcbiAgZ2V0SURUeXBlLFxuICBpc0RlZmluZWRcbn0gZnJvbSAnQGRhdG9yYW1hL2FraXRhJztcbmltcG9ydCB7IE9ic2VydmFibGUsIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIGZpbmFsaXplLCBtYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEh0dHBDb25maWcsIE1zZywgTmdFbnRpdHlTZXJ2aWNlUGFyYW1zIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBFbnRpdHlTZXJ2aWNlQWN0aW9uLCBIdHRwTWV0aG9kLCBOZ0VudGl0eVNlcnZpY2VOb3RpZmllciB9IGZyb20gJy4vbmctZW50aXR5LXNlcnZpY2Utbm90aWZpZXInO1xuaW1wb3J0IHsgTmdFbnRpdHlTZXJ2aWNlTG9hZGVyIH0gZnJvbSAnLi9uZy1lbnRpdHktc2VydmljZS5sb2FkZXInO1xuaW1wb3J0IHtcbiAgZGVmYXVsdENvbmZpZyxcbiAgbWVyZ2VEZWVwLFxuICBOR19FTlRJVFlfU0VSVklDRV9DT05GSUcsXG4gIE5nRW50aXR5U2VydmljZUdsb2JhbENvbmZpZ1xufSBmcm9tICcuL25nLWVudGl0eS1zZXJ2aWNlLmNvbmZpZyc7XG5pbXBvcnQgeyBpc0lEIH0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCB7IGVycm9yQWN0aW9uLCBzdWNjZXNzQWN0aW9uIH0gZnJvbSAnLi9hY3Rpb24tZmFjdG9yeSc7XG5cbmV4cG9ydCBjb25zdCBtYXBSZXNwb25zZSA9IChjb25maWc6IEh0dHBDb25maWcpID0+XG4gIG1hcChyZXMgPT4gKChjb25maWcgfHwge30pLm1hcFJlc3BvbnNlRm4gPyBjb25maWcubWFwUmVzcG9uc2VGbihyZXMpIDogcmVzKSk7XG5cbmV4cG9ydCBjbGFzcyBOZ0VudGl0eVNlcnZpY2U8UyBleHRlbmRzIEVudGl0eVN0YXRlID0gYW55PiBleHRlbmRzIEVudGl0eVNlcnZpY2U8Uz4ge1xuICBiYXNlVXJsOiBzdHJpbmc7XG4gIGxvYWRlcjogTmdFbnRpdHlTZXJ2aWNlTG9hZGVyO1xuXG4gIHByaXZhdGUgaHR0cDogSHR0cENsaWVudDtcbiAgcHJpdmF0ZSBub3RpZmllcjogTmdFbnRpdHlTZXJ2aWNlTm90aWZpZXI7XG4gIHByaXZhdGUgZ2xvYmFsQ29uZmlnOiBOZ0VudGl0eVNlcnZpY2VHbG9iYWxDb25maWcgPSB7fTtcbiAgcHJpdmF0ZSBtZXJnZWRDb25maWc6IE5nRW50aXR5U2VydmljZVBhcmFtcyAmIE5nRW50aXR5U2VydmljZUdsb2JhbENvbmZpZztcblxuICBwcml2YXRlIGRpc3BhdGNoU3VjY2VzczogKGFjdGlvbjogUGFydGlhbDxFbnRpdHlTZXJ2aWNlQWN0aW9uPikgPT4gdm9pZDtcbiAgcHJpdmF0ZSBkaXNwYXRjaEVycm9yOiAoYWN0aW9uOiBQYXJ0aWFsPEVudGl0eVNlcnZpY2VBY3Rpb24+KSA9PiB2b2lkO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBzdG9yZTogRW50aXR5U3RvcmU8Uz4sIHByaXZhdGUgY29uZmlnOiBOZ0VudGl0eVNlcnZpY2VQYXJhbXMgPSB7fSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5odHRwID0gaW5qZWN0KEh0dHBDbGllbnQpO1xuICAgIHRoaXMubG9hZGVyID0gaW5qZWN0KE5nRW50aXR5U2VydmljZUxvYWRlcik7XG4gICAgdGhpcy5ub3RpZmllciA9IGluamVjdChOZ0VudGl0eVNlcnZpY2VOb3RpZmllcik7XG4gICAgdGhpcy5nbG9iYWxDb25maWcgPSBpbmplY3QoTkdfRU5USVRZX1NFUlZJQ0VfQ09ORklHKTtcblxuICAgIHRoaXMubWVyZ2VkQ29uZmlnID0gbWVyZ2VEZWVwKGRlZmF1bHRDb25maWcsIHRoaXMuZ2xvYmFsQ29uZmlnLCBjb25maWcpO1xuXG4gICAgdGhpcy5kaXNwYXRjaFN1Y2Nlc3MgPSBzdWNjZXNzQWN0aW9uKHRoaXMuc3RvcmUuc3RvcmVOYW1lLCB0aGlzLm5vdGlmaWVyKTtcbiAgICB0aGlzLmRpc3BhdGNoRXJyb3IgPSBlcnJvckFjdGlvbih0aGlzLnN0b3JlLnN0b3JlTmFtZSwgdGhpcy5ub3RpZmllcik7XG4gIH1cblxuICBnZXQgYXBpKCkge1xuICAgIHJldHVybiBgJHt0aGlzLmJhc2VVcmwgfHwgdGhpcy5nZXRDb25maWdWYWx1ZSgnYmFzZVVybCcpfS8ke3RoaXMucmVzb3VyY2VOYW1lfWA7XG4gIH1cblxuICBnZXQgcmVzb3VyY2VOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmdldENvbmZpZ1ZhbHVlKCdyZXNvdXJjZU5hbWUnKSB8fCB0aGlzLnN0b3JlLnN0b3JlTmFtZTtcbiAgfVxuXG4gIHNldEJhc2VVcmwoYXBpOiBzdHJpbmcpIHtcbiAgICB0aGlzLmJhc2VVcmwgPSBhcGk7XG4gIH1cblxuICBnZXRIdHRwKCkge1xuICAgIHJldHVybiB0aGlzLmh0dHA7XG4gIH1cblxuICBnZXRDb25maWcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVyZ2VkQ29uZmlnO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEdldCBhbGwgb3Igb25lIGVudGl0eSAtIENyZWF0ZXMgYSBHRVQgcmVxdWVzdFxuICAgKlxuICAgKiBzZXJ2aWNlLmdldCgpLnN1YnNjcmliZSgpXG4gICAqIHNlcnZpY2UuZ2V0KHsgaGVhZGVycywgcGFyYW1zLCB1cmwgfSlcbiAgICpcbiAgICogc2VydmljZS5nZXQoaWQpXG4gICAqIHNlcnZpY2UuZ2V0KGlkLCB7IGhlYWRlcnMsIHBhcmFtcywgdXJsIH0pXG4gICAqXG4gICAqL1xuICBnZXQ8VD4oaWQ/OiBnZXRJRFR5cGU8Uz4sIGNvbmZpZz86IEh0dHBDb25maWcgJiB7IGFwcGVuZD86IGJvb2xlYW4gfSAmIE1zZyk6IE9ic2VydmFibGU8VD47XG4gIGdldDxUPihjb25maWc/OiBIdHRwQ29uZmlnICYgeyBhcHBlbmQ/OiBib29sZWFuIH0gJiBNc2cpOiBPYnNlcnZhYmxlPFQ+O1xuICBnZXQ8VD4oXG4gICAgaWRPckNvbmZpZz86IGdldElEVHlwZTxTPiB8IEh0dHBDb25maWcsXG4gICAgY29uZmlnPzogSHR0cENvbmZpZyAmIHsgYXBwZW5kPzogYm9vbGVhbjsgdXBzZXJ0PzogYm9vbGVhbiB9ICYgTXNnXG4gICk6IE9ic2VydmFibGU8VD4ge1xuICAgIGxldCB1cmw6IHN0cmluZztcbiAgICBjb25zdCBpc1NpbmdsZSA9IGlzSUQoaWRPckNvbmZpZyk7XG4gICAgY29uc3QgX2NvbmZpZzogSHR0cENvbmZpZyAmIHsgYXBwZW5kPzogYm9vbGVhbjsgdXBzZXJ0PzogYm9vbGVhbiB9ICYgTXNnID0gKGlzU2luZ2xlID8gY29uZmlnIDogaWRPckNvbmZpZykgfHwge307XG4gICAgY29uc3QgbWV0aG9kID0gdGhpcy5nZXRIdHRwTWV0aG9kKEh0dHBNZXRob2QuR0VUKTtcblxuICAgIGlmIChfY29uZmlnLnVybCkge1xuICAgICAgdXJsID0gX2NvbmZpZy51cmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVybCA9IGlzU2luZ2xlID8gYCR7dGhpcy5hcGl9LyR7aWRPckNvbmZpZ31gIDogdGhpcy5hcGk7XG4gICAgfVxuXG4gICAgdGhpcy5sb2FkZXIuZGlzcGF0Y2goe1xuICAgICAgbWV0aG9kLFxuICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgIGVudGl0eUlkOiBpc1NpbmdsZSA/IGlkT3JDb25maWcgOiBudWxsLFxuICAgICAgc3RvcmVOYW1lOiB0aGlzLnN0b3JlLnN0b3JlTmFtZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMuaHR0cFttZXRob2QudG9Mb3dlckNhc2UoKV0odXJsLCBfY29uZmlnKS5waXBlKFxuICAgICAgbWFwUmVzcG9uc2UoX2NvbmZpZyksXG4gICAgICB0YXAoKGRhdGE6IGFueSkgPT4ge1xuICAgICAgICBpZiAoaXNTaW5nbGUpIHtcbiAgICAgICAgICB0aGlzLnN0b3JlLnVwc2VydChpZE9yQ29uZmlnIGFzIGdldElEVHlwZTxTPiwgZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKF9jb25maWcuYXBwZW5kKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3JlLmFkZChkYXRhKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKF9jb25maWcudXBzZXJ0KSB7XG4gICAgICAgICAgICB0aGlzLnN0b3JlLnVwc2VydE1hbnkoZGF0YSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcmUuc2V0KGRhdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGlzcGF0Y2hTdWNjZXNzKHtcbiAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgcGF5bG9hZDogZGF0YSxcbiAgICAgICAgICBzdWNjZXNzTXNnOiBfY29uZmlnLnN1Y2Nlc3NNc2dcbiAgICAgICAgfSk7XG4gICAgICB9KSxcbiAgICAgIGNhdGNoRXJyb3IoZXJyb3IgPT4gdGhpcy5oYW5kbGVFcnJvcihtZXRob2QsIGVycm9yLCBfY29uZmlnLmVycm9yTXNnKSksXG4gICAgICBmaW5hbGl6ZSgoKSA9PiB7XG4gICAgICAgIHRoaXMubG9hZGVyLmRpc3BhdGNoKHtcbiAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgc3RvcmVOYW1lOiB0aGlzLnN0b3JlLnN0b3JlTmFtZVxuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgKSBhcyBPYnNlcnZhYmxlPFQ+O1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEFkZCBhIG5ldyBlbnRpdHkgLSBDcmVhdGVzIGEgUE9TVCByZXF1ZXN0XG4gICAqXG4gICAqIHNlcnZpY2UuYWRkKGVudGl0eSlcbiAgICogc2VydmljZS5hZGQoZW50aXR5LCBjb25maWcpXG4gICAqXG4gICAqL1xuICBhZGQ8VD4oZW50aXR5OiBnZXRFbnRpdHlUeXBlPFM+LCBjb25maWc/OiBIdHRwQ29uZmlnICYgUGljazxBZGRFbnRpdGllc09wdGlvbnMsICdwcmVwZW5kJz4gJiBNc2cpOiBPYnNlcnZhYmxlPFQ+IHtcbiAgICBjb25zdCBtZXRob2QgPSB0aGlzLmdldEh0dHBNZXRob2QoSHR0cE1ldGhvZC5QT1NUKTtcblxuICAgIHRoaXMubG9hZGVyLmRpc3BhdGNoKHtcbiAgICAgIG1ldGhvZCxcbiAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICBzdG9yZU5hbWU6IHRoaXMuc3RvcmUuc3RvcmVOYW1lXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFttZXRob2QudG9Mb3dlckNhc2UoKV0odGhpcy5yZXNvbHZlVXJsKGNvbmZpZyksIGVudGl0eSwgY29uZmlnKS5waXBlKFxuICAgICAgbWFwUmVzcG9uc2UoY29uZmlnKSxcbiAgICAgIHRhcCgoZW50aXR5OiBhbnkpID0+IHtcbiAgICAgICAgdGhpcy5zdG9yZS5hZGQoZW50aXR5LCBjb25maWcpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoU3VjY2Vzcyh7XG4gICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgIHBheWxvYWQ6IGVudGl0eSxcbiAgICAgICAgICBzdWNjZXNzTXNnOiBjb25maWcgJiYgY29uZmlnLnN1Y2Nlc3NNc2dcbiAgICAgICAgfSk7XG4gICAgICB9KSxcbiAgICAgIGNhdGNoRXJyb3IoZXJyb3IgPT4gdGhpcy5oYW5kbGVFcnJvcihtZXRob2QsIGVycm9yLCBjb25maWcgJiYgY29uZmlnLmVycm9yTXNnKSksXG4gICAgICBmaW5hbGl6ZSgoKSA9PiB7XG4gICAgICAgIHRoaXMubG9hZGVyLmRpc3BhdGNoKHtcbiAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgc3RvcmVOYW1lOiB0aGlzLnN0b3JlLnN0b3JlTmFtZVxuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgKSBhcyBPYnNlcnZhYmxlPFQ+O1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIFVwZGF0ZSBhbiBlbnRpdHkgLSBDcmVhdGVzIGEgUFVUL1BBVENIIHJlcXVlc3RcbiAgICpcbiAgICogc2VydmljZS51cGRhdGUoaWQsIGVudGl0eSlcbiAgICogc2VydmljZS51cGRhdGUoaWQsIGVudGl0eSwgY29uZmlnKVxuICAgKlxuICAgKi9cbiAgdXBkYXRlPFQ+KFxuICAgIGlkOiBnZXRJRFR5cGU8Uz4sXG4gICAgZW50aXR5OiBQYXJ0aWFsPGdldEVudGl0eVR5cGU8Uz4+LFxuICAgIGNvbmZpZz86IEh0dHBDb25maWcgJiB7IG1ldGhvZDogSHR0cE1ldGhvZC5QVVQgfCBIdHRwTWV0aG9kLlBBVENIIH0gJiBNc2dcbiAgKTogT2JzZXJ2YWJsZTxUPiB7XG4gICAgY29uc3QgbWV0aG9kID0gY29uZmlnICYmIGNvbmZpZy5tZXRob2QgPyBjb25maWcubWV0aG9kIDogdGhpcy5nZXRIdHRwTWV0aG9kKEh0dHBNZXRob2QuUFVUKTtcblxuICAgIHRoaXMubG9hZGVyLmRpc3BhdGNoKHtcbiAgICAgIG1ldGhvZCxcbiAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICBlbnRpdHlJZDogaWQsXG4gICAgICBzdG9yZU5hbWU6IHRoaXMuc3RvcmUuc3RvcmVOYW1lXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcy5odHRwW21ldGhvZC50b0xvY2FsZUxvd2VyQ2FzZSgpXSh0aGlzLnJlc29sdmVVcmwoY29uZmlnLCBpZCksIGVudGl0eSwgY29uZmlnKS5waXBlKFxuICAgICAgbWFwUmVzcG9uc2UoY29uZmlnKSxcbiAgICAgIHRhcChlbnRpdHkgPT4ge1xuICAgICAgICB0aGlzLnN0b3JlLnVwZGF0ZShpZCwgZW50aXR5IGFzIGFueSk7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hTdWNjZXNzKHtcbiAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgcGF5bG9hZDogZW50aXR5LFxuICAgICAgICAgIHN1Y2Nlc3NNc2c6IGNvbmZpZyAmJiBjb25maWcuc3VjY2Vzc01zZ1xuICAgICAgICB9KTtcbiAgICAgIH0pLFxuICAgICAgY2F0Y2hFcnJvcihlcnJvciA9PiB0aGlzLmhhbmRsZUVycm9yKG1ldGhvZCwgZXJyb3IsIGNvbmZpZyAmJiBjb25maWcuZXJyb3JNc2cpKSxcbiAgICAgIGZpbmFsaXplKCgpID0+IHtcbiAgICAgICAgdGhpcy5sb2FkZXIuZGlzcGF0Y2goe1xuICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICBlbnRpdHlJZDogaWQsXG4gICAgICAgICAgc3RvcmVOYW1lOiB0aGlzLnN0b3JlLnN0b3JlTmFtZVxuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgKSBhcyBPYnNlcnZhYmxlPFQ+O1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIERlbGV0ZSBhbiBlbnRpdHkgLSBDcmVhdGVzIGEgREVMRVRFIHJlcXVlc3RcbiAgICpcbiAgICogc2VydmljZS5kZWxldGUoaWQpXG4gICAqIHNlcnZpY2UuZGVsZXRlKGlkLCBjb25maWcpXG4gICAqXG4gICAqL1xuICBkZWxldGU8VD4oaWQ6IGdldElEVHlwZTxTPiwgY29uZmlnPzogSHR0cENvbmZpZyAmIE1zZyk6IE9ic2VydmFibGU8VD4ge1xuICAgIGNvbnN0IG1ldGhvZCA9IHRoaXMuZ2V0SHR0cE1ldGhvZChIdHRwTWV0aG9kLkRFTEVURSk7XG5cbiAgICB0aGlzLmxvYWRlci5kaXNwYXRjaCh7XG4gICAgICBtZXRob2QsXG4gICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgZW50aXR5SWQ6IGlkLFxuICAgICAgc3RvcmVOYW1lOiB0aGlzLnN0b3JlLnN0b3JlTmFtZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMuaHR0cFttZXRob2QudG9Mb3dlckNhc2UoKV0odGhpcy5yZXNvbHZlVXJsKGNvbmZpZywgaWQpLCBjb25maWcpLnBpcGUoXG4gICAgICBtYXBSZXNwb25zZShjb25maWcpLFxuICAgICAgdGFwKHJlcyA9PiB7XG4gICAgICAgIHRoaXMuc3RvcmUucmVtb3ZlKGlkKTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaFN1Y2Nlc3Moe1xuICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICBwYXlsb2FkOiByZXMsXG4gICAgICAgICAgc3VjY2Vzc01zZzogY29uZmlnICYmIGNvbmZpZy5zdWNjZXNzTXNnXG4gICAgICAgIH0pO1xuICAgICAgfSksXG4gICAgICBjYXRjaEVycm9yKGVycm9yID0+IHRoaXMuaGFuZGxlRXJyb3IobWV0aG9kLCBlcnJvciwgY29uZmlnICYmIGNvbmZpZy5lcnJvck1zZykpLFxuICAgICAgZmluYWxpemUoKCkgPT4ge1xuICAgICAgICB0aGlzLmxvYWRlci5kaXNwYXRjaCh7XG4gICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgIGVudGl0eUlkOiBpZCxcbiAgICAgICAgICBzdG9yZU5hbWU6IHRoaXMuc3RvcmUuc3RvcmVOYW1lXG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICApIGFzIE9ic2VydmFibGU8VD47XG4gIH1cblxuICBwcml2YXRlIGdldEh0dHBNZXRob2QodHlwZTogSHR0cE1ldGhvZCkge1xuICAgIHJldHVybiB0aGlzLm1lcmdlZENvbmZpZy5odHRwTWV0aG9kc1t0eXBlXTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q29uZmlnVmFsdWUoa2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3RvcltrZXldIHx8IHRoaXMubWVyZ2VkQ29uZmlnW2tleV07XG4gIH1cblxuICBwcml2YXRlIHJlc29sdmVVcmwoY29uZmlnOiBIdHRwQ29uZmlnLCBpZD86IGFueSkge1xuICAgIGNvbnN0IGN1c3RvbVVybCA9IChjb25maWcgfHwge30pLnVybDtcbiAgICBpZiAoaXNEZWZpbmVkKGlkKSkge1xuICAgICAgcmV0dXJuIGN1c3RvbVVybCB8fCBgJHt0aGlzLmFwaX0vJHtpZH1gO1xuICAgIH1cblxuICAgIHJldHVybiBjdXN0b21VcmwgfHwgdGhpcy5hcGk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUVycm9yKG1ldGhvZDogSHR0cE1ldGhvZCwgZXJyb3I6IGFueSwgZXJyb3JNc2c6IHN0cmluZykge1xuICAgIHRoaXMuZGlzcGF0Y2hFcnJvcih7XG4gICAgICBtZXRob2QsXG4gICAgICBlcnJvck1zZyxcbiAgICAgIHBheWxvYWQ6IGVycm9yXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhyb3dFcnJvcihlcnJvcik7XG4gIH1cbn1cbiJdfQ==