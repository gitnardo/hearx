/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import * as i0 from "@angular/core";
/** @enum {string} */
var HttpMethod = {
    GET: 'GET',
    POST: 'POST',
    PUT: 'PUT',
    PATCH: 'PATCH',
    DELETE: 'DELETE',
};
export { HttpMethod };
/** @type {?} */
export var ofType = (/**
 * @param {?} type
 * @return {?}
 */
function (type) { return filter((/**
 * @param {?} action
 * @return {?}
 */
function (action) { return action.type === type; })); });
/** @type {?} */
export var filterMethod = (/**
 * @param {?} method
 * @return {?}
 */
function (method) {
    return filter((/**
     * @param {?} action
     * @return {?}
     */
    function (action) { return action.method === method; }));
});
/** @type {?} */
export var filterStore = (/**
 * @param {?} name
 * @return {?}
 */
function (name) { return filter((/**
 * @param {?} action
 * @return {?}
 */
function (action) { return action.storeName === name; })); });
var NgEntityServiceNotifier = /** @class */ (function () {
    function NgEntityServiceNotifier() {
        this.dispatcher = new Subject();
        this.action$ = this.dispatcher.asObservable();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    NgEntityServiceNotifier.prototype.dispatch = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dispatcher.next(event);
    };
    NgEntityServiceNotifier.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */ NgEntityServiceNotifier.ngInjectableDef = i0.defineInjectable({ factory: function NgEntityServiceNotifier_Factory() { return new NgEntityServiceNotifier(); }, token: NgEntityServiceNotifier, providedIn: "root" });
    return NgEntityServiceNotifier;
}());
export { NgEntityServiceNotifier };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgEntityServiceNotifier.prototype.dispatcher;
    /** @type {?} */
    NgEntityServiceNotifier.prototype.action$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZW50aXR5LXNlcnZpY2Utbm90aWZpZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGF0b3JhbWEvYWtpdGEtbmctZW50aXR5LXNlcnZpY2UvIiwic291cmNlcyI6WyJsaWIvbmctZW50aXR5LXNlcnZpY2Utbm90aWZpZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7SUFJdEMsS0FBTSxLQUFLO0lBQ1gsTUFBTyxNQUFNO0lBQ2IsS0FBTSxLQUFLO0lBQ1gsT0FBUSxPQUFPO0lBQ2YsUUFBUyxRQUFROzs7O0FBWW5CLE1BQU0sS0FBTyxNQUFNOzs7O0FBQUcsVUFBQyxJQUFnQixJQUFLLE9BQUEsTUFBTTs7OztBQUFDLFVBQUMsTUFBMkIsSUFBSyxPQUFBLE1BQU0sQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFwQixDQUFvQixFQUFDLEVBQTdELENBQTZELENBQUE7O0FBRXpHLE1BQU0sS0FBTyxZQUFZOzs7O0FBQUcsVUFBQyxNQUE4QztJQUN6RSxPQUFBLE1BQU07Ozs7SUFBQyxVQUFDLE1BQTJCLElBQUssT0FBQSxNQUFNLENBQUMsTUFBTSxLQUFLLE1BQU0sRUFBeEIsQ0FBd0IsRUFBQztBQUFqRSxDQUFpRSxDQUFBOztBQUVuRSxNQUFNLEtBQU8sV0FBVzs7OztBQUFHLFVBQUMsSUFBWSxJQUFLLE9BQUEsTUFBTTs7OztBQUFDLFVBQUMsTUFBMkIsSUFBSyxPQUFBLE1BQU0sQ0FBQyxTQUFTLEtBQUssSUFBSSxFQUF6QixDQUF5QixFQUFDLEVBQWxFLENBQWtFLENBQUE7QUFFL0c7SUFBQTtRQUVVLGVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBdUIsQ0FBQztRQUN4RCxZQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztLQUsxQzs7Ozs7SUFIQywwQ0FBUTs7OztJQUFSLFVBQVMsS0FBMEI7UUFDakMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7Z0JBUEYsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7O2tDQTdCbEM7Q0FxQ0MsQUFSRCxJQVFDO1NBUFksdUJBQXVCOzs7Ozs7SUFDbEMsNkNBQXdEOztJQUN4RCwwQ0FBeUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBNc2cgfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGVudW0gSHR0cE1ldGhvZCB7XG4gIEdFVCA9ICdHRVQnLFxuICBQT1NUID0gJ1BPU1QnLFxuICBQVVQgPSAnUFVUJyxcbiAgUEFUQ0ggPSAnUEFUQ0gnLFxuICBERUxFVEUgPSAnREVMRVRFJ1xufVxuXG5leHBvcnQgdHlwZSBBY3Rpb25UeXBlID0gJ3N1Y2Nlc3MnIHwgJ2Vycm9yJztcblxuZXhwb3J0IHR5cGUgRW50aXR5U2VydmljZUFjdGlvbiA9IHtcbiAgc3RvcmVOYW1lOiBzdHJpbmc7XG4gIHR5cGU6IEFjdGlvblR5cGU7XG4gIHBheWxvYWQ6IGFueTtcbiAgbWV0aG9kOiBIdHRwTWV0aG9kO1xufSAmIE1zZztcblxuZXhwb3J0IGNvbnN0IG9mVHlwZSA9ICh0eXBlOiBBY3Rpb25UeXBlKSA9PiBmaWx0ZXIoKGFjdGlvbjogRW50aXR5U2VydmljZUFjdGlvbikgPT4gYWN0aW9uLnR5cGUgPT09IHR5cGUpO1xuXG5leHBvcnQgY29uc3QgZmlsdGVyTWV0aG9kID0gKG1ldGhvZDogSHR0cE1ldGhvZCB8IGtleW9mICh0eXBlb2YgSHR0cE1ldGhvZCkpID0+XG4gIGZpbHRlcigoYWN0aW9uOiBFbnRpdHlTZXJ2aWNlQWN0aW9uKSA9PiBhY3Rpb24ubWV0aG9kID09PSBtZXRob2QpO1xuXG5leHBvcnQgY29uc3QgZmlsdGVyU3RvcmUgPSAobmFtZTogc3RyaW5nKSA9PiBmaWx0ZXIoKGFjdGlvbjogRW50aXR5U2VydmljZUFjdGlvbikgPT4gYWN0aW9uLnN0b3JlTmFtZSA9PT0gbmFtZSk7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgTmdFbnRpdHlTZXJ2aWNlTm90aWZpZXIge1xuICBwcml2YXRlIGRpc3BhdGNoZXIgPSBuZXcgU3ViamVjdDxFbnRpdHlTZXJ2aWNlQWN0aW9uPigpO1xuICBhY3Rpb24kID0gdGhpcy5kaXNwYXRjaGVyLmFzT2JzZXJ2YWJsZSgpO1xuXG4gIGRpc3BhdGNoKGV2ZW50OiBFbnRpdHlTZXJ2aWNlQWN0aW9uKSB7XG4gICAgdGhpcy5kaXNwYXRjaGVyLm5leHQoZXZlbnQpO1xuICB9XG59XG4iXX0=