/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
import { Injectable } from '@angular/core';
import { filter, map } from 'rxjs/operators';
import { isFunction } from '@datorama/akita';
import { HttpMethod } from './ng-entity-service-notifier';
import * as i0 from "@angular/core";
var NgEntityServiceLoader = /** @class */ (function () {
    function NgEntityServiceLoader() {
        this.dispatcher = new Subject();
        this.loading$ = this.dispatcher.asObservable();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    NgEntityServiceLoader.prototype.dispatch = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dispatcher.next(event);
    };
    /**
     * @param {?=} name
     * @return {?}
     */
    NgEntityServiceLoader.prototype.loadersFor = /**
     * @param {?=} name
     * @return {?}
     */
    function (name) {
        var _this = this;
        /** @type {?} */
        var filterStore = filter((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var storeName = _a.storeName;
            return (name ? storeName === name : true);
        }));
        /** @type {?} */
        var filterMethod = (/**
         * @param {?} mthd
         * @return {?}
         */
        function (mthd) {
            return filter((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var method = _a.method;
                return isFunction(mthd) ? mthd(method) : method === mthd;
            }));
        });
        /** @type {?} */
        var actionBased = (/**
         * @param {?} current
         * @return {?}
         */
        function (current) {
            return _this.loading$.pipe(filterStore, filterMethod(current), map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.loading; })));
        });
        /** @type {?} */
        var idBased = (/**
         * @param {?} id
         * @param {?} mthd
         * @return {?}
         */
        function (id, mthd) {
            return _this.loading$.pipe(filterStore, filterMethod(mthd), filter((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.entityId === id; })), map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.loading; })));
        });
        return {
            get$: actionBased(HttpMethod.GET),
            add$: actionBased(HttpMethod.POST),
            update$: actionBased((/**
             * @param {?} method
             * @return {?}
             */
            function (method) { return method === HttpMethod.PUT || method === HttpMethod.PATCH; })),
            delete$: actionBased(HttpMethod.DELETE),
            getEntity: (/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return idBased(id, HttpMethod.GET); }),
            updateEntity: (/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return idBased(id, (/**
             * @param {?} method
             * @return {?}
             */
            function (method) { return method === HttpMethod.PUT || method === HttpMethod.PATCH; })); }),
            deleteEntity: (/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return idBased(id, HttpMethod.DELETE); })
        };
    };
    NgEntityServiceLoader.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */ NgEntityServiceLoader.ngInjectableDef = i0.defineInjectable({ factory: function NgEntityServiceLoader_Factory() { return new NgEntityServiceLoader(); }, token: NgEntityServiceLoader, providedIn: "root" });
    return NgEntityServiceLoader;
}());
export { NgEntityServiceLoader };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgEntityServiceLoader.prototype.dispatcher;
    /** @type {?} */
    NgEntityServiceLoader.prototype.loading$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZW50aXR5LXNlcnZpY2UubG9hZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRhdG9yYW1hL2FraXRhLW5nLWVudGl0eS1zZXJ2aWNlLyIsInNvdXJjZXMiOlsibGliL25nLWVudGl0eS1zZXJ2aWNlLmxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7QUFJMUQ7SUFBQTtRQUVVLGVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBUyxDQUFDO1FBQzFDLGFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDO0tBc0MzQzs7Ozs7SUFwQ0Msd0NBQVE7Ozs7SUFBUixVQUFTLEtBQVk7UUFDbkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7Ozs7SUFFRCwwQ0FBVTs7OztJQUFWLFVBQVcsSUFBYTtRQUF4QixpQkErQkM7O1lBOUJPLFdBQVcsR0FBRyxNQUFNOzs7O1FBQUMsVUFBQyxFQUFvQjtnQkFBbEIsd0JBQVM7WUFBYyxPQUFBLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFBbEMsQ0FBa0MsRUFBQzs7WUFDbEYsWUFBWTs7OztRQUFHLFVBQUEsSUFBSTtZQUN2QixPQUFBLE1BQU07Ozs7WUFBQyxVQUFDLEVBQWlCO29CQUFmLGtCQUFNO2dCQUNkLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUM7WUFDM0QsQ0FBQyxFQUFDO1FBRkYsQ0FFRSxDQUFBOztZQUVFLFdBQVc7Ozs7UUFBRyxVQUFDLE9BQTJDO1lBQzlELE9BQUEsS0FBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ2hCLFdBQVcsRUFDWCxZQUFZLENBQUMsT0FBTyxDQUFDLEVBQ3JCLEdBQUc7Ozs7WUFBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sQ0FBQyxPQUFPLEVBQWQsQ0FBYyxFQUFDLENBQzlCO1FBSkQsQ0FJQyxDQUFBOztZQUVHLE9BQU87Ozs7O1FBQUcsVUFBQyxFQUFPLEVBQUUsSUFBd0M7WUFDaEUsT0FBQSxLQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDaEIsV0FBVyxFQUNYLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFDbEIsTUFBTTs7OztZQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLFFBQVEsS0FBSyxFQUFFLEVBQXRCLENBQXNCLEVBQUMsRUFDeEMsR0FBRzs7OztZQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLE9BQU8sRUFBZCxDQUFjLEVBQUMsQ0FDOUI7UUFMRCxDQUtDLENBQUE7UUFFSCxPQUFPO1lBQ0wsSUFBSSxFQUFFLFdBQVcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDO1lBQ2pDLElBQUksRUFBRSxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztZQUNsQyxPQUFPLEVBQUUsV0FBVzs7OztZQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxLQUFLLFVBQVUsQ0FBQyxHQUFHLElBQUksTUFBTSxLQUFLLFVBQVUsQ0FBQyxLQUFLLEVBQXhELENBQXdELEVBQUM7WUFDeEYsT0FBTyxFQUFFLFdBQVcsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO1lBQ3ZDLFNBQVM7Ozs7WUFBRSxVQUFDLEVBQU8sSUFBSyxPQUFBLE9BQU8sQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUEzQixDQUEyQixDQUFBO1lBQ25ELFlBQVk7Ozs7WUFBRSxVQUFDLEVBQU8sSUFBSyxPQUFBLE9BQU8sQ0FBQyxFQUFFOzs7O1lBQUUsVUFBQSxNQUFNLElBQUksT0FBQSxNQUFNLEtBQUssVUFBVSxDQUFDLEdBQUcsSUFBSSxNQUFNLEtBQUssVUFBVSxDQUFDLEtBQUssRUFBeEQsQ0FBd0QsRUFBQyxFQUEvRSxDQUErRSxDQUFBO1lBQzFHLFlBQVk7Ozs7WUFBRSxVQUFDLEVBQU8sSUFBSyxPQUFBLE9BQU8sQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUE5QixDQUE4QixDQUFBO1NBQzFELENBQUM7SUFDSixDQUFDOztnQkF4Q0YsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7O2dDQVJsQztDQWlEQyxBQXpDRCxJQXlDQztTQXhDWSxxQkFBcUI7Ozs7OztJQUNoQywyQ0FBMEM7O0lBQzFDLHlDQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGZpbHRlciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJ0BkYXRvcmFtYS9ha2l0YSc7XG5pbXBvcnQgeyBIdHRwTWV0aG9kIH0gZnJvbSAnLi9uZy1lbnRpdHktc2VydmljZS1ub3RpZmllcic7XG5cbnR5cGUgRXZlbnQgPSB7IG1ldGhvZDogSHR0cE1ldGhvZDsgbG9hZGluZzogYm9vbGVhbjsgc3RvcmVOYW1lOiBzdHJpbmc7IGVudGl0eUlkPzogYW55IH07XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgTmdFbnRpdHlTZXJ2aWNlTG9hZGVyIHtcbiAgcHJpdmF0ZSBkaXNwYXRjaGVyID0gbmV3IFN1YmplY3Q8RXZlbnQ+KCk7XG4gIGxvYWRpbmckID0gdGhpcy5kaXNwYXRjaGVyLmFzT2JzZXJ2YWJsZSgpO1xuXG4gIGRpc3BhdGNoKGV2ZW50OiBFdmVudCkge1xuICAgIHRoaXMuZGlzcGF0Y2hlci5uZXh0KGV2ZW50KTtcbiAgfVxuXG4gIGxvYWRlcnNGb3IobmFtZT86IHN0cmluZykge1xuICAgIGNvbnN0IGZpbHRlclN0b3JlID0gZmlsdGVyKCh7IHN0b3JlTmFtZSB9OiBFdmVudCkgPT4gKG5hbWUgPyBzdG9yZU5hbWUgPT09IG5hbWUgOiB0cnVlKSk7XG4gICAgY29uc3QgZmlsdGVyTWV0aG9kID0gbXRoZCA9PlxuICAgICAgZmlsdGVyKCh7IG1ldGhvZCB9OiBFdmVudCkgPT4ge1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihtdGhkKSA/IG10aGQobWV0aG9kKSA6IG1ldGhvZCA9PT0gbXRoZDtcbiAgICAgIH0pO1xuXG4gICAgY29uc3QgYWN0aW9uQmFzZWQgPSAoY3VycmVudDogKChtZXRob2QpID0+IGJvb2xlYW4pIHwgSHR0cE1ldGhvZCkgPT5cbiAgICAgIHRoaXMubG9hZGluZyQucGlwZShcbiAgICAgICAgZmlsdGVyU3RvcmUsXG4gICAgICAgIGZpbHRlck1ldGhvZChjdXJyZW50KSxcbiAgICAgICAgbWFwKGFjdGlvbiA9PiBhY3Rpb24ubG9hZGluZylcbiAgICAgICk7XG5cbiAgICBjb25zdCBpZEJhc2VkID0gKGlkOiBhbnksIG10aGQ6ICgobWV0aG9kKSA9PiBib29sZWFuKSB8IEh0dHBNZXRob2QpID0+XG4gICAgICB0aGlzLmxvYWRpbmckLnBpcGUoXG4gICAgICAgIGZpbHRlclN0b3JlLFxuICAgICAgICBmaWx0ZXJNZXRob2QobXRoZCksXG4gICAgICAgIGZpbHRlcihhY3Rpb24gPT4gYWN0aW9uLmVudGl0eUlkID09PSBpZCksXG4gICAgICAgIG1hcChhY3Rpb24gPT4gYWN0aW9uLmxvYWRpbmcpXG4gICAgICApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGdldCQ6IGFjdGlvbkJhc2VkKEh0dHBNZXRob2QuR0VUKSxcbiAgICAgIGFkZCQ6IGFjdGlvbkJhc2VkKEh0dHBNZXRob2QuUE9TVCksXG4gICAgICB1cGRhdGUkOiBhY3Rpb25CYXNlZChtZXRob2QgPT4gbWV0aG9kID09PSBIdHRwTWV0aG9kLlBVVCB8fCBtZXRob2QgPT09IEh0dHBNZXRob2QuUEFUQ0gpLFxuICAgICAgZGVsZXRlJDogYWN0aW9uQmFzZWQoSHR0cE1ldGhvZC5ERUxFVEUpLFxuICAgICAgZ2V0RW50aXR5OiAoaWQ6IGFueSkgPT4gaWRCYXNlZChpZCwgSHR0cE1ldGhvZC5HRVQpLFxuICAgICAgdXBkYXRlRW50aXR5OiAoaWQ6IGFueSkgPT4gaWRCYXNlZChpZCwgbWV0aG9kID0+IG1ldGhvZCA9PT0gSHR0cE1ldGhvZC5QVVQgfHwgbWV0aG9kID09PSBIdHRwTWV0aG9kLlBBVENIKSxcbiAgICAgIGRlbGV0ZUVudGl0eTogKGlkOiBhbnkpID0+IGlkQmFzZWQoaWQsIEh0dHBNZXRob2QuREVMRVRFKVxuICAgIH07XG4gIH1cbn1cbiJdfQ==