/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
import { Injectable } from '@angular/core';
import { filter, map } from 'rxjs/operators';
import { isFunction } from '@datorama/akita';
import { HttpMethod } from './ng-entity-service-notifier';
import * as i0 from "@angular/core";
export class NgEntityServiceLoader {
    constructor() {
        this.dispatcher = new Subject();
        this.loading$ = this.dispatcher.asObservable();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dispatch(event) {
        this.dispatcher.next(event);
    }
    /**
     * @param {?=} name
     * @return {?}
     */
    loadersFor(name) {
        /** @type {?} */
        const filterStore = filter((/**
         * @param {?} __0
         * @return {?}
         */
        ({ storeName }) => (name ? storeName === name : true)));
        /** @type {?} */
        const filterMethod = (/**
         * @param {?} mthd
         * @return {?}
         */
        mthd => filter((/**
         * @param {?} __0
         * @return {?}
         */
        ({ method }) => {
            return isFunction(mthd) ? mthd(method) : method === mthd;
        })));
        /** @type {?} */
        const actionBased = (/**
         * @param {?} current
         * @return {?}
         */
        (current) => this.loading$.pipe(filterStore, filterMethod(current), map((/**
         * @param {?} action
         * @return {?}
         */
        action => action.loading))));
        /** @type {?} */
        const idBased = (/**
         * @param {?} id
         * @param {?} mthd
         * @return {?}
         */
        (id, mthd) => this.loading$.pipe(filterStore, filterMethod(mthd), filter((/**
         * @param {?} action
         * @return {?}
         */
        action => action.entityId === id)), map((/**
         * @param {?} action
         * @return {?}
         */
        action => action.loading))));
        return {
            get$: actionBased(HttpMethod.GET),
            add$: actionBased(HttpMethod.POST),
            update$: actionBased((/**
             * @param {?} method
             * @return {?}
             */
            method => method === HttpMethod.PUT || method === HttpMethod.PATCH)),
            delete$: actionBased(HttpMethod.DELETE),
            getEntity: (/**
             * @param {?} id
             * @return {?}
             */
            (id) => idBased(id, HttpMethod.GET)),
            updateEntity: (/**
             * @param {?} id
             * @return {?}
             */
            (id) => idBased(id, (/**
             * @param {?} method
             * @return {?}
             */
            method => method === HttpMethod.PUT || method === HttpMethod.PATCH))),
            deleteEntity: (/**
             * @param {?} id
             * @return {?}
             */
            (id) => idBased(id, HttpMethod.DELETE))
        };
    }
}
NgEntityServiceLoader.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */ NgEntityServiceLoader.ngInjectableDef = i0.defineInjectable({ factory: function NgEntityServiceLoader_Factory() { return new NgEntityServiceLoader(); }, token: NgEntityServiceLoader, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgEntityServiceLoader.prototype.dispatcher;
    /** @type {?} */
    NgEntityServiceLoader.prototype.loading$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZW50aXR5LXNlcnZpY2UubG9hZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRhdG9yYW1hL2FraXRhLW5nLWVudGl0eS1zZXJ2aWNlLyIsInNvdXJjZXMiOlsibGliL25nLWVudGl0eS1zZXJ2aWNlLmxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7QUFLMUQsTUFBTSxPQUFPLHFCQUFxQjtJQURsQztRQUVVLGVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBUyxDQUFDO1FBQzFDLGFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDO0tBc0MzQzs7Ozs7SUFwQ0MsUUFBUSxDQUFDLEtBQVk7UUFDbkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7Ozs7SUFFRCxVQUFVLENBQUMsSUFBYTs7Y0FDaEIsV0FBVyxHQUFHLE1BQU07Ozs7UUFBQyxDQUFDLEVBQUUsU0FBUyxFQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQzs7Y0FDbEYsWUFBWTs7OztRQUFHLElBQUksQ0FBQyxFQUFFLENBQzFCLE1BQU07Ozs7UUFBQyxDQUFDLEVBQUUsTUFBTSxFQUFTLEVBQUUsRUFBRTtZQUMzQixPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDO1FBQzNELENBQUMsRUFBQyxDQUFBOztjQUVFLFdBQVc7Ozs7UUFBRyxDQUFDLE9BQTJDLEVBQUUsRUFBRSxDQUNsRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDaEIsV0FBVyxFQUNYLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFDckIsR0FBRzs7OztRQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBQyxDQUM5QixDQUFBOztjQUVHLE9BQU87Ozs7O1FBQUcsQ0FBQyxFQUFPLEVBQUUsSUFBd0MsRUFBRSxFQUFFLENBQ3BFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNoQixXQUFXLEVBQ1gsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUNsQixNQUFNOzs7O1FBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxLQUFLLEVBQUUsRUFBQyxFQUN4QyxHQUFHOzs7O1FBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFDLENBQzlCLENBQUE7UUFFSCxPQUFPO1lBQ0wsSUFBSSxFQUFFLFdBQVcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDO1lBQ2pDLElBQUksRUFBRSxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztZQUNsQyxPQUFPLEVBQUUsV0FBVzs7OztZQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxLQUFLLFVBQVUsQ0FBQyxHQUFHLElBQUksTUFBTSxLQUFLLFVBQVUsQ0FBQyxLQUFLLEVBQUM7WUFDeEYsT0FBTyxFQUFFLFdBQVcsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO1lBQ3ZDLFNBQVM7Ozs7WUFBRSxDQUFDLEVBQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDbkQsWUFBWTs7OztZQUFFLENBQUMsRUFBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRTs7OztZQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxLQUFLLFVBQVUsQ0FBQyxHQUFHLElBQUksTUFBTSxLQUFLLFVBQVUsQ0FBQyxLQUFLLEVBQUMsQ0FBQTtZQUMxRyxZQUFZOzs7O1lBQUUsQ0FBQyxFQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1NBQzFELENBQUM7SUFDSixDQUFDOzs7WUF4Q0YsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7Ozs7Ozs7SUFFaEMsMkNBQTBDOztJQUMxQyx5Q0FBMEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICdAZGF0b3JhbWEvYWtpdGEnO1xuaW1wb3J0IHsgSHR0cE1ldGhvZCB9IGZyb20gJy4vbmctZW50aXR5LXNlcnZpY2Utbm90aWZpZXInO1xuXG50eXBlIEV2ZW50ID0geyBtZXRob2Q6IEh0dHBNZXRob2Q7IGxvYWRpbmc6IGJvb2xlYW47IHN0b3JlTmFtZTogc3RyaW5nOyBlbnRpdHlJZD86IGFueSB9O1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIE5nRW50aXR5U2VydmljZUxvYWRlciB7XG4gIHByaXZhdGUgZGlzcGF0Y2hlciA9IG5ldyBTdWJqZWN0PEV2ZW50PigpO1xuICBsb2FkaW5nJCA9IHRoaXMuZGlzcGF0Y2hlci5hc09ic2VydmFibGUoKTtcblxuICBkaXNwYXRjaChldmVudDogRXZlbnQpIHtcbiAgICB0aGlzLmRpc3BhdGNoZXIubmV4dChldmVudCk7XG4gIH1cblxuICBsb2FkZXJzRm9yKG5hbWU/OiBzdHJpbmcpIHtcbiAgICBjb25zdCBmaWx0ZXJTdG9yZSA9IGZpbHRlcigoeyBzdG9yZU5hbWUgfTogRXZlbnQpID0+IChuYW1lID8gc3RvcmVOYW1lID09PSBuYW1lIDogdHJ1ZSkpO1xuICAgIGNvbnN0IGZpbHRlck1ldGhvZCA9IG10aGQgPT5cbiAgICAgIGZpbHRlcigoeyBtZXRob2QgfTogRXZlbnQpID0+IHtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24obXRoZCkgPyBtdGhkKG1ldGhvZCkgOiBtZXRob2QgPT09IG10aGQ7XG4gICAgICB9KTtcblxuICAgIGNvbnN0IGFjdGlvbkJhc2VkID0gKGN1cnJlbnQ6ICgobWV0aG9kKSA9PiBib29sZWFuKSB8IEh0dHBNZXRob2QpID0+XG4gICAgICB0aGlzLmxvYWRpbmckLnBpcGUoXG4gICAgICAgIGZpbHRlclN0b3JlLFxuICAgICAgICBmaWx0ZXJNZXRob2QoY3VycmVudCksXG4gICAgICAgIG1hcChhY3Rpb24gPT4gYWN0aW9uLmxvYWRpbmcpXG4gICAgICApO1xuXG4gICAgY29uc3QgaWRCYXNlZCA9IChpZDogYW55LCBtdGhkOiAoKG1ldGhvZCkgPT4gYm9vbGVhbikgfCBIdHRwTWV0aG9kKSA9PlxuICAgICAgdGhpcy5sb2FkaW5nJC5waXBlKFxuICAgICAgICBmaWx0ZXJTdG9yZSxcbiAgICAgICAgZmlsdGVyTWV0aG9kKG10aGQpLFxuICAgICAgICBmaWx0ZXIoYWN0aW9uID0+IGFjdGlvbi5lbnRpdHlJZCA9PT0gaWQpLFxuICAgICAgICBtYXAoYWN0aW9uID0+IGFjdGlvbi5sb2FkaW5nKVxuICAgICAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICBnZXQkOiBhY3Rpb25CYXNlZChIdHRwTWV0aG9kLkdFVCksXG4gICAgICBhZGQkOiBhY3Rpb25CYXNlZChIdHRwTWV0aG9kLlBPU1QpLFxuICAgICAgdXBkYXRlJDogYWN0aW9uQmFzZWQobWV0aG9kID0+IG1ldGhvZCA9PT0gSHR0cE1ldGhvZC5QVVQgfHwgbWV0aG9kID09PSBIdHRwTWV0aG9kLlBBVENIKSxcbiAgICAgIGRlbGV0ZSQ6IGFjdGlvbkJhc2VkKEh0dHBNZXRob2QuREVMRVRFKSxcbiAgICAgIGdldEVudGl0eTogKGlkOiBhbnkpID0+IGlkQmFzZWQoaWQsIEh0dHBNZXRob2QuR0VUKSxcbiAgICAgIHVwZGF0ZUVudGl0eTogKGlkOiBhbnkpID0+IGlkQmFzZWQoaWQsIG1ldGhvZCA9PiBtZXRob2QgPT09IEh0dHBNZXRob2QuUFVUIHx8IG1ldGhvZCA9PT0gSHR0cE1ldGhvZC5QQVRDSCksXG4gICAgICBkZWxldGVFbnRpdHk6IChpZDogYW55KSA9PiBpZEJhc2VkKGlkLCBIdHRwTWV0aG9kLkRFTEVURSlcbiAgICB9O1xuICB9XG59XG4iXX0=