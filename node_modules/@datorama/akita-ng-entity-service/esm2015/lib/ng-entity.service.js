/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EntityService, isDefined } from '@datorama/akita';
import { throwError } from 'rxjs';
import { inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { catchError, finalize, map, tap } from 'rxjs/operators';
import { HttpMethod, NgEntityServiceNotifier } from './ng-entity-service-notifier';
import { NgEntityServiceLoader } from './ng-entity-service.loader';
import { defaultConfig, mergeDeep, NG_ENTITY_SERVICE_CONFIG } from './ng-entity-service.config';
import { isID } from './helpers';
import { errorAction, successAction } from './action-factory';
/** @type {?} */
export const mapResponse = (/**
 * @param {?} config
 * @return {?}
 */
(config) => map((/**
 * @param {?} res
 * @return {?}
 */
res => ((config || {}).mapResponseFn ? config.mapResponseFn(res) : res))));
/**
 * @template S
 */
export class NgEntityService extends EntityService {
    /**
     * @param {?} store
     * @param {?=} config
     */
    constructor(store, config = {}) {
        super();
        this.store = store;
        this.config = config;
        this.globalConfig = {};
        this.http = inject(HttpClient);
        this.loader = inject(NgEntityServiceLoader);
        this.notifier = inject(NgEntityServiceNotifier);
        this.globalConfig = inject(NG_ENTITY_SERVICE_CONFIG);
        this.mergedConfig = mergeDeep(defaultConfig, this.globalConfig, config);
        this.dispatchSuccess = successAction(this.store.storeName, this.notifier);
        this.dispatchError = errorAction(this.store.storeName, this.notifier);
    }
    /**
     * @return {?}
     */
    get api() {
        return `${this.baseUrl || this.getConfigValue('baseUrl')}/${this.resourceName}`;
    }
    /**
     * @return {?}
     */
    get resourceName() {
        return this.getConfigValue('resourceName') || this.store.storeName;
    }
    /**
     * @param {?} api
     * @return {?}
     */
    setBaseUrl(api) {
        this.baseUrl = api;
    }
    /**
     * @return {?}
     */
    getHttp() {
        return this.http;
    }
    /**
     * @return {?}
     */
    getConfig() {
        return this.mergedConfig;
    }
    /**
     * @template T
     * @param {?=} idOrConfig
     * @param {?=} config
     * @return {?}
     */
    get(idOrConfig, config) {
        /** @type {?} */
        let url;
        /** @type {?} */
        const isSingle = isID(idOrConfig);
        /** @type {?} */
        const _config = (isSingle ? config : idOrConfig) || {};
        /** @type {?} */
        const method = this.getHttpMethod(HttpMethod.GET);
        if (_config.url) {
            url = _config.url;
        }
        else {
            url = isSingle ? `${this.api}/${idOrConfig}` : this.api;
        }
        this.loader.dispatch({
            method,
            loading: true,
            entityId: isSingle ? idOrConfig : null,
            storeName: this.store.storeName
        });
        return (/** @type {?} */ (this.http[method.toLowerCase()](url, _config).pipe(mapResponse(_config), tap((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (isSingle) {
                this.store.upsert((/** @type {?} */ (idOrConfig)), data);
            }
            else {
                if (_config.append) {
                    this.store.add(data);
                }
                else if (_config.upsert) {
                    this.store.upsertMany(data);
                }
                else {
                    this.store.set(data);
                }
            }
            this.dispatchSuccess({
                method,
                payload: data,
                successMsg: _config.successMsg
            });
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        error => this.handleError(method, error, _config.errorMsg))), finalize((/**
         * @return {?}
         */
        () => {
            this.loader.dispatch({
                method,
                loading: false,
                storeName: this.store.storeName
            });
        })))));
    }
    /**
     *
     * Add a new entity - Creates a POST request
     *
     * service.add(entity)
     * service.add(entity, config)
     *
     * @template T
     * @param {?} entity
     * @param {?=} config
     * @return {?}
     */
    add(entity, config) {
        /** @type {?} */
        const method = this.getHttpMethod(HttpMethod.POST);
        this.loader.dispatch({
            method,
            loading: true,
            storeName: this.store.storeName
        });
        return (/** @type {?} */ (this.http[method.toLowerCase()](this.resolveUrl(config), entity, config).pipe(mapResponse(config), tap((/**
         * @param {?} entity
         * @return {?}
         */
        (entity) => {
            this.store.add(entity, config);
            this.dispatchSuccess({
                method,
                payload: entity,
                successMsg: config && config.successMsg
            });
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        error => this.handleError(method, error, config && config.errorMsg))), finalize((/**
         * @return {?}
         */
        () => {
            this.loader.dispatch({
                method,
                loading: false,
                storeName: this.store.storeName
            });
        })))));
    }
    /**
     *
     * Update an entity - Creates a PUT/PATCH request
     *
     * service.update(id, entity)
     * service.update(id, entity, config)
     *
     * @template T
     * @param {?} id
     * @param {?} entity
     * @param {?=} config
     * @return {?}
     */
    update(id, entity, config) {
        /** @type {?} */
        const method = config && config.method ? config.method : this.getHttpMethod(HttpMethod.PUT);
        this.loader.dispatch({
            method,
            loading: true,
            entityId: id,
            storeName: this.store.storeName
        });
        return (/** @type {?} */ (this.http[method.toLocaleLowerCase()](this.resolveUrl(config, id), entity, config).pipe(mapResponse(config), tap((/**
         * @param {?} entity
         * @return {?}
         */
        entity => {
            this.store.update(id, (/** @type {?} */ (entity)));
            this.dispatchSuccess({
                method,
                payload: entity,
                successMsg: config && config.successMsg
            });
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        error => this.handleError(method, error, config && config.errorMsg))), finalize((/**
         * @return {?}
         */
        () => {
            this.loader.dispatch({
                method,
                loading: false,
                entityId: id,
                storeName: this.store.storeName
            });
        })))));
    }
    /**
     *
     * Delete an entity - Creates a DELETE request
     *
     * service.delete(id)
     * service.delete(id, config)
     *
     * @template T
     * @param {?} id
     * @param {?=} config
     * @return {?}
     */
    delete(id, config) {
        /** @type {?} */
        const method = this.getHttpMethod(HttpMethod.DELETE);
        this.loader.dispatch({
            method,
            loading: true,
            entityId: id,
            storeName: this.store.storeName
        });
        return (/** @type {?} */ (this.http[method.toLowerCase()](this.resolveUrl(config, id), config).pipe(mapResponse(config), tap((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.store.remove(id);
            this.dispatchSuccess({
                method,
                payload: res,
                successMsg: config && config.successMsg
            });
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        error => this.handleError(method, error, config && config.errorMsg))), finalize((/**
         * @return {?}
         */
        () => {
            this.loader.dispatch({
                method,
                loading: false,
                entityId: id,
                storeName: this.store.storeName
            });
        })))));
    }
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    getHttpMethod(type) {
        return this.mergedConfig.httpMethods[type];
    }
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    getConfigValue(key) {
        return this.constructor[key] || this.mergedConfig[key];
    }
    /**
     * @private
     * @param {?} config
     * @param {?=} id
     * @return {?}
     */
    resolveUrl(config, id) {
        /** @type {?} */
        const customUrl = (config || {}).url;
        if (isDefined(id)) {
            return customUrl || `${this.api}/${id}`;
        }
        return customUrl || this.api;
    }
    /**
     * @private
     * @param {?} method
     * @param {?} error
     * @param {?} errorMsg
     * @return {?}
     */
    handleError(method, error, errorMsg) {
        this.dispatchError({
            method,
            errorMsg,
            payload: error
        });
        return throwError(error);
    }
}
if (false) {
    /** @type {?} */
    NgEntityService.prototype.baseUrl;
    /** @type {?} */
    NgEntityService.prototype.loader;
    /**
     * @type {?}
     * @private
     */
    NgEntityService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    NgEntityService.prototype.notifier;
    /**
     * @type {?}
     * @private
     */
    NgEntityService.prototype.globalConfig;
    /**
     * @type {?}
     * @private
     */
    NgEntityService.prototype.mergedConfig;
    /**
     * @type {?}
     * @private
     */
    NgEntityService.prototype.dispatchSuccess;
    /**
     * @type {?}
     * @private
     */
    NgEntityService.prototype.dispatchError;
    /**
     * @type {?}
     * @protected
     */
    NgEntityService.prototype.store;
    /**
     * @type {?}
     * @private
     */
    NgEntityService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,