/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import * as i0 from "@angular/core";
/** @enum {string} */
const HttpMethod = {
    GET: 'GET',
    POST: 'POST',
    PUT: 'PUT',
    PATCH: 'PATCH',
    DELETE: 'DELETE',
};
export { HttpMethod };
/** @type {?} */
export const ofType = (/**
 * @param {?} type
 * @return {?}
 */
(type) => filter((/**
 * @param {?} action
 * @return {?}
 */
(action) => action.type === type)));
/** @type {?} */
export const filterMethod = (/**
 * @param {?} method
 * @return {?}
 */
(method) => filter((/**
 * @param {?} action
 * @return {?}
 */
(action) => action.method === method)));
/** @type {?} */
export const filterStore = (/**
 * @param {?} name
 * @return {?}
 */
(name) => filter((/**
 * @param {?} action
 * @return {?}
 */
(action) => action.storeName === name)));
export class NgEntityServiceNotifier {
    constructor() {
        this.dispatcher = new Subject();
        this.action$ = this.dispatcher.asObservable();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dispatch(event) {
        this.dispatcher.next(event);
    }
}
NgEntityServiceNotifier.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */ NgEntityServiceNotifier.ngInjectableDef = i0.defineInjectable({ factory: function NgEntityServiceNotifier_Factory() { return new NgEntityServiceNotifier(); }, token: NgEntityServiceNotifier, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgEntityServiceNotifier.prototype.dispatcher;
    /** @type {?} */
    NgEntityServiceNotifier.prototype.action$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZW50aXR5LXNlcnZpY2Utbm90aWZpZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGF0b3JhbWEvYWtpdGEtbmctZW50aXR5LXNlcnZpY2UvIiwic291cmNlcyI6WyJsaWIvbmctZW50aXR5LXNlcnZpY2Utbm90aWZpZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7SUFJdEMsS0FBTSxLQUFLO0lBQ1gsTUFBTyxNQUFNO0lBQ2IsS0FBTSxLQUFLO0lBQ1gsT0FBUSxPQUFPO0lBQ2YsUUFBUyxRQUFROzs7O0FBWW5CLE1BQU0sT0FBTyxNQUFNOzs7O0FBQUcsQ0FBQyxJQUFnQixFQUFFLEVBQUUsQ0FBQyxNQUFNOzs7O0FBQUMsQ0FBQyxNQUEyQixFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLElBQUksRUFBQyxDQUFBOztBQUV6RyxNQUFNLE9BQU8sWUFBWTs7OztBQUFHLENBQUMsTUFBOEMsRUFBRSxFQUFFLENBQzdFLE1BQU07Ozs7QUFBQyxDQUFDLE1BQTJCLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEtBQUssTUFBTSxFQUFDLENBQUE7O0FBRW5FLE1BQU0sT0FBTyxXQUFXOzs7O0FBQUcsQ0FBQyxJQUFZLEVBQUUsRUFBRSxDQUFDLE1BQU07Ozs7QUFBQyxDQUFDLE1BQTJCLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEtBQUssSUFBSSxFQUFDLENBQUE7QUFHL0csTUFBTSxPQUFPLHVCQUF1QjtJQURwQztRQUVVLGVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBdUIsQ0FBQztRQUN4RCxZQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztLQUsxQzs7Ozs7SUFIQyxRQUFRLENBQUMsS0FBMEI7UUFDakMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7O1lBUEYsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7Ozs7Ozs7SUFFaEMsNkNBQXdEOztJQUN4RCwwQ0FBeUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBNc2cgfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGVudW0gSHR0cE1ldGhvZCB7XG4gIEdFVCA9ICdHRVQnLFxuICBQT1NUID0gJ1BPU1QnLFxuICBQVVQgPSAnUFVUJyxcbiAgUEFUQ0ggPSAnUEFUQ0gnLFxuICBERUxFVEUgPSAnREVMRVRFJ1xufVxuXG5leHBvcnQgdHlwZSBBY3Rpb25UeXBlID0gJ3N1Y2Nlc3MnIHwgJ2Vycm9yJztcblxuZXhwb3J0IHR5cGUgRW50aXR5U2VydmljZUFjdGlvbiA9IHtcbiAgc3RvcmVOYW1lOiBzdHJpbmc7XG4gIHR5cGU6IEFjdGlvblR5cGU7XG4gIHBheWxvYWQ6IGFueTtcbiAgbWV0aG9kOiBIdHRwTWV0aG9kO1xufSAmIE1zZztcblxuZXhwb3J0IGNvbnN0IG9mVHlwZSA9ICh0eXBlOiBBY3Rpb25UeXBlKSA9PiBmaWx0ZXIoKGFjdGlvbjogRW50aXR5U2VydmljZUFjdGlvbikgPT4gYWN0aW9uLnR5cGUgPT09IHR5cGUpO1xuXG5leHBvcnQgY29uc3QgZmlsdGVyTWV0aG9kID0gKG1ldGhvZDogSHR0cE1ldGhvZCB8IGtleW9mICh0eXBlb2YgSHR0cE1ldGhvZCkpID0+XG4gIGZpbHRlcigoYWN0aW9uOiBFbnRpdHlTZXJ2aWNlQWN0aW9uKSA9PiBhY3Rpb24ubWV0aG9kID09PSBtZXRob2QpO1xuXG5leHBvcnQgY29uc3QgZmlsdGVyU3RvcmUgPSAobmFtZTogc3RyaW5nKSA9PiBmaWx0ZXIoKGFjdGlvbjogRW50aXR5U2VydmljZUFjdGlvbikgPT4gYWN0aW9uLnN0b3JlTmFtZSA9PT0gbmFtZSk7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgTmdFbnRpdHlTZXJ2aWNlTm90aWZpZXIge1xuICBwcml2YXRlIGRpc3BhdGNoZXIgPSBuZXcgU3ViamVjdDxFbnRpdHlTZXJ2aWNlQWN0aW9uPigpO1xuICBhY3Rpb24kID0gdGhpcy5kaXNwYXRjaGVyLmFzT2JzZXJ2YWJsZSgpO1xuXG4gIGRpc3BhdGNoKGV2ZW50OiBFbnRpdHlTZXJ2aWNlQWN0aW9uKSB7XG4gICAgdGhpcy5kaXNwYXRjaGVyLm5leHQoZXZlbnQpO1xuICB9XG59XG4iXX0=