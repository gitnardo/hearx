{"version":3,"file":"datorama-akita-ng-entity-service.umd.js","sources":["ng://@datorama/akita-ng-entity-service/lib/ng-entity-service-notifier.ts","ng://@datorama/akita-ng-entity-service/lib/ng-entity-service.loader.ts","ng://@datorama/akita-ng-entity-service/lib/ng-entity-service.config.ts","ng://@datorama/akita-ng-entity-service/lib/helpers.ts","ng://@datorama/akita-ng-entity-service/lib/action-factory.ts","ng://@datorama/akita-ng-entity-service/lib/ng-entity.service.ts","ng://@datorama/akita-ng-entity-service/lib/types.ts"],"sourcesContent":["import { Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Msg } from './types';\n\nexport enum HttpMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  PATCH = 'PATCH',\n  DELETE = 'DELETE'\n}\n\nexport type ActionType = 'success' | 'error';\n\nexport type EntityServiceAction = {\n  storeName: string;\n  type: ActionType;\n  payload: any;\n  method: HttpMethod;\n} & Msg;\n\nexport const ofType = (type: ActionType) => filter((action: EntityServiceAction) => action.type === type);\n\nexport const filterMethod = (method: HttpMethod | keyof (typeof HttpMethod)) =>\n  filter((action: EntityServiceAction) => action.method === method);\n\nexport const filterStore = (name: string) => filter((action: EntityServiceAction) => action.storeName === name);\n\n@Injectable({ providedIn: 'root' })\nexport class NgEntityServiceNotifier {\n  private dispatcher = new Subject<EntityServiceAction>();\n  action$ = this.dispatcher.asObservable();\n\n  dispatch(event: EntityServiceAction) {\n    this.dispatcher.next(event);\n  }\n}\n","import { Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { filter, map } from 'rxjs/operators';\nimport { isFunction } from '@datorama/akita';\nimport { HttpMethod } from './ng-entity-service-notifier';\n\ntype Event = { method: HttpMethod; loading: boolean; storeName: string; entityId?: any };\n\n@Injectable({ providedIn: 'root' })\nexport class NgEntityServiceLoader {\n  private dispatcher = new Subject<Event>();\n  loading$ = this.dispatcher.asObservable();\n\n  dispatch(event: Event) {\n    this.dispatcher.next(event);\n  }\n\n  loadersFor(name?: string) {\n    const filterStore = filter(({ storeName }: Event) => (name ? storeName === name : true));\n    const filterMethod = mthd =>\n      filter(({ method }: Event) => {\n        return isFunction(mthd) ? mthd(method) : method === mthd;\n      });\n\n    const actionBased = (current: ((method) => boolean) | HttpMethod) =>\n      this.loading$.pipe(\n        filterStore,\n        filterMethod(current),\n        map(action => action.loading)\n      );\n\n    const idBased = (id: any, mthd: ((method) => boolean) | HttpMethod) =>\n      this.loading$.pipe(\n        filterStore,\n        filterMethod(mthd),\n        filter(action => action.entityId === id),\n        map(action => action.loading)\n      );\n\n    return {\n      get$: actionBased(HttpMethod.GET),\n      add$: actionBased(HttpMethod.POST),\n      update$: actionBased(method => method === HttpMethod.PUT || method === HttpMethod.PATCH),\n      delete$: actionBased(HttpMethod.DELETE),\n      getEntity: (id: any) => idBased(id, HttpMethod.GET),\n      updateEntity: (id: any) => idBased(id, method => method === HttpMethod.PUT || method === HttpMethod.PATCH),\n      deleteEntity: (id: any) => idBased(id, HttpMethod.DELETE)\n    };\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { NgEntityServiceParams } from './types';\nimport { HttpMethod } from './ng-entity-service-notifier';\nimport { isObject } from '@datorama/akita';\n\nexport interface NgEntityServiceGlobalConfig {\n  baseUrl?: string;\n  httpMethods?: Partial<{\n    GET: HttpMethod;\n    POST: HttpMethod;\n    PATCH: HttpMethod;\n    PUT: HttpMethod;\n    DELETE: HttpMethod;\n  }>;\n}\n\nexport const NG_ENTITY_SERVICE_CONFIG = new InjectionToken<NgEntityServiceGlobalConfig>('NgEntityServiceGlobalConfig');\n\nexport const defaultConfig: NgEntityServiceGlobalConfig = {\n  httpMethods: {\n    GET: HttpMethod.GET,\n    POST: HttpMethod.POST,\n    PATCH: HttpMethod.PATCH,\n    PUT: HttpMethod.PUT,\n    DELETE: HttpMethod.DELETE\n  }\n};\n\nexport function mergeDeep(target, ...sources) {\n  if (!sources.length) return target;\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, { [key]: {} });\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources);\n}\n\nexport function NgEntityServiceConfig(config: NgEntityServiceParams = {}) {\n  return function(constructor) {\n    if (config.baseUrl) {\n      constructor['baseUrl'] = config.baseUrl;\n    }\n\n    if (config.resourceName) {\n      constructor['resourceName'] = config.resourceName;\n    }\n  };\n}\n","import { isNumber, isString } from '@datorama/akita';\n\nexport function isID(idOrConfig: any) {\n  return isNumber(idOrConfig) || isString(idOrConfig);\n}\n","import { EntityServiceAction, NgEntityServiceNotifier } from './ng-entity-service-notifier';\n\nexport function successAction(\n  storeName: string,\n  notifier: NgEntityServiceNotifier\n): (params: Partial<EntityServiceAction>) => void {\n  return function({ payload, method, successMsg }) {\n    notifier.dispatch({\n      type: 'success',\n      storeName,\n      payload,\n      method,\n      successMsg\n    });\n  };\n}\n\nexport function errorAction(\n  storeName: string,\n  notifier: NgEntityServiceNotifier\n): (params: Partial<EntityServiceAction>) => void {\n  return function({ payload, method, errorMsg }) {\n    notifier.dispatch({\n      type: 'error',\n      storeName,\n      payload,\n      method,\n      errorMsg\n    });\n  };\n}\n","import {\n  AddEntitiesOptions,\n  EntityService,\n  EntityState,\n  EntityStore,\n  getEntityType,\n  getIDType,\n  isDefined\n} from '@datorama/akita';\nimport { Observable, throwError } from 'rxjs';\nimport { inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, finalize, map, tap } from 'rxjs/operators';\nimport { HttpConfig, Msg, NgEntityServiceParams } from './types';\nimport { EntityServiceAction, HttpMethod, NgEntityServiceNotifier } from './ng-entity-service-notifier';\nimport { NgEntityServiceLoader } from './ng-entity-service.loader';\nimport {\n  defaultConfig,\n  mergeDeep,\n  NG_ENTITY_SERVICE_CONFIG,\n  NgEntityServiceGlobalConfig\n} from './ng-entity-service.config';\nimport { isID } from './helpers';\nimport { errorAction, successAction } from './action-factory';\n\nexport const mapResponse = (config: HttpConfig) =>\n  map(res => ((config || {}).mapResponseFn ? config.mapResponseFn(res) : res));\n\nexport class NgEntityService<S extends EntityState = any> extends EntityService<S> {\n  baseUrl: string;\n  loader: NgEntityServiceLoader;\n\n  private http: HttpClient;\n  private notifier: NgEntityServiceNotifier;\n  private globalConfig: NgEntityServiceGlobalConfig = {};\n  private mergedConfig: NgEntityServiceParams & NgEntityServiceGlobalConfig;\n\n  private dispatchSuccess: (action: Partial<EntityServiceAction>) => void;\n  private dispatchError: (action: Partial<EntityServiceAction>) => void;\n\n  constructor(protected store: EntityStore<S>, private config: NgEntityServiceParams = {}) {\n    super();\n    this.http = inject(HttpClient);\n    this.loader = inject(NgEntityServiceLoader);\n    this.notifier = inject(NgEntityServiceNotifier);\n    this.globalConfig = inject(NG_ENTITY_SERVICE_CONFIG);\n\n    this.mergedConfig = mergeDeep(defaultConfig, this.globalConfig, config);\n\n    this.dispatchSuccess = successAction(this.store.storeName, this.notifier);\n    this.dispatchError = errorAction(this.store.storeName, this.notifier);\n  }\n\n  get api() {\n    return `${this.baseUrl || this.getConfigValue('baseUrl')}/${this.resourceName}`;\n  }\n\n  get resourceName() {\n    return this.getConfigValue('resourceName') || this.store.storeName;\n  }\n\n  setBaseUrl(api: string) {\n    this.baseUrl = api;\n  }\n\n  getHttp() {\n    return this.http;\n  }\n\n  getConfig() {\n    return this.mergedConfig;\n  }\n\n  /**\n   *\n   * Get all or one entity - Creates a GET request\n   *\n   * service.get().subscribe()\n   * service.get({ headers, params, url })\n   *\n   * service.get(id)\n   * service.get(id, { headers, params, url })\n   *\n   */\n  get<T>(id?: getIDType<S>, config?: HttpConfig & { append?: boolean } & Msg): Observable<T>;\n  get<T>(config?: HttpConfig & { append?: boolean } & Msg): Observable<T>;\n  get<T>(\n    idOrConfig?: getIDType<S> | HttpConfig,\n    config?: HttpConfig & { append?: boolean; upsert?: boolean } & Msg\n  ): Observable<T> {\n    let url: string;\n    const isSingle = isID(idOrConfig);\n    const _config: HttpConfig & { append?: boolean; upsert?: boolean } & Msg = (isSingle ? config : idOrConfig) || {};\n    const method = this.getHttpMethod(HttpMethod.GET);\n\n    if (_config.url) {\n      url = _config.url;\n    } else {\n      url = isSingle ? `${this.api}/${idOrConfig}` : this.api;\n    }\n\n    this.loader.dispatch({\n      method,\n      loading: true,\n      entityId: isSingle ? idOrConfig : null,\n      storeName: this.store.storeName\n    });\n\n    return this.http[method.toLowerCase()](url, _config).pipe(\n      mapResponse(_config),\n      tap((data: any) => {\n        if (isSingle) {\n          this.store.upsert(idOrConfig as getIDType<S>, data);\n        } else {\n          if (_config.append) {\n            this.store.add(data);\n          } else if (_config.upsert) {\n            this.store.upsertMany(data);\n          } else {\n            this.store.set(data);\n          }\n        }\n\n        this.dispatchSuccess({\n          method,\n          payload: data,\n          successMsg: _config.successMsg\n        });\n      }),\n      catchError(error => this.handleError(method, error, _config.errorMsg)),\n      finalize(() => {\n        this.loader.dispatch({\n          method,\n          loading: false,\n          storeName: this.store.storeName\n        });\n      })\n    ) as Observable<T>;\n  }\n\n  /**\n   *\n   * Add a new entity - Creates a POST request\n   *\n   * service.add(entity)\n   * service.add(entity, config)\n   *\n   */\n  add<T>(entity: getEntityType<S>, config?: HttpConfig & Pick<AddEntitiesOptions, 'prepend'> & Msg): Observable<T> {\n    const method = this.getHttpMethod(HttpMethod.POST);\n\n    this.loader.dispatch({\n      method,\n      loading: true,\n      storeName: this.store.storeName\n    });\n    return this.http[method.toLowerCase()](this.resolveUrl(config), entity, config).pipe(\n      mapResponse(config),\n      tap((entity: any) => {\n        this.store.add(entity, config);\n        this.dispatchSuccess({\n          method,\n          payload: entity,\n          successMsg: config && config.successMsg\n        });\n      }),\n      catchError(error => this.handleError(method, error, config && config.errorMsg)),\n      finalize(() => {\n        this.loader.dispatch({\n          method,\n          loading: false,\n          storeName: this.store.storeName\n        });\n      })\n    ) as Observable<T>;\n  }\n\n  /**\n   *\n   * Update an entity - Creates a PUT/PATCH request\n   *\n   * service.update(id, entity)\n   * service.update(id, entity, config)\n   *\n   */\n  update<T>(\n    id: getIDType<S>,\n    entity: Partial<getEntityType<S>>,\n    config?: HttpConfig & { method: HttpMethod.PUT | HttpMethod.PATCH } & Msg\n  ): Observable<T> {\n    const method = config && config.method ? config.method : this.getHttpMethod(HttpMethod.PUT);\n\n    this.loader.dispatch({\n      method,\n      loading: true,\n      entityId: id,\n      storeName: this.store.storeName\n    });\n\n    return this.http[method.toLocaleLowerCase()](this.resolveUrl(config, id), entity, config).pipe(\n      mapResponse(config),\n      tap(entity => {\n        this.store.update(id, entity as any);\n        this.dispatchSuccess({\n          method,\n          payload: entity,\n          successMsg: config && config.successMsg\n        });\n      }),\n      catchError(error => this.handleError(method, error, config && config.errorMsg)),\n      finalize(() => {\n        this.loader.dispatch({\n          method,\n          loading: false,\n          entityId: id,\n          storeName: this.store.storeName\n        });\n      })\n    ) as Observable<T>;\n  }\n\n  /**\n   *\n   * Delete an entity - Creates a DELETE request\n   *\n   * service.delete(id)\n   * service.delete(id, config)\n   *\n   */\n  delete<T>(id: getIDType<S>, config?: HttpConfig & Msg): Observable<T> {\n    const method = this.getHttpMethod(HttpMethod.DELETE);\n\n    this.loader.dispatch({\n      method,\n      loading: true,\n      entityId: id,\n      storeName: this.store.storeName\n    });\n\n    return this.http[method.toLowerCase()](this.resolveUrl(config, id), config).pipe(\n      mapResponse(config),\n      tap(res => {\n        this.store.remove(id);\n        this.dispatchSuccess({\n          method,\n          payload: res,\n          successMsg: config && config.successMsg\n        });\n      }),\n      catchError(error => this.handleError(method, error, config && config.errorMsg)),\n      finalize(() => {\n        this.loader.dispatch({\n          method,\n          loading: false,\n          entityId: id,\n          storeName: this.store.storeName\n        });\n      })\n    ) as Observable<T>;\n  }\n\n  private getHttpMethod(type: HttpMethod) {\n    return this.mergedConfig.httpMethods[type];\n  }\n\n  private getConfigValue(key: string) {\n    return this.constructor[key] || this.mergedConfig[key];\n  }\n\n  private resolveUrl(config: HttpConfig, id?: any) {\n    const customUrl = (config || {}).url;\n    if (isDefined(id)) {\n      return customUrl || `${this.api}/${id}`;\n    }\n\n    return customUrl || this.api;\n  }\n\n  private handleError(method: HttpMethod, error: any, errorMsg: string) {\n    this.dispatchError({\n      method,\n      errorMsg,\n      payload: error\n    });\n\n    return throwError(error);\n  }\n}\n","import { HttpHeaders, HttpParams } from '@angular/common/http';\n\nexport interface NgEntityServiceParams {\n  baseUrl?: string;\n  resourceName?: string;\n}\n\ntype _HttpHeaders =\n  | HttpHeaders\n  | {\n      [header: string]: string | string[];\n    };\n\ntype _HttpParams =\n  | HttpParams\n  | {\n      [param: string]: string | string[];\n    };\n\nexport type Msg = {\n  successMsg?: string;\n  errorMsg?: string;\n};\n\nexport type HttpConfig<Entity = any> = {\n  params?: _HttpParams;\n  headers?: _HttpHeaders;\n  url?: string;\n  mapResponseFn?: (res: any) => Entity | Entity[];\n};\n"],"names":["filter","Subject","Injectable","isFunction","map","InjectionToken","isObject","isNumber","isString","inject","HttpClient","tap","catchError","finalize","isDefined","throwError","EntityService"],"mappings":"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"}