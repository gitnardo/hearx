/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { APP_INITIALIZER, NgModule, NgZone, InjectionToken, Inject, Injectable } from '@angular/core';
import { akitaDevtools } from '@datorama/akita';
/** @type {?} */
export var DEVTOOLS_OPTIONS = new InjectionToken('DevtoolsOptions');
var AkitaDevtools = /** @class */ (function () {
    function AkitaDevtools(ngZone, options) {
        this.ngZone = ngZone;
        this.options = options;
        akitaDevtools(this.ngZone, this.options);
    }
    AkitaDevtools.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AkitaDevtools.ctorParameters = function () { return [
        { type: NgZone },
        { type: undefined, decorators: [{ type: Inject, args: [DEVTOOLS_OPTIONS,] }] }
    ]; };
    return AkitaDevtools;
}());
export { AkitaDevtools };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AkitaDevtools.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    AkitaDevtools.prototype.options;
}
// auto initialize the devtools
/**
 * @return {?}
 */
export function d() { }
/**
 * @param {?} akitaDevtools
 * @return {?}
 */
export function init(akitaDevtools) {
    return d;
}
var AkitaNgDevtools = /** @class */ (function () {
    function AkitaNgDevtools() {
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    AkitaNgDevtools.forRoot = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        return {
            ngModule: AkitaNgDevtools,
            providers: [
                AkitaDevtools,
                {
                    provide: DEVTOOLS_OPTIONS,
                    useValue: options
                },
                {
                    provide: APP_INITIALIZER,
                    useFactory: init,
                    deps: [AkitaDevtools],
                    multi: true
                }
            ]
        };
    };
    AkitaNgDevtools.decorators = [
        { type: NgModule, args: [{},] }
    ];
    return AkitaNgDevtools;
}());
export { AkitaNgDevtools };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGF0b3JhbWEvYWtpdGEtbmdkZXZ0b29scy8iLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsZUFBZSxFQUVmLFFBQVEsRUFDUixNQUFNLEVBQ04sY0FBYyxFQUNkLE1BQU0sRUFDTixVQUFVLEVBQ1gsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGFBQWEsRUFBbUIsTUFBTSxpQkFBaUIsQ0FBQzs7QUFFakUsTUFBTSxLQUFPLGdCQUFnQixHQUFHLElBQUksY0FBYyxDQUNoRCxpQkFBaUIsQ0FDbEI7QUFFRDtJQUVFLHVCQUNVLE1BQWMsRUFDWSxPQUF3QjtRQURsRCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ1ksWUFBTyxHQUFQLE9BQU8sQ0FBaUI7UUFFMUQsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzNDLENBQUM7O2dCQVBGLFVBQVU7Ozs7Z0JBWFQsTUFBTTtnREFlSCxNQUFNLFNBQUMsZ0JBQWdCOztJQUk1QixvQkFBQztDQUFBLEFBUkQsSUFRQztTQVBZLGFBQWE7Ozs7OztJQUV0QiwrQkFBc0I7Ozs7O0lBQ3RCLGdDQUEwRDs7Ozs7O0FBTzlELE1BQU0sVUFBVSxDQUFDLEtBQUksQ0FBQzs7Ozs7QUFDdEIsTUFBTSxVQUFVLElBQUksQ0FBQyxhQUE0QjtJQUMvQyxPQUFPLENBQUMsQ0FBQztBQUNYLENBQUM7QUFFRDtJQUFBO0lBc0JBLENBQUM7Ozs7O0lBcEJlLHVCQUFPOzs7O0lBQXJCLFVBQ0UsT0FBa0M7UUFFbEMsT0FBTztZQUNMLFFBQVEsRUFBRSxlQUFlO1lBQ3pCLFNBQVMsRUFBRTtnQkFDVCxhQUFhO2dCQUNiO29CQUNFLE9BQU8sRUFBRSxnQkFBZ0I7b0JBQ3pCLFFBQVEsRUFBRSxPQUFPO2lCQUNsQjtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsZUFBZTtvQkFDeEIsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQztvQkFDckIsS0FBSyxFQUFFLElBQUk7aUJBQ1o7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDOztnQkFyQkYsUUFBUSxTQUFDLEVBQUU7O0lBc0JaLHNCQUFDO0NBQUEsQUF0QkQsSUFzQkM7U0FyQlksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFQUF9JTklUSUFMSVpFUixcbiAgTW9kdWxlV2l0aFByb3ZpZGVycyxcbiAgTmdNb2R1bGUsXG4gIE5nWm9uZSxcbiAgSW5qZWN0aW9uVG9rZW4sXG4gIEluamVjdCxcbiAgSW5qZWN0YWJsZVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGFraXRhRGV2dG9vbHMsIERldnRvb2xzT3B0aW9ucyB9IGZyb20gJ0BkYXRvcmFtYS9ha2l0YSc7XG5cbmV4cG9ydCBjb25zdCBERVZUT09MU19PUFRJT05TID0gbmV3IEluamVjdGlvblRva2VuPERldnRvb2xzT3B0aW9ucz4oXG4gICdEZXZ0b29sc09wdGlvbnMnXG4pO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQWtpdGFEZXZ0b29scyB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmUsXG4gICAgQEluamVjdChERVZUT09MU19PUFRJT05TKSBwcml2YXRlIG9wdGlvbnM6IERldnRvb2xzT3B0aW9uc1xuICApIHtcbiAgICBha2l0YURldnRvb2xzKHRoaXMubmdab25lLCB0aGlzLm9wdGlvbnMpO1xuICB9XG59XG5cbi8vIGF1dG8gaW5pdGlhbGl6ZSB0aGUgZGV2dG9vbHNcbmV4cG9ydCBmdW5jdGlvbiBkKCkge31cbmV4cG9ydCBmdW5jdGlvbiBpbml0KGFraXRhRGV2dG9vbHM6IEFraXRhRGV2dG9vbHMpIHtcbiAgcmV0dXJuIGQ7XG59XG5cbkBOZ01vZHVsZSh7fSlcbmV4cG9ydCBjbGFzcyBBa2l0YU5nRGV2dG9vbHMge1xuICBwdWJsaWMgc3RhdGljIGZvclJvb3QoXG4gICAgb3B0aW9ucz86IFBhcnRpYWw8RGV2dG9vbHNPcHRpb25zPlxuICApOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IEFraXRhTmdEZXZ0b29scyxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICBBa2l0YURldnRvb2xzLFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogREVWVE9PTFNfT1BUSU9OUyxcbiAgICAgICAgICB1c2VWYWx1ZTogb3B0aW9uc1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLFxuICAgICAgICAgIHVzZUZhY3Rvcnk6IGluaXQsXG4gICAgICAgICAgZGVwczogW0FraXRhRGV2dG9vbHNdLFxuICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXX0=