(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@datorama/akita'), require('@angular/router'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@datorama/akita-ng-router-store', ['exports', '@angular/core', '@datorama/akita', '@angular/router', 'rxjs', 'rxjs/operators'], factory) :
    (global = global || self, factory((global.datorama = global.datorama || {}, global.datorama['akita-ng-router-store'] = {}), global.ng.core, global.akita, global.ng.router, global.rxjs, global.rxjs.operators));
}(this, function (exports, core, akita, router, rxjs, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function createInitialRouterState() {
        return {
            state: null,
            navigationId: null
        };
    }
    var RouterStore = /** @class */ (function (_super) {
        __extends(RouterStore, _super);
        function RouterStore() {
            return _super.call(this, createInitialRouterState()) || this;
        }
        RouterStore.ngInjectableDef = core.defineInjectable({ factory: function RouterStore_Factory() { return new RouterStore(); }, token: RouterStore, providedIn: "root" });
        RouterStore = __decorate([
            core.Injectable({ providedIn: 'root' }),
            akita.StoreConfig({ name: 'router' }),
            __metadata("design:paramtypes", [])
        ], RouterStore);
        return RouterStore;
    }(akita.Store));

    function slice(section) {
        return function (source) {
            return source.pipe(operators.map(function (data) { return data.state; })).pipe(akita.filterNil, operators.map(function (state) { return state.root[section]; }));
        };
    }
    var RouterQuery = /** @class */ (function (_super) {
        __extends(RouterQuery, _super);
        function RouterQuery(store) {
            var _this = _super.call(this, store) || this;
            _this.store = store;
            return _this;
        }
        RouterQuery.prototype.selectParams = function (names) {
            var _this = this;
            if (names === undefined) {
                return this.select().pipe(slice('params'), operators.distinctUntilChanged());
            }
            var select = function (p) {
                return _this.select().pipe(slice('params'), operators.pluck(p), operators.distinctUntilChanged());
            };
            if (Array.isArray(names)) {
                var sources = names.map(select);
                return rxjs.combineLatest(sources);
            }
            return select(names).pipe(operators.distinctUntilChanged());
        };
        RouterQuery.prototype.getParams = function (name) {
            if (this.getValue().state) {
                var params = this.getValue().state.root.params;
                if (name === undefined) {
                    return params;
                }
                return params[name];
            }
            return null;
        };
        RouterQuery.prototype.selectQueryParams = function (names) {
            var _this = this;
            if (names === undefined) {
                return this.select().pipe(slice('queryParams'), operators.distinctUntilChanged());
            }
            var select = function (p) {
                return _this.select().pipe(slice('queryParams'), operators.pluck(p), operators.distinctUntilChanged());
            };
            if (Array.isArray(names)) {
                var sources = names.map(select);
                return rxjs.combineLatest(sources);
            }
            return select(names);
        };
        RouterQuery.prototype.getQueryParams = function (name) {
            if (this.getValue().state) {
                var params = this.getValue().state.root.queryParams;
                if (name === undefined) {
                    return params;
                }
                return params[name];
            }
            return null;
        };
        RouterQuery.prototype.selectFragment = function () {
            return this.select().pipe(slice('fragment'), operators.distinctUntilChanged());
        };
        RouterQuery.prototype.getFragment = function () {
            if (this.getValue().state) {
                return this.getValue().state.root.fragment;
            }
            return null;
        };
        RouterQuery.prototype.selectData = function (name) {
            if (name === undefined) {
                return this.select().pipe(slice('data'), operators.distinctUntilChanged());
            }
            return this.select().pipe(slice('data'), operators.pluck(name), operators.distinctUntilChanged());
        };
        RouterQuery.prototype.getData = function (name) {
            if (this.getValue().state) {
                var data = this.getValue().state.root.data;
                if (name === undefined) {
                    return data;
                }
                return data[name];
            }
            return null;
        };
        RouterQuery = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [RouterStore])
        ], RouterQuery);
        return RouterQuery;
    }(akita.Query));

    var RouterService = /** @class */ (function () {
        function RouterService(routerStore, routerQuery, router) {
            this.routerStore = routerStore;
            this.routerQuery = routerQuery;
            this.router = router;
            this.dispatchTriggeredByRouter = false;
            this.navigationTriggeredByDispatch = false;
        }
        RouterService.prototype.dispatchRouterCancel = function (event) {
            this.update();
        };
        RouterService.prototype.dispatchRouterError = function (event) {
            this.update();
        };
        RouterService.prototype.dispatchRouterNavigation = function () {
            this.update();
        };
        RouterService.prototype.init = function () {
            this.setUpRouterHook();
            this.setUpStoreListener();
            this.setUpStateRollbackEvents();
        };
        RouterService.prototype.update = function () {
            var _this = this;
            this.dispatchTriggeredByRouter = true;
            this.routerStore.update(function (state) {
                return __assign({}, state, { state: _this.routerStateSnapshot, navigationId: _this.lastRoutesRecognized ? _this.lastRoutesRecognized.id : null });
            });
            this.dispatchTriggeredByRouter = false;
            this.navigationTriggeredByDispatch = false;
        };
        /**
         * Hook into the angular router before each navigation action is performed
         * since the route tree can be large, we serialize it into something more manageable
         */
        RouterService.prototype.setUpRouterHook = function () {
            var _this = this;
            this.router.hooks.beforePreactivation = function (routerStateSnapshot) {
                _this.routerStateSnapshot = {
                    root: _this.serializeRoute(routerStateSnapshot.root),
                    url: routerStateSnapshot.url
                };
                if (_this.shouldDispatchRouterNavigation())
                    _this.dispatchRouterNavigation();
                return rxjs.of(true);
            };
        };
        RouterService.prototype.setUpStoreListener = function () {
            var _this = this;
            this.routerQuery
                .select(function (state) { return state; })
                .subscribe(function (s) {
                _this.routerState = s;
                _this.navigateIfNeeded();
            });
        };
        RouterService.prototype.shouldDispatchRouterNavigation = function () {
            if (!this.routerState)
                return true;
            return !this.navigationTriggeredByDispatch;
        };
        RouterService.prototype.navigateIfNeeded = function () {
            if (!this.routerState || !this.routerState.state) {
                return;
            }
            if (this.dispatchTriggeredByRouter)
                return;
            if (this.router.url !== this.routerState.state.url) {
                this.navigationTriggeredByDispatch = true;
                akita.setSkipAction();
                this.router.navigateByUrl(this.routerState.state.url);
            }
        };
        RouterService.prototype.setUpStateRollbackEvents = function () {
            var _this = this;
            this.router.events.subscribe(function (e) {
                if (e instanceof router.RoutesRecognized) {
                    _this.lastRoutesRecognized = e;
                }
                else if (e instanceof router.NavigationCancel) {
                    _this.dispatchRouterCancel(e);
                }
                else if (e instanceof router.NavigationError) {
                    _this.dispatchRouterError(e);
                }
            });
        };
        RouterService.prototype.serializeRoute = function (route) {
            var state = route.root;
            while (state.firstChild) {
                state = state.firstChild;
            }
            var params = state.params, data = state.data, paramMap = state.paramMap, queryParamMap = state.queryParamMap, queryParams = state.queryParams, fragment = state.fragment;
            return {
                url: route.url,
                params: params,
                queryParams: queryParams,
                fragment: fragment,
                data: data,
                paramMap: paramMap,
                queryParamMap: queryParamMap
            };
        };
        RouterService.ngInjectableDef = core.defineInjectable({ factory: function RouterService_Factory() { return new RouterService(core.inject(RouterStore), core.inject(RouterQuery), core.inject(router.Router)); }, token: RouterService, providedIn: "root" });
        __decorate([
            akita.action('Navigation Cancelled'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [router.NavigationCancel]),
            __metadata("design:returntype", void 0)
        ], RouterService.prototype, "dispatchRouterCancel", null);
        __decorate([
            akita.action('Navigation Error'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [router.NavigationError]),
            __metadata("design:returntype", void 0)
        ], RouterService.prototype, "dispatchRouterError", null);
        __decorate([
            akita.action('Navigation'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], RouterService.prototype, "dispatchRouterNavigation", null);
        RouterService = __decorate([
            core.Injectable({
                providedIn: 'root'
            }),
            __metadata("design:paramtypes", [RouterStore, RouterQuery, router.Router])
        ], RouterService);
        return RouterService;
    }());

    var AkitaNgRouterStoreModule = /** @class */ (function () {
        function AkitaNgRouterStoreModule(routerService) {
            this.routerService = routerService;
            this.routerService.init();
        }
        AkitaNgRouterStoreModule_1 = AkitaNgRouterStoreModule;
        AkitaNgRouterStoreModule.forRoot = function () {
            return {
                ngModule: AkitaNgRouterStoreModule_1,
                providers: [RouterStore, RouterService, RouterQuery]
            };
        };
        var AkitaNgRouterStoreModule_1;
        AkitaNgRouterStoreModule = AkitaNgRouterStoreModule_1 = __decorate([
            core.NgModule({}),
            __metadata("design:paramtypes", [RouterService])
        ], AkitaNgRouterStoreModule);
        return AkitaNgRouterStoreModule;
    }());

    exports.AkitaNgRouterStoreModule = AkitaNgRouterStoreModule;
    exports.RouterQuery = RouterQuery;
    exports.RouterService = RouterService;
    exports.RouterStore = RouterStore;
    exports.createInitialRouterState = createInitialRouterState;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=datorama-akita-ng-router-store.umd.js.map
