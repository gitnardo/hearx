import { NavigationCancel, NavigationError, Router } from '@angular/router';
import { RouterStore } from './router.store';
import { RouterQuery } from './router.query';
import * as ɵngcc0 from '@angular/core';
export declare class RouterService {
    private routerStore;
    private routerQuery;
    private router;
    private routerStateSnapshot;
    private lastRoutesRecognized;
    private dispatchTriggeredByRouter;
    private navigationTriggeredByDispatch;
    private routerState;
    constructor(routerStore: RouterStore, routerQuery: RouterQuery, router: Router);
    dispatchRouterCancel(event: NavigationCancel): void;
    dispatchRouterError(event: NavigationError): void;
    dispatchRouterNavigation(): void;
    init(): void;
    private update;
    /**
     * Hook into the angular router before each navigation action is performed
     * since the route tree can be large, we serialize it into something more manageable
     */
    private setUpRouterHook;
    private setUpStoreListener;
    private shouldDispatchRouterNavigation;
    private navigateIfNeeded;
    private setUpStateRollbackEvents;
    private serializeRoute;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RouterService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<RouterService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsicm91dGVyLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmF2aWdhdGlvbkNhbmNlbCwgTmF2aWdhdGlvbkVycm9yLCBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgUm91dGVyU3RvcmUgfSBmcm9tICcuL3JvdXRlci5zdG9yZSc7XG5pbXBvcnQgeyBSb3V0ZXJRdWVyeSB9IGZyb20gJy4vcm91dGVyLnF1ZXJ5JztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFJvdXRlclNlcnZpY2Uge1xuICAgIHByaXZhdGUgcm91dGVyU3RvcmU7XG4gICAgcHJpdmF0ZSByb3V0ZXJRdWVyeTtcbiAgICBwcml2YXRlIHJvdXRlcjtcbiAgICBwcml2YXRlIHJvdXRlclN0YXRlU25hcHNob3Q7XG4gICAgcHJpdmF0ZSBsYXN0Um91dGVzUmVjb2duaXplZDtcbiAgICBwcml2YXRlIGRpc3BhdGNoVHJpZ2dlcmVkQnlSb3V0ZXI7XG4gICAgcHJpdmF0ZSBuYXZpZ2F0aW9uVHJpZ2dlcmVkQnlEaXNwYXRjaDtcbiAgICBwcml2YXRlIHJvdXRlclN0YXRlO1xuICAgIGNvbnN0cnVjdG9yKHJvdXRlclN0b3JlOiBSb3V0ZXJTdG9yZSwgcm91dGVyUXVlcnk6IFJvdXRlclF1ZXJ5LCByb3V0ZXI6IFJvdXRlcik7XG4gICAgZGlzcGF0Y2hSb3V0ZXJDYW5jZWwoZXZlbnQ6IE5hdmlnYXRpb25DYW5jZWwpOiB2b2lkO1xuICAgIGRpc3BhdGNoUm91dGVyRXJyb3IoZXZlbnQ6IE5hdmlnYXRpb25FcnJvcik6IHZvaWQ7XG4gICAgZGlzcGF0Y2hSb3V0ZXJOYXZpZ2F0aW9uKCk6IHZvaWQ7XG4gICAgaW5pdCgpOiB2b2lkO1xuICAgIHByaXZhdGUgdXBkYXRlO1xuICAgIC8qKlxuICAgICAqIEhvb2sgaW50byB0aGUgYW5ndWxhciByb3V0ZXIgYmVmb3JlIGVhY2ggbmF2aWdhdGlvbiBhY3Rpb24gaXMgcGVyZm9ybWVkXG4gICAgICogc2luY2UgdGhlIHJvdXRlIHRyZWUgY2FuIGJlIGxhcmdlLCB3ZSBzZXJpYWxpemUgaXQgaW50byBzb21ldGhpbmcgbW9yZSBtYW5hZ2VhYmxlXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZXRVcFJvdXRlckhvb2s7XG4gICAgcHJpdmF0ZSBzZXRVcFN0b3JlTGlzdGVuZXI7XG4gICAgcHJpdmF0ZSBzaG91bGREaXNwYXRjaFJvdXRlck5hdmlnYXRpb247XG4gICAgcHJpdmF0ZSBuYXZpZ2F0ZUlmTmVlZGVkO1xuICAgIHByaXZhdGUgc2V0VXBTdGF0ZVJvbGxiYWNrRXZlbnRzO1xuICAgIHByaXZhdGUgc2VyaWFsaXplUm91dGU7XG59XG4iXX0=