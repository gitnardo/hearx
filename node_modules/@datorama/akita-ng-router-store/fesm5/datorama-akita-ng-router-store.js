import { __extends, __decorate, __metadata, __assign } from 'tslib';
import { defineInjectable, Injectable, inject, NgModule } from '@angular/core';
import { StoreConfig, Store, filterNil, Query, setSkipAction, action } from '@datorama/akita';
import { RoutesRecognized, NavigationCancel, NavigationError, Router } from '@angular/router';
import { combineLatest, of } from 'rxjs';
import { map, distinctUntilChanged, pluck } from 'rxjs/operators';

function createInitialRouterState() {
    return {
        state: null,
        navigationId: null
    };
}
var RouterStore = /** @class */ (function (_super) {
    __extends(RouterStore, _super);
    function RouterStore() {
        return _super.call(this, createInitialRouterState()) || this;
    }
    RouterStore.ngInjectableDef = defineInjectable({ factory: function RouterStore_Factory() { return new RouterStore(); }, token: RouterStore, providedIn: "root" });
    RouterStore = __decorate([
        Injectable({ providedIn: 'root' }),
        StoreConfig({ name: 'router' }),
        __metadata("design:paramtypes", [])
    ], RouterStore);
    return RouterStore;
}(Store));

function slice(section) {
    return function (source) {
        return source.pipe(map(function (data) { return data.state; })).pipe(filterNil, map(function (state) { return state.root[section]; }));
    };
}
var RouterQuery = /** @class */ (function (_super) {
    __extends(RouterQuery, _super);
    function RouterQuery(store) {
        var _this = _super.call(this, store) || this;
        _this.store = store;
        return _this;
    }
    RouterQuery.prototype.selectParams = function (names) {
        var _this = this;
        if (names === undefined) {
            return this.select().pipe(slice('params'), distinctUntilChanged());
        }
        var select = function (p) {
            return _this.select().pipe(slice('params'), pluck(p), distinctUntilChanged());
        };
        if (Array.isArray(names)) {
            var sources = names.map(select);
            return combineLatest(sources);
        }
        return select(names).pipe(distinctUntilChanged());
    };
    RouterQuery.prototype.getParams = function (name) {
        if (this.getValue().state) {
            var params = this.getValue().state.root.params;
            if (name === undefined) {
                return params;
            }
            return params[name];
        }
        return null;
    };
    RouterQuery.prototype.selectQueryParams = function (names) {
        var _this = this;
        if (names === undefined) {
            return this.select().pipe(slice('queryParams'), distinctUntilChanged());
        }
        var select = function (p) {
            return _this.select().pipe(slice('queryParams'), pluck(p), distinctUntilChanged());
        };
        if (Array.isArray(names)) {
            var sources = names.map(select);
            return combineLatest(sources);
        }
        return select(names);
    };
    RouterQuery.prototype.getQueryParams = function (name) {
        if (this.getValue().state) {
            var params = this.getValue().state.root.queryParams;
            if (name === undefined) {
                return params;
            }
            return params[name];
        }
        return null;
    };
    RouterQuery.prototype.selectFragment = function () {
        return this.select().pipe(slice('fragment'), distinctUntilChanged());
    };
    RouterQuery.prototype.getFragment = function () {
        if (this.getValue().state) {
            return this.getValue().state.root.fragment;
        }
        return null;
    };
    RouterQuery.prototype.selectData = function (name) {
        if (name === undefined) {
            return this.select().pipe(slice('data'), distinctUntilChanged());
        }
        return this.select().pipe(slice('data'), pluck(name), distinctUntilChanged());
    };
    RouterQuery.prototype.getData = function (name) {
        if (this.getValue().state) {
            var data = this.getValue().state.root.data;
            if (name === undefined) {
                return data;
            }
            return data[name];
        }
        return null;
    };
    RouterQuery = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [RouterStore])
    ], RouterQuery);
    return RouterQuery;
}(Query));

var RouterService = /** @class */ (function () {
    function RouterService(routerStore, routerQuery, router) {
        this.routerStore = routerStore;
        this.routerQuery = routerQuery;
        this.router = router;
        this.dispatchTriggeredByRouter = false;
        this.navigationTriggeredByDispatch = false;
    }
    RouterService.prototype.dispatchRouterCancel = function (event) {
        this.update();
    };
    RouterService.prototype.dispatchRouterError = function (event) {
        this.update();
    };
    RouterService.prototype.dispatchRouterNavigation = function () {
        this.update();
    };
    RouterService.prototype.init = function () {
        this.setUpRouterHook();
        this.setUpStoreListener();
        this.setUpStateRollbackEvents();
    };
    RouterService.prototype.update = function () {
        var _this = this;
        this.dispatchTriggeredByRouter = true;
        this.routerStore.update(function (state) {
            return __assign({}, state, { state: _this.routerStateSnapshot, navigationId: _this.lastRoutesRecognized ? _this.lastRoutesRecognized.id : null });
        });
        this.dispatchTriggeredByRouter = false;
        this.navigationTriggeredByDispatch = false;
    };
    /**
     * Hook into the angular router before each navigation action is performed
     * since the route tree can be large, we serialize it into something more manageable
     */
    RouterService.prototype.setUpRouterHook = function () {
        var _this = this;
        this.router.hooks.beforePreactivation = function (routerStateSnapshot) {
            _this.routerStateSnapshot = {
                root: _this.serializeRoute(routerStateSnapshot.root),
                url: routerStateSnapshot.url
            };
            if (_this.shouldDispatchRouterNavigation())
                _this.dispatchRouterNavigation();
            return of(true);
        };
    };
    RouterService.prototype.setUpStoreListener = function () {
        var _this = this;
        this.routerQuery
            .select(function (state) { return state; })
            .subscribe(function (s) {
            _this.routerState = s;
            _this.navigateIfNeeded();
        });
    };
    RouterService.prototype.shouldDispatchRouterNavigation = function () {
        if (!this.routerState)
            return true;
        return !this.navigationTriggeredByDispatch;
    };
    RouterService.prototype.navigateIfNeeded = function () {
        if (!this.routerState || !this.routerState.state) {
            return;
        }
        if (this.dispatchTriggeredByRouter)
            return;
        if (this.router.url !== this.routerState.state.url) {
            this.navigationTriggeredByDispatch = true;
            setSkipAction();
            this.router.navigateByUrl(this.routerState.state.url);
        }
    };
    RouterService.prototype.setUpStateRollbackEvents = function () {
        var _this = this;
        this.router.events.subscribe(function (e) {
            if (e instanceof RoutesRecognized) {
                _this.lastRoutesRecognized = e;
            }
            else if (e instanceof NavigationCancel) {
                _this.dispatchRouterCancel(e);
            }
            else if (e instanceof NavigationError) {
                _this.dispatchRouterError(e);
            }
        });
    };
    RouterService.prototype.serializeRoute = function (route) {
        var state = route.root;
        while (state.firstChild) {
            state = state.firstChild;
        }
        var params = state.params, data = state.data, paramMap = state.paramMap, queryParamMap = state.queryParamMap, queryParams = state.queryParams, fragment = state.fragment;
        return {
            url: route.url,
            params: params,
            queryParams: queryParams,
            fragment: fragment,
            data: data,
            paramMap: paramMap,
            queryParamMap: queryParamMap
        };
    };
    RouterService.ngInjectableDef = defineInjectable({ factory: function RouterService_Factory() { return new RouterService(inject(RouterStore), inject(RouterQuery), inject(Router)); }, token: RouterService, providedIn: "root" });
    __decorate([
        action('Navigation Cancelled'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [NavigationCancel]),
        __metadata("design:returntype", void 0)
    ], RouterService.prototype, "dispatchRouterCancel", null);
    __decorate([
        action('Navigation Error'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [NavigationError]),
        __metadata("design:returntype", void 0)
    ], RouterService.prototype, "dispatchRouterError", null);
    __decorate([
        action('Navigation'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], RouterService.prototype, "dispatchRouterNavigation", null);
    RouterService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [RouterStore, RouterQuery, Router])
    ], RouterService);
    return RouterService;
}());

var AkitaNgRouterStoreModule = /** @class */ (function () {
    function AkitaNgRouterStoreModule(routerService) {
        this.routerService = routerService;
        this.routerService.init();
    }
    AkitaNgRouterStoreModule_1 = AkitaNgRouterStoreModule;
    AkitaNgRouterStoreModule.forRoot = function () {
        return {
            ngModule: AkitaNgRouterStoreModule_1,
            providers: [RouterStore, RouterService, RouterQuery]
        };
    };
    var AkitaNgRouterStoreModule_1;
    AkitaNgRouterStoreModule = AkitaNgRouterStoreModule_1 = __decorate([
        NgModule({}),
        __metadata("design:paramtypes", [RouterService])
    ], AkitaNgRouterStoreModule);
    return AkitaNgRouterStoreModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { AkitaNgRouterStoreModule, RouterQuery, RouterService, RouterStore, createInitialRouterState };
//# sourceMappingURL=datorama-akita-ng-router-store.js.map
