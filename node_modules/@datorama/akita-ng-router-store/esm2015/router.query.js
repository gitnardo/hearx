import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { RouterStore } from './router.store';
import { Query, filterNil } from '@datorama/akita';
import { combineLatest } from 'rxjs';
import { map, pluck, distinctUntilChanged } from 'rxjs/operators';
function slice(section) {
    return (source) => {
        return source.pipe(map(data => data.state)).pipe(filterNil, map(state => state.root[section]));
    };
}
let RouterQuery = class RouterQuery extends Query {
    constructor(store) {
        super(store);
        this.store = store;
    }
    selectParams(names) {
        if (names === undefined) {
            return this.select().pipe(slice('params'), distinctUntilChanged());
        }
        const select = (p) => this.select().pipe(slice('params'), pluck(p), distinctUntilChanged());
        if (Array.isArray(names)) {
            const sources = names.map(select);
            return combineLatest(sources);
        }
        return select(names).pipe(distinctUntilChanged());
    }
    getParams(name) {
        if (this.getValue().state) {
            const params = this.getValue().state.root.params;
            if (name === undefined) {
                return params;
            }
            return params[name];
        }
        return null;
    }
    selectQueryParams(names) {
        if (names === undefined) {
            return this.select().pipe(slice('queryParams'), distinctUntilChanged());
        }
        const select = (p) => this.select().pipe(slice('queryParams'), pluck(p), distinctUntilChanged());
        if (Array.isArray(names)) {
            const sources = names.map(select);
            return combineLatest(sources);
        }
        return select(names);
    }
    getQueryParams(name) {
        if (this.getValue().state) {
            const params = this.getValue().state.root.queryParams;
            if (name === undefined) {
                return params;
            }
            return params[name];
        }
        return null;
    }
    selectFragment() {
        return this.select().pipe(slice('fragment'), distinctUntilChanged());
    }
    getFragment() {
        if (this.getValue().state) {
            return this.getValue().state.root.fragment;
        }
        return null;
    }
    selectData(name) {
        if (name === undefined) {
            return this.select().pipe(slice('data'), distinctUntilChanged());
        }
        return this.select().pipe(slice('data'), pluck(name), distinctUntilChanged());
    }
    getData(name) {
        if (this.getValue().state) {
            const data = this.getValue().state.root.data;
            if (name === undefined) {
                return data;
            }
            return data[name];
        }
        return null;
    }
};
RouterQuery = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [RouterStore])
], RouterQuery);
export { RouterQuery };
//# sourceMappingURL=data:application/json;base64,