import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { NavigationCancel, NavigationError, Router, RoutesRecognized } from '@angular/router';
import { of } from 'rxjs';
import { RouterStore } from './router.store';
import { RouterQuery } from './router.query';
import { action, setSkipAction } from '@datorama/akita';
import * as i0 from "@angular/core";
import * as i1 from "./router.store";
import * as i2 from "./router.query";
import * as i3 from "@angular/router";
let RouterService = class RouterService {
    constructor(routerStore, routerQuery, router) {
        this.routerStore = routerStore;
        this.routerQuery = routerQuery;
        this.router = router;
        this.dispatchTriggeredByRouter = false;
        this.navigationTriggeredByDispatch = false;
    }
    dispatchRouterCancel(event) {
        this.update();
    }
    dispatchRouterError(event) {
        this.update();
    }
    dispatchRouterNavigation() {
        this.update();
    }
    init() {
        this.setUpRouterHook();
        this.setUpStoreListener();
        this.setUpStateRollbackEvents();
    }
    update() {
        this.dispatchTriggeredByRouter = true;
        this.routerStore.update((state) => {
            return Object.assign({}, state, { state: this.routerStateSnapshot, navigationId: this.lastRoutesRecognized ? this.lastRoutesRecognized.id : null });
        });
        this.dispatchTriggeredByRouter = false;
        this.navigationTriggeredByDispatch = false;
    }
    /**
     * Hook into the angular router before each navigation action is performed
     * since the route tree can be large, we serialize it into something more manageable
     */
    setUpRouterHook() {
        this.router.hooks.beforePreactivation = (routerStateSnapshot) => {
            this.routerStateSnapshot = {
                root: this.serializeRoute(routerStateSnapshot.root),
                url: routerStateSnapshot.url
            };
            if (this.shouldDispatchRouterNavigation())
                this.dispatchRouterNavigation();
            return of(true);
        };
    }
    setUpStoreListener() {
        this.routerQuery
            .select(state => state)
            .subscribe(s => {
            this.routerState = s;
            this.navigateIfNeeded();
        });
    }
    shouldDispatchRouterNavigation() {
        if (!this.routerState)
            return true;
        return !this.navigationTriggeredByDispatch;
    }
    navigateIfNeeded() {
        if (!this.routerState || !this.routerState.state) {
            return;
        }
        if (this.dispatchTriggeredByRouter)
            return;
        if (this.router.url !== this.routerState.state.url) {
            this.navigationTriggeredByDispatch = true;
            setSkipAction();
            this.router.navigateByUrl(this.routerState.state.url);
        }
    }
    setUpStateRollbackEvents() {
        this.router.events.subscribe(e => {
            if (e instanceof RoutesRecognized) {
                this.lastRoutesRecognized = e;
            }
            else if (e instanceof NavigationCancel) {
                this.dispatchRouterCancel(e);
            }
            else if (e instanceof NavigationError) {
                this.dispatchRouterError(e);
            }
        });
    }
    serializeRoute(route) {
        let state = route.root;
        while (state.firstChild) {
            state = state.firstChild;
        }
        const { params, data, paramMap, queryParamMap, queryParams, fragment } = state;
        return {
            url: route.url,
            params,
            queryParams,
            fragment,
            data,
            paramMap,
            queryParamMap
        };
    }
};
RouterService.ngInjectableDef = i0.defineInjectable({ factory: function RouterService_Factory() { return new RouterService(i0.inject(i1.RouterStore), i0.inject(i2.RouterQuery), i0.inject(i3.Router)); }, token: RouterService, providedIn: "root" });
tslib_1.__decorate([
    action('Navigation Cancelled'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [NavigationCancel]),
    tslib_1.__metadata("design:returntype", void 0)
], RouterService.prototype, "dispatchRouterCancel", null);
tslib_1.__decorate([
    action('Navigation Error'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [NavigationError]),
    tslib_1.__metadata("design:returntype", void 0)
], RouterService.prototype, "dispatchRouterError", null);
tslib_1.__decorate([
    action('Navigation'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], RouterService.prototype, "dispatchRouterNavigation", null);
RouterService = tslib_1.__decorate([
    Injectable({
        providedIn: 'root'
    }),
    tslib_1.__metadata("design:paramtypes", [RouterStore, RouterQuery, Router])
], RouterService);
export { RouterService };
//# sourceMappingURL=data:application/json;base64,