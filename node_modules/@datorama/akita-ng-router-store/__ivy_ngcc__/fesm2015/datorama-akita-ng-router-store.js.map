{"version":3,"file":"datorama-akita-ng-router-store.js","sources":["ng:/@datorama/akita-ng-router-store/router.store.ts","ng:/@datorama/akita-ng-router-store/router.query.ts","ng:/@datorama/akita-ng-router-store/router.service.ts","ng:/@datorama/akita-ng-router-store/router.module.ts","ng:/@datorama/akita-ng-router-store/datorama-akita-ng-router-store.ts"],"names":["tslib_1.__decorate"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { RouterStateSnapshot } from '@angular/router';\nimport { Store, StoreConfig } from '@datorama/akita';\n\nexport type RouterState<T = RouterStateSnapshot> = {\n  state: T | null;\n  navigationId: number | null;\n};\n\nexport function createInitialRouterState(): RouterState {\n  return {\n    state: null,\n    navigationId: null\n  };\n}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'router' })\nexport class RouterStore extends Store<RouterState> {\n  constructor() {\n    super(createInitialRouterState());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RouterStore, RouterState } from './router.store';\nimport { Query, HashMap, filterNil } from '@datorama/akita';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, pluck, distinctUntilChanged } from 'rxjs/operators';\nimport { RouterStateSnapshot, Data } from '@angular/router';\n\nfunction slice(section: string) {\n  return (source: Observable<RouterState<RouterStateSnapshot>>) => {\n    return source.pipe(map(data => data.state)).pipe(\n      filterNil,\n      map(state => (state!.root as any)[section])\n    );\n  };\n}\n\n@Injectable()\nexport class RouterQuery extends Query<RouterState> {\n  constructor(protected store: RouterStore) {\n    super(store);\n  }\n\n  selectParams<T>(names: string): Observable<T>;\n  selectParams<T>(names: string[]): Observable<T[]>;\n  selectParams<T>(): Observable<HashMap<T>>;\n  selectParams<T>(names?: string | string[]): Observable<T | T[] | HashMap<T>> {\n    if (names === undefined) {\n      return this.select().pipe(slice('params'), distinctUntilChanged());\n    }\n\n    const select = (p: string) =>\n      this.select().pipe(\n        slice('params'),\n        pluck(p),\n        distinctUntilChanged()\n      );\n\n    if (Array.isArray(names)) {\n      const sources = names.map(select);\n      return combineLatest(sources);\n    }\n\n    return select(names).pipe(distinctUntilChanged());\n  }\n\n  getParams<T>(): HashMap<T>;\n  getParams<T>(name: string): T;\n  getParams<T>(name?: string): T | HashMap<any> | null {\n    if (this.getValue().state) {\n      const params = this.getValue().state!.root.params;\n      if (name === undefined) {\n        return params;\n      }\n\n      return params[name];\n    }\n\n    return null;\n  }\n\n  selectQueryParams<T>(names: string): Observable<T>;\n  selectQueryParams<T>(names: string[]): Observable<T[]>;\n  selectQueryParams<T>(): Observable<HashMap<T>>;\n  selectQueryParams<T>(names?: string | string[]): Observable<T | T[] | HashMap<T>> {\n    if (names === undefined) {\n      return this.select().pipe(slice('queryParams'), distinctUntilChanged());\n    }\n\n    const select = (p: string) =>\n      this.select().pipe(\n        slice('queryParams'),\n        pluck(p),\n        distinctUntilChanged()\n      );\n\n    if (Array.isArray(names)) {\n      const sources = names.map(select);\n      return combineLatest(sources);\n    }\n\n    return select(names);\n  }\n\n  getQueryParams<T>(name: string): T;\n  getQueryParams<T>(): HashMap<T>;\n  getQueryParams<T>(name?: string): T | HashMap<T> | null {\n    if (this.getValue().state) {\n      const params = this.getValue().state!.root.queryParams;\n      if (name === undefined) {\n        return params;\n      }\n\n      return params[name];\n    }\n\n    return null;\n  }\n\n  selectFragment(): Observable<string> {\n    return this.select().pipe(slice('fragment'), distinctUntilChanged());\n  }\n\n  getFragment(): string | null {\n    if (this.getValue().state) {\n      return this.getValue().state!.root.fragment;\n    }\n\n    return null;\n  }\n\n  selectData<T>(name: string): Observable<T>;\n  selectData<T>(): Observable<HashMap<T>>;\n  selectData<T>(name?: string): Observable<T | HashMap<T>> {\n    if (name === undefined) {\n      return this.select().pipe(slice('data'), distinctUntilChanged());\n    }\n\n    return this.select().pipe(\n      slice('data'),\n      pluck(name),\n      distinctUntilChanged()\n    );\n  }\n\n  getData<T>(name: string): T | null;\n  getData<T>(): Data | null;\n  getData<T>(name?: string): Data | null {\n    if (this.getValue().state) {\n      const data = this.getValue().state!.root.data;\n      if (name === undefined) {\n        return data;\n      }\n\n      return data[name];\n    }\n\n    return null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  NavigationCancel,\n  NavigationError,\n  Router,\n  RouterStateSnapshot,\n  RoutesRecognized\n} from '@angular/router';\nimport { of } from 'rxjs';\nimport { RouterStore } from './router.store';\nimport { RouterQuery } from './router.query';\nimport { action, setSkipAction } from '@datorama/akita';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RouterService {\n  private routerStateSnapshot: any;\n  private lastRoutesRecognized: any;\n  private dispatchTriggeredByRouter = false;\n  private navigationTriggeredByDispatch = false;\n  private routerState: any;\n\n  constructor(private routerStore: RouterStore, private routerQuery: RouterQuery, private router: Router) {}\n\n  @action('Navigation Cancelled')\n  dispatchRouterCancel(event: NavigationCancel) {\n    this.update();\n  }\n\n  @action('Navigation Error')\n  dispatchRouterError(event: NavigationError) {\n    this.update();\n  }\n\n  @action('Navigation')\n  dispatchRouterNavigation() {\n    this.update();\n  }\n\n  init() {\n    this.setUpRouterHook();\n    this.setUpStoreListener();\n    this.setUpStateRollbackEvents();\n  }\n\n  private update() {\n    this.dispatchTriggeredByRouter = true;\n    this.routerStore.update((state: any) => {\n      return {\n        ...state,\n        state: this.routerStateSnapshot,\n        navigationId: this.lastRoutesRecognized ? this.lastRoutesRecognized.id : null\n      };\n    });\n    this.dispatchTriggeredByRouter = false;\n    this.navigationTriggeredByDispatch = false;\n  }\n\n  /**\n   * Hook into the angular router before each navigation action is performed\n   * since the route tree can be large, we serialize it into something more manageable\n   */\n  private setUpRouterHook(): void {\n    (this.router as any).hooks.beforePreactivation = (routerStateSnapshot: RouterStateSnapshot) => {\n      this.routerStateSnapshot = {\n        root: this.serializeRoute(routerStateSnapshot.root),\n        url: routerStateSnapshot.url\n      };\n      if (this.shouldDispatchRouterNavigation()) this.dispatchRouterNavigation();\n      return of(true);\n    };\n  }\n\n  private setUpStoreListener(): void {\n    this.routerQuery\n      .select(state => state)\n      .subscribe(s => {\n        this.routerState = s;\n        this.navigateIfNeeded();\n      });\n  }\n\n  private shouldDispatchRouterNavigation(): boolean {\n    if (!this.routerState) return true;\n    return !this.navigationTriggeredByDispatch;\n  }\n\n  private navigateIfNeeded(): void {\n    if (!this.routerState || !this.routerState.state) {\n      return;\n    }\n    if (this.dispatchTriggeredByRouter) return;\n\n    if (this.router.url !== this.routerState.state.url) {\n      this.navigationTriggeredByDispatch = true;\n      setSkipAction();\n      this.router.navigateByUrl(this.routerState.state.url);\n    }\n  }\n\n  private setUpStateRollbackEvents(): void {\n    this.router.events.subscribe(e => {\n      if (e instanceof RoutesRecognized) {\n        this.lastRoutesRecognized = e;\n      } else if (e instanceof NavigationCancel) {\n        this.dispatchRouterCancel(e);\n      } else if (e instanceof NavigationError) {\n        this.dispatchRouterError(e);\n      }\n    });\n  }\n\n  private serializeRoute(route: ActivatedRouteSnapshot): Partial<ActivatedRouteSnapshot> {\n    let state: ActivatedRouteSnapshot = route.root;\n    while (state.firstChild) {\n      state = state.firstChild;\n    }\n    const { params, data, paramMap, queryParamMap, queryParams, fragment } = state;\n\n    return {\n      url: route.url,\n      params,\n      queryParams,\n      fragment,\n      data,\n      paramMap,\n      queryParamMap\n    };\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { RouterStore } from './router.store';\nimport { RouterService } from './router.service';\nimport { RouterQuery } from './router.query';\n\n@NgModule({})\nexport class AkitaNgRouterStoreModule {\n  constructor(private routerService: RouterService) {\n    this.routerService.init();\n  }\n\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: AkitaNgRouterStoreModule,\n      providers: [RouterStore, RouterService, RouterQuery]\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}