import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { RouterStore } from './router.store';
import { Query, filterNil } from '@datorama/akita';
import { combineLatest } from 'rxjs';
import { map, pluck, distinctUntilChanged } from 'rxjs/operators';
function slice(section) {
    return function (source) {
        return source.pipe(map(function (data) { return data.state; })).pipe(filterNil, map(function (state) { return state.root[section]; }));
    };
}
var RouterQuery = /** @class */ (function (_super) {
    tslib_1.__extends(RouterQuery, _super);
    function RouterQuery(store) {
        var _this = _super.call(this, store) || this;
        _this.store = store;
        return _this;
    }
    RouterQuery.prototype.selectParams = function (names) {
        var _this = this;
        if (names === undefined) {
            return this.select().pipe(slice('params'), distinctUntilChanged());
        }
        var select = function (p) {
            return _this.select().pipe(slice('params'), pluck(p), distinctUntilChanged());
        };
        if (Array.isArray(names)) {
            var sources = names.map(select);
            return combineLatest(sources);
        }
        return select(names).pipe(distinctUntilChanged());
    };
    RouterQuery.prototype.getParams = function (name) {
        if (this.getValue().state) {
            var params = this.getValue().state.root.params;
            if (name === undefined) {
                return params;
            }
            return params[name];
        }
        return null;
    };
    RouterQuery.prototype.selectQueryParams = function (names) {
        var _this = this;
        if (names === undefined) {
            return this.select().pipe(slice('queryParams'), distinctUntilChanged());
        }
        var select = function (p) {
            return _this.select().pipe(slice('queryParams'), pluck(p), distinctUntilChanged());
        };
        if (Array.isArray(names)) {
            var sources = names.map(select);
            return combineLatest(sources);
        }
        return select(names);
    };
    RouterQuery.prototype.getQueryParams = function (name) {
        if (this.getValue().state) {
            var params = this.getValue().state.root.queryParams;
            if (name === undefined) {
                return params;
            }
            return params[name];
        }
        return null;
    };
    RouterQuery.prototype.selectFragment = function () {
        return this.select().pipe(slice('fragment'), distinctUntilChanged());
    };
    RouterQuery.prototype.getFragment = function () {
        if (this.getValue().state) {
            return this.getValue().state.root.fragment;
        }
        return null;
    };
    RouterQuery.prototype.selectData = function (name) {
        if (name === undefined) {
            return this.select().pipe(slice('data'), distinctUntilChanged());
        }
        return this.select().pipe(slice('data'), pluck(name), distinctUntilChanged());
    };
    RouterQuery.prototype.getData = function (name) {
        if (this.getValue().state) {
            var data = this.getValue().state.root.data;
            if (name === undefined) {
                return data;
            }
            return data[name];
        }
        return null;
    };
    RouterQuery = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [RouterStore])
    ], RouterQuery);
    return RouterQuery;
}(Query));
export { RouterQuery };
//# sourceMappingURL=data:application/json;base64,