import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { NavigationCancel, NavigationError, Router, RoutesRecognized } from '@angular/router';
import { of } from 'rxjs';
import { RouterStore } from './router.store';
import { RouterQuery } from './router.query';
import { action, setSkipAction } from '@datorama/akita';
import * as i0 from "@angular/core";
import * as i1 from "./router.store";
import * as i2 from "./router.query";
import * as i3 from "@angular/router";
var RouterService = /** @class */ (function () {
    function RouterService(routerStore, routerQuery, router) {
        this.routerStore = routerStore;
        this.routerQuery = routerQuery;
        this.router = router;
        this.dispatchTriggeredByRouter = false;
        this.navigationTriggeredByDispatch = false;
    }
    RouterService.prototype.dispatchRouterCancel = function (event) {
        this.update();
    };
    RouterService.prototype.dispatchRouterError = function (event) {
        this.update();
    };
    RouterService.prototype.dispatchRouterNavigation = function () {
        this.update();
    };
    RouterService.prototype.init = function () {
        this.setUpRouterHook();
        this.setUpStoreListener();
        this.setUpStateRollbackEvents();
    };
    RouterService.prototype.update = function () {
        var _this = this;
        this.dispatchTriggeredByRouter = true;
        this.routerStore.update(function (state) {
            return tslib_1.__assign({}, state, { state: _this.routerStateSnapshot, navigationId: _this.lastRoutesRecognized ? _this.lastRoutesRecognized.id : null });
        });
        this.dispatchTriggeredByRouter = false;
        this.navigationTriggeredByDispatch = false;
    };
    /**
     * Hook into the angular router before each navigation action is performed
     * since the route tree can be large, we serialize it into something more manageable
     */
    RouterService.prototype.setUpRouterHook = function () {
        var _this = this;
        this.router.hooks.beforePreactivation = function (routerStateSnapshot) {
            _this.routerStateSnapshot = {
                root: _this.serializeRoute(routerStateSnapshot.root),
                url: routerStateSnapshot.url
            };
            if (_this.shouldDispatchRouterNavigation())
                _this.dispatchRouterNavigation();
            return of(true);
        };
    };
    RouterService.prototype.setUpStoreListener = function () {
        var _this = this;
        this.routerQuery
            .select(function (state) { return state; })
            .subscribe(function (s) {
            _this.routerState = s;
            _this.navigateIfNeeded();
        });
    };
    RouterService.prototype.shouldDispatchRouterNavigation = function () {
        if (!this.routerState)
            return true;
        return !this.navigationTriggeredByDispatch;
    };
    RouterService.prototype.navigateIfNeeded = function () {
        if (!this.routerState || !this.routerState.state) {
            return;
        }
        if (this.dispatchTriggeredByRouter)
            return;
        if (this.router.url !== this.routerState.state.url) {
            this.navigationTriggeredByDispatch = true;
            setSkipAction();
            this.router.navigateByUrl(this.routerState.state.url);
        }
    };
    RouterService.prototype.setUpStateRollbackEvents = function () {
        var _this = this;
        this.router.events.subscribe(function (e) {
            if (e instanceof RoutesRecognized) {
                _this.lastRoutesRecognized = e;
            }
            else if (e instanceof NavigationCancel) {
                _this.dispatchRouterCancel(e);
            }
            else if (e instanceof NavigationError) {
                _this.dispatchRouterError(e);
            }
        });
    };
    RouterService.prototype.serializeRoute = function (route) {
        var state = route.root;
        while (state.firstChild) {
            state = state.firstChild;
        }
        var params = state.params, data = state.data, paramMap = state.paramMap, queryParamMap = state.queryParamMap, queryParams = state.queryParams, fragment = state.fragment;
        return {
            url: route.url,
            params: params,
            queryParams: queryParams,
            fragment: fragment,
            data: data,
            paramMap: paramMap,
            queryParamMap: queryParamMap
        };
    };
    RouterService.ngInjectableDef = i0.defineInjectable({ factory: function RouterService_Factory() { return new RouterService(i0.inject(i1.RouterStore), i0.inject(i2.RouterQuery), i0.inject(i3.Router)); }, token: RouterService, providedIn: "root" });
    tslib_1.__decorate([
        action('Navigation Cancelled'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [NavigationCancel]),
        tslib_1.__metadata("design:returntype", void 0)
    ], RouterService.prototype, "dispatchRouterCancel", null);
    tslib_1.__decorate([
        action('Navigation Error'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [NavigationError]),
        tslib_1.__metadata("design:returntype", void 0)
    ], RouterService.prototype, "dispatchRouterError", null);
    tslib_1.__decorate([
        action('Navigation'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], RouterService.prototype, "dispatchRouterNavigation", null);
    RouterService = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        }),
        tslib_1.__metadata("design:paramtypes", [RouterStore, RouterQuery, Router])
    ], RouterService);
    return RouterService;
}());
export { RouterService };
//# sourceMappingURL=data:application/json;base64,